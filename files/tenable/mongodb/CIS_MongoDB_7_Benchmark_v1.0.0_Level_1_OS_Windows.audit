#TRUSTED 3083b9e3035db8dac7bd81e4ef448baca59ab4e46d1d9216d2f9f434a653c9bc865de2a881d00d77a0b0364dce7ce2aeba77de3fee9aa74749a19a53bc2f2bf6b4075f818c652b5a5daca8cda9cb304a80114a623459322f716459cdd834f2ac61b5bf790247b6ad4815c7af612d2ec21aa20dfbd4db03d4c2d70ec94b691451c2ce243b0f12bf7c06fd2caca6a04fa0e091b70274aa2078c34f5b9fa05a0de493e844bcad00094aca6bba6eb675644b4764ae97e8e4dd9c68d83dce5c203773787727ea633ab30e3a7eb4728c7767422aba6e88afe7816be5e622f83bb26c6cf7974f21081ecc85fcddf38b7e8ac442413f8e8adace9e69372cb0cfedbd951f18290869fdf3e81380a37a9c7fb64cec71e66117599ff172d8be60f6bf7c93035c81afd1151e41d3f4c189c14d6ffd099e0440972b385755d330288c76d6587f04f262aa5c6c67f702aa6c1ece8fbeef7c4fd1970b187e1735e4b8ae15b25cfa66b76c1d6372365bd98d8a756a698ff9233360c21f356fea71c2c0a76010469cd85e1d83cbfbda190fbc1cbb24a2a2211ce4082a11e78a5b1e2760447e82e4ca0c6d3377271f6aa6c5318a771114ea7f648f19a5752ed69c9bf704f56e2b63415361bb1ada6c43baabc0b17fdc1f402adeab143072fe4b49e1a67ee18f3d950bf8bcf027ee73c21f934db6a51cd077e950a7f99c2806deff8549dba12dc36233
#TRUST-RSA-SHA256 302daec878a75bc57243c9e73fbcb31ec9e1f6597cd536de55f6c25b8a9134f8e8b19fe21683bd991139aa9f4b3451d93d61dbd0e04a8a268670514a6f559faa6eb412cd4db44a85988d8325f327c02df7f7888029dcaea7cdc336c77e7d5f42b3b62b746d4154b7e0468b8754645219b6f9a055c811572acbce68b8145359fb157dea501f2ed3d2e438c8dde75803c9b8f43b3c86e3d823dd7be3919cd3cb42d8c1dd2072631761059b3489ee4710ff80be4a09b6b9a6fc69a852542198538aa41287b3bedeb46f69f913a99dd6e5e6511f58e34dc823a81bb0b4ea3f7ffc3d837d4f22bfc94878bd8bb746b8aeee5cf5dc77114c6b66f7dae5c22846b6b498bc81377ab4918d67f5e653233eb55d46ca6d801d38c744c3cb518e1c65255e9978fe08a3a04f034dddafb95dfc7ea92142302d980a1c0bef394687c900b2132494f11e8421a612eaf1618e2c191ea16212c872db6319018d5723159a271ebf17f5d1c4cc70a6790eeba2b39215d23b381c99537be6ef4576161c1f8623c1c2d811cdd30649ed82ac8598c61740e5e9754b411dd271892339ee7c347582318273558b793e1f676f5cd3e21e5cee03237e4ce2c32e44dbacbcc3ff55ae698b1e1a13c7c0dad1e148f3430bb99e8f3be0fbfec070965b0f99a3d18f02972145e6000ac6aedb9def5edf2c1dd174345cdd33f15b9b26c6b84218825fe9700a66da0c
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2024/06/17 $
#
# Description : This document implements the security configuration as recommended by the
#               CIS MongoDB 7 Benchmark v1.0.0
#
#<ui_metadata>
#<display_name>CIS MongoDB 7 L1 OS Windows v1.0.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>MongoDB 7</name>
#  <profile>L1 OS Windows</profile>
#  <version>1.0.0</version>
#  <link>https://workbench.cisecurity.org/benchmarks/15135</link>
#</spec>
#<labels>ms_mongodb_7,cis</labels>
#<benchmark_refs>CCE,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>MONGOD_CONF_FULL_PATH</name>
#    <default>C:\Program Files\MongoDB\Server\7.0\bin\mongod.cfg</default>
#    <description>Full path to the mongodb conf file</description>
#    <info>Full path to the mongodb conf file</info>
#    <value_type>WIN_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>MONGODB_DBPATH</name>
#    <default>C:\Program Files\MongoDB\Server\7.0\data</default>
#    <description>Full path to the mongodb data path</description>
#    <info>Full path to the mongodb data path</info>
#    <value_type>WIN_FILE_PATH</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Windows" version:"2">
<group_policy:"CIS MongoDB 7">

<if>
  <condition type:"AND">
    <custom_item>
      type            : AUDIT_POWERSHELL
      description     : "Check for MongoDB 7"
      value_type      : POLICY_TEXT
      value_data      : "^7"
      powershell_args : "Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Where-Object { $_.DisplayName -Clike 'Mongo*'} | Select-Object DisplayVersion"
      check_type      : CHECK_REGEX
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_MongoDB_7_Benchmark_v1.0.0_Level_1_OS_Windows.audit from CIS MongoDB 7 Benchmark"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
    </report>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "2.1 Ensure Authentication is configured"
      info        : "This setting ensures that all clients, users, servers are required to authenticate before being granted access to the MongoDB database.

Authentication is the process of verifying the identity of a client. When access control, i.e. authorization, is enabled, MongoDB requires all clients to authenticate themselves in order to determine their access.

from MongoDB documentation

Authentication Mechanisms

MongoDB supports a number of authentication mechanisms that clients can use to verify their identity. These mechanisms allow MongoDB to integrate into your existing authentication system.

MongoDB supports multiple authentication mechanisms:

SCRAM (Default)

x.509 Certificate Authentication.

Certificate Authority

For production use, your MongoDB deployment should use valid certificates generated and signed by a certificate authority. You or your organization can generate and maintain an independent certificate authority, or use certificates generated by third-party TLS/SSL vendors.

In addition to supporting the aforementioned mechanisms, MongoDB Enterprise also supports the following mechanisms:

LDAP proxy authentication

Kerberos authentication.

Rationale:

Failure to authenticate clients, users, servers can enable unauthorized access to the MongoDB database and can prevent tracing actions back to their sources.

It's highly recommended that password length and complexity also be in-place. When performing the traditional user/password authentication against MongoDB there is not in-place intrinsic password complexity check and there is no LOCKING mechanism with multiple failure logins. So, MongoDB is prone to brute force attacks compared to other database systems."
      solution    : "The authentication mechanism should be implemented before anyone accesses the MongoDB Server.
To enable the authentication mechanism:

Start the MongoDB instance without authentication.

mongod --port 27017 --dbpath /data/db1

Or

mongod.exe --port 27017 --dbpath db1

Create the system user administrator, ensuring that its password meets organizationally-defined password in terms of length and complexity requirements as there is no in-place locking mechanism for multiple failed login attempts against MongoDB.

use admin
db.createUser(
  {
    user: 'MongoAdmin',
    pwd: 'password',
    roles: [ { role: 'root', db: 'admin' } ]
  }
)

Open mongod.conf and change for authorization value to enabled:

security:
    authorization: 'enabled'

Restart the MongoDB instance

service mongod restart

Default Value:

By default, authorization is set to disable."
      reference   : "800-171|3.5.2,800-171|3.5.3,800-53|IA-2(1),800-53|IA-2(2),800-53|IA-5(1),800-53r5|IA-2(1),800-53r5|IA-2(2),800-53r5|IA-5(1),CN-L3|7.1.2.7(b),CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSCv8|5.2,CSCv8|6.3,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),ITSG-33|IA-2(2),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,NESA|T5.4.2,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|4.1,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
      value_type  : POLICY_TEXT
      value_data  : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\s]*authorization[\s]*:"
      expect      : "^[\s]*authorization[\s]*:[\s]*(?i)enabled(?-i)"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "2.2 Ensure that MongoDB does not bypass authentication via the localhost exception"
      info        : "MongoDB should not be set to bypass authentication via the localhost exception. The localhost exception allows the user to enable authorization before creating the first user in the system. When active, the localhost exception allows all connections from the localhost interface to have full access to that instance. The exception applies only when there are no users created in the MongoDB instance.

Note: This recommendation only applies when there are no users created in the MongoDB instance.

Rationale:

Disabling this exception will prevent unauthorized local access to the MongoDB database. It will also ensure the traceability of each database activity to a specific user. Localhost Exception allows direct connect to Mongod's without any UN/PW."
      solution    : "To disable local authentication on the MongoDB database.
Type OS Console Command

mongod --setParameter enableLocalhostAuthBypass=0

or
To manually configure use the setParameter option in the mongo configuration file to set it to false.

setParameter:
  enableLocalhostAuthBypass: false

Default Value:

By default, localhost exception value (enableLocalhostAuthBypass) is true."
      reference   : "800-171|3.5.3,800-53|IA-2(1),800-53|IA-2(2),800-53r5|IA-2(1),800-53r5|IA-2(2),CN-L3|7.1.2.7(b),CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSCv8|6.3,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),ITSG-33|IA-2(2),LEVEL|1A,NESA|T5.4.2,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
      value_type  : POLICY_TEXT
      value_data  : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\s]*enableLocalhostAuthBypass[\s]*:"
      expect      : "^[\s]*enableLocalhostAuthBypass[\s]*:[\s]*(?i)false(?-i)"
    </custom_item>

    <report type:"WARNING">
      description : "3.3 Ensure that MongoDB is run using a non-privileged, dedicated service account"
      info        : "The MongoDB service should not be run using a privileged account such as 'root' because this unnecessarily exposes the operating system to high risk.

Rationale:

Using a non-privileged, dedicated service account restricts the database from accessing the critical areas of the operating system which are not required by the MongoDB. This will also mitigate the potential for unauthorized access via a compromised, privileged account on the operating system.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Create a dedicated user for performing MongoDB database activity.

Set the Database data files, the keyfile, and the SSL private key files to only be readable by the mongod/mongos user.

Set the log files to only be writable by the mongod/mongos user and readable only by root.

Default Value:

Not configured"
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|4.3,CSCv8|5.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1M,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
    </report>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "4.2 Ensure Weak Protocols are Disabled"
      info        : "Servers can be configured to disable specific TLS/SSL protocol versions which may be vulnerable to exploitation and/or lack features which improve the level of security as provided by newer versions of the protocol.

Rationale:

The TLSv1.0 protocol is vulnerable to the BEAST attack when used in CBC mode (October 2011). Unfortunately, the TLSv1.0 uses CBC modes for all of the block mode ciphers, which only leaves the RC4 streaming cipher which is also weak and is not recommended. Therefore, it is recommended that the TLSv1.0 protocol be disabled. The TLSv1.1 protocol does not support Authenticated Encryption with Associated Data (AEAD) which is designed to simultaneously provide confidentiality, integrity, and authenticity.

The NIST SP 800-52r2 guidelines for TLS configuration require that TLS 1.2 is configured with FIPS-based cipher suites be supported by all government TLS servers and clients and requires support of TLS 1.3 by January 1, 2024. A September 2018 IETF draft also depreciates the usage of TLSv1.0 and TLSv1.1 as shown in the references.

Impact:

If an attempt to connect using a disabled protocol is made the connection attempt will fail and may have unanticipated impact on clients attempting to establish the connection."
      solution    : "For mongod ('Primary daemon process for the MongoDB system')
In the configuration file /etc/mongod.conf, set the disabledProtocols option to to include TLS1_0,TLS1_1:

net:
  ssl:
    mode: requireSSL
    PEMKeyFile: /etc/ssl/mongodb.pem
    CAFile: /etc/ssl/caToValidateClientCertificates.pem
    disabledProtocols: TLS1_0,TLS1_1

And restart monogdb instance with

mongod --config /etc/mongod.conf

Or

mongod --sslDisabledProtocols 'TLS1_0,TLS1_1

Default Value:

TLS1_0 if TLS 1.1+ is available on the system."
      reference   : "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
      value_type  : POLICY_TEXT
      value_data  : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\s]*disabledProtocols[\s]*:"
      expect      : "^[\s]*disabledProtocols[\s]*:[\s]*(?=.*TLS1_0)(?=.*TLS1_1).*"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "4.3 Ensure Encryption of Data in Transit TLS or SSL (Transport Encryption)"
      info        : "Use TLS or SSL to protect all incoming and outgoing connections. This should include using TLS or SSL to encrypt communication between the mongod and mongos components of a MongoDB client as well as between all applications and MongoDB.

MongoDB supports TLS/SSL (Transport Layer Security/Secure Sockets Layer) to encrypt all of MongoDB's network traffic. TLS/SSL ensures that MongoDB network traffic is only readable by the intended client.

Please note: As of MongoDB version 4.2 SSL has been deprecated.

Also, starting in MongoDB version 4.0, MongoDB disables support for TLS 1.0 encryption on systems where TLS 1.1+ is available.

Rationale:

This prevents sniffing of cleartext traffic between MongoDB components or performing a man-in-the-middle attack for MongoDB."
      solution    : "Configure MongoDB servers to require the use of SSL or TLS to encrypt all MongoDB network communications.
To implement SSL or TLS to encrypt all MongoDB network communication, perform the following steps:
For mongod ('Primary daemon process for the MongoDB system')
In the configuration file /etc/mongod.conf, set the PEMKeyFile option to the certificate file's path and then start the component with this command:

net:
   tls:
      mode: requireTLS
      certificateKeyFile: /etc/ssl/mongodb.pem
      CAFile: /etc/ssl/caToValidateClientCertificates.pem

And restart monogdb instance with

mongod --config /etc/mongod.conf

Default Value:

Not configured"
      reference   : "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
      value_type  : POLICY_TEXT
      value_data  : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\s]*mode[\s]*:"
      expect      : "^[\s]*mode[\s]*:[\s]*(requireTLS|requireSSL)"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "5.1 Ensure that system activity is audited"
      info        : "Track access and changes to database configurations and data. MongoDB Enterprise includes a system auditing facility that can record system events (e.g. user operations, connection events) on a MongoDB instance. These audit records permit forensic analysis and allow administrators to verify proper controls.

Rationale:

System level logs can be handy while troubleshooting an operational problem or handling a security incident."
      solution    : "Set the value of auditLog.destination to the appropriate value from the following options:
syslog
To enable auditing and print audit events to syslog

mongod --dbpath data/db --auditDestination syslog

console
To enable auditing and print audit events to standard output (i.e., stdout)

mongod --dbpath data/db --auditDestination console

Json File
To enable auditing and print audit events to a file in JSON format. Printing audit events to file in JSON format degrades server performance more than printing to a file in BSON format.

mongod --dbpath data/db --auditDestination file --auditFormat JSON --auditPath data/db/auditLog.json

Bson File
To enable auditing and print audit events to a file in BSON binary format

mongod --dbpath data/db --auditDestination file --auditFormat BSON --auditPath data/db/auditLog.bson

Default Value:

Not configured"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
      value_type  : POLICY_TEXT
      value_data  : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\s]*destination[\s]*:"
      expect      : "^[\s]*destination[\s]*:[\s]*(syslog|console|file)"
    </custom_item>

    <custom_item>
      type            : AUDIT_POWERSHELL
      description     : "6.1 Ensure that MongoDB uses a non-default port"
      info            : "Changing the default port used by MongoDB makes it harder for attackers to find the database and target it.

Rationale:

Standard ports are used in automated attacks and by attackers to verify which applications are running on a server.

Impact:

Hackers frequently scan IP addresses for commonly used ports, so it's not uncommon to use a different port to 'fly under the radar'. This is just to avoid detection, other than that there is no added safety by using a different port."
      solution        : "Change the port for MongoDB server to a number other than 27017.
In mongod.conf edit the below lines

# network interfaces
net:
  port: $Orginasation Defined port
  bindIp: $Orginasation Defined IP"
      reference       : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also        : "https://workbench.cisecurity.org/benchmarks/15135"
      value_type      : POLICY_TEXT
      value_data      : "^[\s]*>[\s]*port[\s]*:[\s]*\d+[\s]*$"
      powershell_args : "get-content @MONGOD_CONF_FULL_PATH@ | select-string -pattern '^[\s]*port:' | where-object {$_ -notmatch '27017'}"
      check_type      : CHECK_REGEX
    </custom_item>

    <report type:"WARNING">
      description : "7.1 Ensure appropriate key file permissions are set"
      info        : "In the Shared Cluster, the certificate or keyfile is utilized for authentications. Implementing proper file permissions on the certificate or keyfile will prevent unauthorized access to it.

Rationale:

Protecting the certificate/keyfile strengthens authentication in the sharded cluster and prevents unauthorized access to the MongoDB database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Set the keyFile ownership to mongodb user and remove other permissions by executing these commands:

chmod 600 /keyfile
sudo chown mongodb:mongodb /keyfile

Default Value:

Not configured"
      reference   : "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
    </report>

    <custom_item>
      type            : AUDIT_POWERSHELL
      description     : "7.2 Ensure appropriate database file permissions are set"
      info            : "MongoDB database files need to be protected using file permissions.

Rationale:

This will restrict unauthorized users from accessing the database.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution        : "Set ownership of the database file to mongodb user and remove other permissions using the following commands:

chmod 770 /var/lib/mongodb
chown mongodb:mongodb /var/lib/mongodb

Default Value:

Not configured"
      reference       : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1M,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also        : "https://workbench.cisecurity.org/benchmarks/15135"
      value_type      : POLICY_TEXT
      value_data      : "Manual Review Required"
      powershell_args : 'icacls "@MONGODB_DBPATH@"'
      check_type      : CHECK_REGEX
      severity        : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_MongoDB_7_Benchmark_v1.0.0_Level_1_OS_Windows.audit from CIS MongoDB 7 Benchmark"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/benchmarks/15135"
    </report>
  </else>
</if>

</group_policy>
</check_type>
