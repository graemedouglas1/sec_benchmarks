#TRUSTED 3c323ee99b960be55a7ddbe7203e044ab7a602e9694231aad25d96930eae4ed8fcc4c4d283772b17e071dcf299cc74d42dbd4f50e33096395191051e6071b6959845ba766a7b787920082004714cafa91a52fb6f1279cf7676b1ab1df2ecbdc724567a6e759b302400d9b52f9f59481be42c0fb4337630c69d50d256a3902a56675e3c18b9ca804a1d2a50100d007d271637726e8a3142c8e9df69decaf9890423cf60b923491e444955b66c4a8d1bda78e2b99785025be7a1a165a580883bd79cdc1c2de063c3312cdb09c438e4f1a0cc02fdcdcdeacd8a2d9ae3ac4551806282350ce7b7d0528e97e4e3ff21adadebf56d43721b0af45bc9b476f22081b5d517f41993f02985a1287ca11c6f420bdc709f6e98f251ff5f329b412f2f21152d170230de18d5d9f7830cc3670d269fdddc0812ddb292f3ef8cfbc8fbcb4c754736a6a792c0817d8adaf32f94d1f67290775fa51e1cd2496bf71345b064793d92beaa8f4f36a129666d761f9937e0d671a1d6f351693eedb634e6bb146113a8eaef3352aefda16441d84fd463b7c5fb1c9cb09530d82b5977a9d46ec51f2790c56484f6483d69abe3517be9d7729e228391689b74cca292b1073f5879b6534330bb03d3b9c8c60c3310bbd8dc2f790cd3fe1a0540e369a6f809f4638d276492440aca2792a7305f9887f47aabf18610b1a576b9bd06669a48bb6860965051b2ed
#TRUST-RSA-SHA256 2bfe0238bd879462157f5725a85d07e57832caaccb5ac534626cec89af0d19050cbeceda8d7d638a5b9d3429b783baafceb80d64f5b93063847ecef6df0caeca5eb7736857d6598c78e73557f3d278f9447019e472949ac11ae6e3c86a96c32aff05d247bf96321124d9e171bb40b7410f9cabe3cf40bfa8974bac0d564c95d9781165c4c9b00c599899d7258467b9827d4bebd76bdb0a906211bff6cd6bff27d26f2364deacdcfa30bf5be7d3bc2326859c8e38675296257b59f51e6f22332ed3b765b9df47d0d5797cd4f85107dab6ab3d9b594cc8a2913eaeedf0b3e70598b029dc05cb90459f8b5398f79c3344e616e0d02afa816db5624322765d393b5bf6617169c40392bd73af96b798a5d6a1d77cb8fcd67c25970d00ae7324a8c687f773d3a2ba3744669d35f8e0e6de7c676b2424e40a6903b338c70ae1c886ccc31120e7f7b953cc407d7537130ae27596bbc140c381beb4f532f74180a60ebdab8d37620d4d34f4cb3decf47426e6afbe81a6d2f60a7e94d1b64f6184b6b5fbf4931b638e29530ae38d1187887e5dfddd267bdbd963cc4633a898ab93dd6b3274042ab1d4e766a1055b6a8e4a1bf12560a214e4bb0d16c6e4d912a7b2319de38bfa9dbda4a1b5429cceb9cc13dd17761c24c32d5ba4f60c0ecbefb0167ce65c98f65b5477903a8fb9172dd3ba58ebd3aa6ff3f984e61b64141ef2efcb5e8f8a40
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2024/06/17 $
#
# Description : This document implements the security configuration as recommended by the
#               CIS Oracle MySQL 8.0 Enterprise Edition Benchmark
#
#<ui_metadata>
#<display_name>CIS MySQL 8.0 Enterprise Linux OS L2 v1.3.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>MySQL 8.0 Enterprise</name>
#  <profile>L2 OS Linux</profile>
#  <version>1.3.0</version>
#  <link>https://workbench.cisecurity.org/benchmarks/10139</link>
#</spec>
#<labels>database,cis,mysql,mysql_8,mysql_8.0,mysql_8.0_enterprise,distribution_independent_linux</labels>
#<benchmark_refs>CCE,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Linux found"
      cmd         : "uname -a"
      expect      : "Linux"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_MySQL_8.0_Enterprise_Benchmark_v1.3.0_Level_2_OS_Linux.audit from CIS Oracle MySQL 8.0 Enterprise Edition Benchmark"
      see_also    : "https://workbench.cisecurity.org/benchmarks/10139"
    </report>

    <if>
      <condition type:"OR">
        <custom_item>
          type        : CMD_EXEC
          description : "~/.mysql_history Exists"
          cmd         : "/bin/find /root -name \".mysql_history\" | /usr/bin/awk '{ print } END { if (NR!=0) print \"found\" }'"
          expect      : "found"
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "~/.mysql_history Exists"
          cmd         : "/bin/find /home -name \".mysql_history\" | /usr/bin/awk '{ print } END { if (NR!=0) print \"found\" }'"
          expect      : "found"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "1.3 Disable MySQL Command History"
          info        : "On Linux/UNIX, the MySQL client and MySQL Shell log statements executed interactively to a history file. The default MySQL Client file is named .mysql_history in the user's home directory. The files are split by language and named history.sql, history.js and history.py. Most interactive commands run in the MySQL client application are saved to a history file. The MySQL command history should be disabled. By default, the MySQL Shell does not save history between sessions.

Rationale:

Disabling the MySQL Client and MySQL Shell command history reduces the probability of exposing sensitive information, such as passwords, encryption keys, or other sensitive data or information."
          solution    : "For MySQL Client perform the following steps to remediate this setting:

Remove .mysql_history if it exists.

Use either of the techniques below to prevent it from being created again:

Set the MYSQL_HISTFILE environment variable to /dev/null. This will need to be placed in the shell's startup script.

Create $HOME/.mysql_history as a symbolic to /dev/null.

> ln -s /dev/null $HOME/.mysql_history

Another way to prevent history from being recorded is to use --batch option.

For MySQL Shell perform the following steps to remediate this setting:

Remove $HOME/.mysqlsh/history.* if files exists.

Use either of the techniques below to prevent it from being created again:

Start shell and list show options using \option -l

Set to no history using the command \option --persist history.autoSave=1

Default Value:

By default, the MySQL command history file is located in $HOME/.mysql_history."
          reference   : "800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|MP-6,800-53r5|MP-6,CSCv7|13.2,CSCv8|3.5,CSF|PR.DS-3,CSF|PR.IP-6,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.8.3.2,ITSG-33|MP-6,LEVEL|2A,NESA|T1.4.1,NESA|T1.4.2,NIAv2|MS5b,NIAv2|MS6,NIAv2|MS9,NIAv2|MS10a,NIAv2|MS10b,NIAv2|MS10c,NIAv2|MS10d,NIAv2|MS10e,NIAv2|MS10f,NIAv2|MS11a,NIAv2|MS11b,NIAv2|MS12a,NIAv2|MS12b,NIAv2|MS12c,NIAv2|MS13,NIAv2|MS14,NIAv2|MS17,NIAv2|MS18a,NIAv2|MS18b,NIAv2|MS18c,NIAv2|MS20,NIAv2|MS21,NIAv2|NS16,QCSC-v1|3.2,QCSC-v1|6.2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/10139"
          cmd         : "for f in $(/bin/find /home /root -name \".mysql_history\"); do /usr/bin/file $f; done | grep -v \"symbolic link to /dev/null\" | /usr/bin/awk '{ print } END { if (NR==0) print \"none\" }'"
          expect      : "none"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "1.3 Disable MySQL Command History"
          info        : "On Linux/UNIX, the MySQL client and MySQL Shell log statements executed interactively to a history file. The default MySQL Client file is named .mysql_history in the user's home directory. The files are split by language and named history.sql, history.js and history.py. Most interactive commands run in the MySQL client application are saved to a history file. The MySQL command history should be disabled. By default, the MySQL Shell does not save history between sessions.

Rationale:

Disabling the MySQL Client and MySQL Shell command history reduces the probability of exposing sensitive information, such as passwords, encryption keys, or other sensitive data or information."
          solution    : "For MySQL Client perform the following steps to remediate this setting:

Remove .mysql_history if it exists.

Use either of the techniques below to prevent it from being created again:

Set the MYSQL_HISTFILE environment variable to /dev/null. This will need to be placed in the shell's startup script.

Create $HOME/.mysql_history as a symbolic to /dev/null.

> ln -s /dev/null $HOME/.mysql_history

Another way to prevent history from being recorded is to use --batch option.

For MySQL Shell perform the following steps to remediate this setting:

Remove $HOME/.mysqlsh/history.* if files exists.

Use either of the techniques below to prevent it from being created again:

Start shell and list show options using \option -l

Set to no history using the command \option --persist history.autoSave=1

Default Value:

By default, the MySQL command history file is located in $HOME/.mysql_history."
          reference   : "800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|MP-6,800-53r5|MP-6,CSCv7|13.2,CSCv8|3.5,CSF|PR.DS-3,CSF|PR.IP-6,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.8.3.2,ITSG-33|MP-6,LEVEL|2A,NESA|T1.4.1,NESA|T1.4.2,NIAv2|MS5b,NIAv2|MS6,NIAv2|MS9,NIAv2|MS10a,NIAv2|MS10b,NIAv2|MS10c,NIAv2|MS10d,NIAv2|MS10e,NIAv2|MS10f,NIAv2|MS11a,NIAv2|MS11b,NIAv2|MS12a,NIAv2|MS12b,NIAv2|MS12c,NIAv2|MS13,NIAv2|MS14,NIAv2|MS17,NIAv2|MS18a,NIAv2|MS18b,NIAv2|MS18c,NIAv2|MS20,NIAv2|MS21,NIAv2|NS16,QCSC-v1|3.2,QCSC-v1|6.2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/10139"
        </report>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.5 Ensure Interactive Login is Disabled"
      info        : "When created, the MySQL user may have interactive access to the operating system, which means that the MySQL user could login to the host as any other user would.

Rationale:

Preventing the MySQL user from logging in interactively may reduce the impact of a compromised MySQL account. There is also more accountability, as accessing the operating system where the MySQL server lies will require the user's own account. Interactive access by the MySQL user is unnecessary and should be disabled.

Impact:

This setting will prevent the MySQL administrator from interactively logging into the operating system using the MySQL user. Instead, the administrator will need to log in using one's own account."
      solution    : "Execute one of the following commands in a terminal:

usermod -s /bin/false mysql

Or

usermod -s /sbin/nologin mysql"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.3,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/10139"
      cmd         : "/usr/bin/getent passwd mysql | /usr/bin/egrep \"^.*[\/bin\/false|\/sbin\/nologin]$\" | /usr/bin/awk '{print} END {if (NR == 1) print \"pass\"}'"
      expect      : "pass"
    </custom_item>

    <report type:"WARNING">
      description : "1.7 Ensure MySQL is Run Under a Sandbox Environment"
      info        : "Use of the chroot() system call at startup, Systemd with settings to achieve isolation, or docker will put MySQL in a Sandbox environment.

Rationale:

Running MySQL in a Sandbox environment may reduce the impact of a MySQL-born vulnerability by making portions of the file system inaccessible to the MySQL instance.

Impact:

Use of the chroot option somewhat limits LOAD DATA INFILE and SELECT ... INTO OUTFILE.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Perform one of the following steps to remediate this setting:

Configure MySQL to use chroot:

Choose a non-system partition <chroot location> for MySQL

Add chroot=<chroot_location> to the my.cnf option file

Configure MySQL to run under systemd:

If mysql is managed by systemd and running, stop the service:

$ sudo systemctl stop <mysqld>.service

If a mysql user and group do not already exist, create them:

$ sudo groupadd mysql
$ sudo useradd -r -g mysql -s /bin/false mysql

Set the oenwership of the base director:

$ sudo chown -R mysql:mysql /usr/local/mysql/

Create or modify the <mysqld>.service file in /lib/systemd/system to include the following entries, if not already present:

[Unit]
Description=MySQL Server

[Install]
WantedBy=multi-user.target

[Service]
User=mysql
Group=mysql

If mysql was not already already managed by systemd execute this command:

$ sudo systemctl daemon-reload

Start the MySQL server:

$ sudo systemctl start <mysqld>.service

If you would like mysql to automatically run at startup execute this command:

$ sudo systemctl enable <mysqld>.service

Follow documentation in the references for standing up MySQL in a Docker container."
      reference   : "800-171|3.13.4,800-53|SC-4,800-53r5|SC-4,CSCv7|2.10,CSCv8|3.12,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-4,ITSG-33|SC-4a.,LEVEL|2M"
      see_also    : "https://workbench.cisecurity.org/benchmarks/10139"
    </report>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.3 Ensure 'allow-suspicious-udfs' is Set to 'OFF'"
      info        : "This option prevents attaching arbitrary shared library functions as user-defined functions by checking for at least one corresponding method named _init, _deinit, _reset, _clear, or _add.

Rationale:

Preventing shared libraries that do not contain user-defined functions from loading will reduce the attack surface of the server."
      solution    : "Perform the following to establish the recommended state:

Remove --allow-suspicious-udfs from the mysqld start up command line.

Remove allow-suspicious-udfs from the MySQL option file.

Default Value:

OFF"
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/10139"
      cmd         : "/usr/bin/my_print_defaults mysqld | /usr/bin/grep allow-suspicious-udfs | /usr/bin/awk '{print} END {if (NR == 0) print \"pass\"}'"
      expect      : "pass"
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_MySQL_8.0_Enterprise_Benchmark_v1.3.0_Level_2_OS_Linux.audit from CIS Oracle MySQL 8.0 Enterprise Edition Benchmark"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/benchmarks/10139"
    </report>
  </else>
</if>

</check_type>
