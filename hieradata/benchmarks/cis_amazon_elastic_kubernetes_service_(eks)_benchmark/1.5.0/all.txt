2.1.1 - Enable audit Logs
3.1.1 - Ensure that the kubeconfig file permissions are set to 644 or more restrictive
3.1.2 - Ensure that the kubelet kubeconfig file ownership is set to rootroot
3.1.3 - Ensure that the kubelet configuration file has permissions set to 644 or more restrictive
3.1.4 - Ensure that the kubelet configuration file ownership is set to rootroot
3.2.1 - Ensure that the Anonymous Auth is Not Enabled
3.2.2 - Ensure that the --authorization-mode argument is not set to AlwaysAllow
3.2.3 - Ensure that a Client CA File is Configured
3.2.4 - Ensure that the --read-only-port is disabled
3.2.5 - Ensure that the --streaming-connection-idle-timeout argument is not set to 0
3.2.6 - Ensure that the --make-iptables-util-chains argument is set to true
3.2.7 - Ensure that the --eventRecordQPS argument is set to 0 or a level which ensures appropriate event capture
3.2.8 - Ensure that the --rotate-certificates argument is not present or is set to true
3.2.9 - Ensure that the RotateKubeletServerCertificate argument is set to true
4.1.1 - Ensure that the cluster-admin role is only used where required
4.1.2 - Minimize access to secrets
4.1.3 - Minimize wildcard use in Roles and ClusterRoles
4.1.4 - Minimize access to create pods
4.1.5 - Ensure that default service accounts are not actively used.
4.1.6 - Ensure that Service Account Tokens are only mounted where necessary
4.1.7 - Avoid use of systemmasters group
4.1.8 - Limit use of the Bind Impersonate and Escalate permissions in the Kubernetes cluster
4.2.1 - Minimize the admission of privileged containers
4.2.2 - Minimize the admission of containers wishing to share the host process ID namespace
4.2.3 - Minimize the admission of containers wishing to share the host IPC namespace
4.2.4 - Minimize the admission of containers wishing to share the host network namespace
4.2.5 - Minimize the admission of containers with allowPrivilegeEscalation
4.3.1 - Ensure CNI plugin supports network policies.
4.3.2 - Ensure that all Namespaces have Network Policies defined
4.4.1 - Prefer using secrets as files over secrets as environment variables
4.4.2 - Consider external secret storage
4.5.1 - Create administrative boundaries between resources using namespaces
4.5.2 - Apply Security Context to Your Pods and Containers
4.5.3 - The default namespace should not be used
5.1.1 - Ensure Image Vulnerability Scanning using Amazon ECR image scanning or a third party provider
5.1.2 - Minimize user access to Amazon ECR
5.1.3 - Minimize cluster access to read-only for Amazon ECR
5.1.4 - Minimize Container Registries to only those approved
5.2.1 - Prefer using dedicated EKS Service Accounts
5.3.1 - Ensure Kubernetes Secrets are encrypted using Customer Master Keys CMKs managed in AWS KMS
5.4.1 - Restrict Access to the Control Plane Endpoint
5.4.2 - Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled
5.4.3 - Ensure clusters are created with Private Nodes
5.4.4 - Ensure Network Policy is Enabled and set as appropriate
5.4.5 - Encrypt traffic to HTTPS load balancers with TLS certificates
5.5.1 - Manage Kubernetes RBAC users with AWS IAM Authenticator for Kubernetes or Upgrade to AWS CLI v1.16.156 or greater