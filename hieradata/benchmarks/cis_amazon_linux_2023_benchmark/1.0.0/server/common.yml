---

inspec_rules:
  "1.1.1.1":
    title: '1.1.1.1 | Ensure mounting of squashfs filesystems is disabled - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                squashfs
         filesystem type is a compressed readonly Linux filesystem embedded in small footprint systems. A
        squashfs
         image can be used without having to first decompress the image.
    remediation: |
        Run the following script to disable the                    squashfs
         module:                 If the module is available in the running kernel:
        Create a file with                      install squashfs /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file with                      blacklist squashfs
         in the                      /etc/modprobe.d/
         directory
        Unload                      squashfs
         from the kernel                   If available in ANY installed kernel:
        Create a file with                      blacklist squashfs
         in the                      /etc/modprobe.d/
         directory                   If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="squashfs" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
                         Impact:
        As Snap packages utilizes                      squashfs
         as a compressed filesystem, disabling                      squashfs
         will cause Snap packages to fail.                   Snap
         application packages of software are self-contained and work across a range of Linux distributions. This is unlike
        traditional Linux package management approaches, like APT or RPM, which require specifically adapted packages per Linux
        distribution on an application update and delay therefore application deployment from developers to their software's
        end-user. Snaps themselves have no dependency on any external store ("App store"), can be obtained from any source and
        can be therefore used for upstream software deployment.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == squashfs:fs'

  "1.1.1.2":
    title: '1.1.1.2 | Ensure mounting of udf filesystems is disabled - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                udf
         filesystem type is the universal disk format used to implement ISO/IEC 13346 and ECMA167 specifications. This is an
        open vendor filesystem type for data storage on a broad range of media. This filesystem type is necessary to support
        writing DVDs and newer optical disc formats.
    remediation: |
        Run the following script to disable the                    udf
         module:                 If the module is available in the running kernel:
        Create a file with                      install udf /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file with                      blacklist udf
         in the                      /etc/modprobe.d/
         directory
        Unload                      udf
         from the kernel                   If available in ANY installed kernel:
        Create a file with                      blacklist udf
         in the                      /etc/modprobe.d/
         directory                   If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="udf" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == udf:fs'

  "1.1.1.3":
    title: '1.1.1.3 | Ensure mounting of cramfs filesystems is disabled - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                cramfs
         filesystem type is a compressed readonly Linux filesystem embedded in small footprint systems. A                cramfs
         image can be used without having to first decompress the image.
    remediation: |
        Run the following script to disable the                    cramfs
         module:                 If the module is available in the running kernel:
        Create a file with                      install cramfs /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file with                      blacklist cramfs
         in the                      /etc/modprobe.d/
         directory
        Unload                      cramfs
         from the kernel                   If available in ANY installed kernel:
        Create a file with                      blacklist cramfs
         in the                      /etc/modprobe.d/
         directory                   If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="cramfs" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == cramfs:fs'

  "1.1.1.4":
    title: '1.1.1.4 | Ensure mounting of freevxfs filesystems is disabled - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                freevxfs
         filesystem type is a free version of the Veritas type filesystem. This is the primary filesystem type for HPUX
        operating systems.
    remediation: |
        Run the following script to disable the                    freevxfs
         module:                 If the module is available in the running kernel:
        Create a file with                      install freevxfs /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file with                      blacklist freevxfs
         in the                      /etc/modprobe.d/
         directory
        Unload                      freevxfs
         from the kernel                   If available in ANY installed kernel:
        Create a file with                      blacklist freevxfs
         in the                      /etc/modprobe.d/
         directory                   If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="freevxfs" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == freevxfs:fs'

  "1.1.1.5":
    title: '1.1.1.5 | Ensure mounting of jffs2 filesystems is disabled - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                jffs2
         journaling flash filesystem 2 filesystem type is a logstructured filesystem used in flash memory devices.
    remediation: |
        Run the following script to disable the                    jffs2
         module:                 If the module is available in the running kernel:
        Create a file with                      install jffs2 /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file with                      blacklist jffs2
         in the                      /etc/modprobe.d/
         directory
        Unload                      jffs2
         from the kernel                   If available in ANY installed kernel:
        Create a file with                      blacklist jffs2
         in the                      /etc/modprobe.d/
         directory                   If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="jffs2" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.5', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == jffs2:fs'

  "1.1.1.6":
    title: '1.1.1.6 | Ensure mounting of hfs filesystems is disabled - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                hfs
         filesystem type is a hierarchical filesystem that allows you to mount Mac OS filesystems.
    remediation: |
        Run the following script to disable the                    hfs
         module:                 If the module is available in the running kernel:
        Create a file with                      install hfs /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file with                      blacklist hfs
         in the                      /etc/modprobe.d/
         directory
        Unload                      hfs
         from the kernel                   If available in ANY installed kernel:
        Create a file with                      blacklist hfs
         in the                      /etc/modprobe.d/
         directory                   If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="hfs" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.6', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == hfs:fs'

  "1.1.1.7":
    title: '1.1.1.7 | Ensure mounting of hfsplus filesystems is disabled - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                hfsplus
         filesystem type is a hierarchical filesystem designed to replace                hfs
         that allows you to mount Mac OS filesystems.
    remediation: |
        Run the following script to disable the                    hfsplus
         module:                 If the module is available in the running kernel:
        Create a file with                      install hfsplus /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file with                      blacklist hfsplus
         in the                      /etc/modprobe.d/
         directory
        Unload                      hfsplus
         from the kernel                   If available in ANY installed kernel:
        Create a file with                      blacklist hfsplus
         in the                      /etc/modprobe.d/
         directory                   If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="hfsplus" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.7', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == hfsplus:fs'

  "1.1.2.1":
    title: '1.1.2.1 | Ensure tmp is a separate partition'
    section: 'Configure /tmp'
    description: |
        The                /tmp
         directory is a worldwritable directory used for temporary storage by all users and some applications.
    remediation: |
        First ensure that systemd is correctly configured to ensure that                    /tmp
         will be mounted at boot time.                 # systemctl unmask tmp.mount

        For specific configuration requirements of the                    /tmp
         mount for your environment, modify                    /etc/fstab
        .
        Example of using                    tmpfs
         with specific mount options:                 tmpfs	/tmp	tmpfs     defaults,rw,nosuid,nodev,noexec,relatime,size=2G  0 0
         Example of using a volume or disk with specific mount options. The source location of the volume or disk will vary
        depending on your environment. <device> /tmp    <fstype>    defaults,nodev,nosuid,noexec   0 0
         Impact:
        By design files saved to                      /tmp
         should have no expectation of surviving a reboot of the system.                      tmpfs
         is ram based and all files stored to                      tmpfs
         will be lost when the system is rebooted.
        If files need to be persistent through a reboot, they should be saved to                      /var/tmp
         not                      /tmp
        .
        Since the                      /tmp
         directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to
        tmpfs
         or a separate partition. Running out of                      /tmp
         space is a problem regardless of what kind of filesystem lies under it, but in a configuration where
        /tmp
         is not a separate file system it will essentially have the whole disk available, as the default installation only
        creates a single                      /
         partition. On the other hand, a RAM-based                      /tmp
         (as with                      tmpfs
        ) will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily.
        Another alternative is to create a dedicated partition for                      /tmp
         from a separate volume or disk. One of the downsides of a disk-based dedicated partition is that it will be slower than
        tmpfs
         which is RAM-based.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.2.2":
    title: '1.1.2.2 | Ensure nodev option set on tmp partition'
    section: 'Configure /tmp'
    description: |
        The                nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nodev
         to the fourth field (mounting options) for the                    /tmp
         partition.                 Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /tmp
         with the configured options:                 # mount -o remount /tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.2.3":
    title: '1.1.2.3 | Ensure noexec option set on tmp partition'
    section: 'Configure /tmp'
    description: |
        The                noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    noexec
         to the fourth field (mounting options) for the                    /tmp
         partition.                 Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /tmp
         with the configured options:                 # mount -o remount /tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.2.4":
    title: '1.1.2.4 | Ensure nosuid option set on tmp partition'
    section: 'Configure /tmp'
    description: |
        The                nosuid
         mount option specifies that the filesystem cannot contain                setuid
         files.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nosuid
         to the fourth field (mounting options) for the                    /tmp
         partition.                 Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /tmp
         with the configured options:                 # mount -o remount /tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.3.1":
    title: '1.1.3.1 | Ensure separate partition exists for var'
    section: 'Configure /var'
    description: |
        The                /var
         directory is used by daemons and other system services to temporarily store dynamic data. Some directories created by
        these processes may be worldwritable.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /var
        .
        For systems that were previously installed, create a new partition and configure                    /etc/fstab
         as appropriate.                 Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.3.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.3.2":
    title: '1.1.3.2 | Ensure nodev option set on var partition'
    section: 'Configure /var'
    description: |
        The                nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nodev
         to the fourth field (mounting options) for the                    /var
         partition.                 Example: <device> /var    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /var
         with the configured options:                 # mount -o remount /var
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.3.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.3.3":
    title: '1.1.3.3 | Ensure nosuid option set on var partition'
    section: 'Configure /var'
    description: |
        The                nosuid
         mount option specifies that the filesystem cannot contain                setuid
         files.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nosuid
         to the fourth field (mounting options) for the                    /var
         partition.                 Example: <device> /var    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /var
         with the configured options:                 # mount -o remount /var
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.3.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.4.1":
    title: '1.1.4.1 | Ensure separate partition exists for vartmp'
    section: 'Configure /var/tmp'
    description: |
        The                /var/tmp
         directory is a worldwritable directory used for temporary storage by all users and some applications. Temporary files
        residing in                /var/tmp
         are to be preserved between reboots.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /var/tmp
        .
        For systems that were previously installed, create a new partition and configure                    /etc/fstab
         as appropriate.                 Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.4.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.4.2":
    title: '1.1.4.2 | Ensure noexec option set on vartmp partition'
    section: 'Configure /var/tmp'
    description: |
        The                noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    noexec
         to the fourth field (mounting options) for the                    /var/tmp
         partition.                 Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /var/tmp
         with the configured options:                 # mount -o remount /var/tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.4.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.4.3":
    title: '1.1.4.3 | Ensure nosuid option set on vartmp partition'
    section: 'Configure /var/tmp'
    description: |
        The                nosuid
         mount option specifies that the filesystem cannot contain                setuid
         files.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nosuid
         to the fourth field (mounting options) for the                    /var/tmp
         partition.                 Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /var/tmp
         with the configured options:                 # mount -o remount /var/tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.4.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.4.4":
    title: '1.1.4.4 | Ensure nodev option set on vartmp partition'
    section: 'Configure /var/tmp'
    description: |
        The                nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nodev
         to the fourth field (mounting options) for the                    /var/tmp
         partition.                 Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /var/tmp
         with the configured options:                 # mount -o remount /var/tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.4.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.5.1":
    title: '1.1.5.1 | Ensure separate partition exists for varlog'
    section: 'Configure /var/log'
    description: |
        The                /var/log
          directory is used by system services to store log data.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /var/log
         .
        For systems that were previously installed, create a new partition and configure                    /etc/fstab
          as appropriate.                 Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.5.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.5.2":
    title: '1.1.5.2 | Ensure nodev option set on varlog partition'
    section: 'Configure /var/log'
    description: |
        The                nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nodev
         to the fourth field (mounting options) for the                    /var/log
         partition.                 Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /var/log
         with the configured options:                 # mount -o remount /var/log
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.5.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.5.3":
    title: '1.1.5.3 | Ensure noexec option set on varlog partition'
    section: 'Configure /var/log'
    description: |
        The                noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    noexec
         to the fourth field (mounting options) for the                    /var/log
         partition.                 Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /var/log
         with the configured options:                 # mount -o remount /var/log
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.5.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.5.4":
    title: '1.1.5.4 | Ensure nosuid option set on varlog partition'
    section: 'Configure /var/log'
    description: |
        The                nosuid
         mount option specifies that the filesystem cannot contain                setuid
         files.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nosuid
         to the fourth field (mounting options) for the                    /var/log
         partition.                 Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /var/log
         with the configured options:                 # mount -o remount /var/log
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.5.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.6.1":
    title: '1.1.6.1 | Ensure separate partition exists for varlogaudit'
    section: 'Configure /var/log/audit'
    description: |
        The auditing daemon,                auditd
        , stores log data in the                /var/log/audit
         directory.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /var/log/audit
        .
        For systems that were previously installed, create a new partition and configure                    /etc/fstab
         as appropriate.                 Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.6.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.6.2":
    title: '1.1.6.2 | Ensure noexec option set on varlogaudit partition'
    section: 'Configure /var/log/audit'
    description: |
        The                noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    noexec
         to the fourth field (mounting options) for the                    /var
         partition.                 Example: <device> /var/log/audit    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0
        0

        Run the following command to remount                    /var/log/audit
         with the configured options:                 # mount -o remount /var/log/audit
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.6.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.6.3":
    title: '1.1.6.3 | Ensure nodev option set on varlogaudit partition'
    section: 'Configure /var/log/audit'
    description: |
        The                nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nodev
         to the fourth field (mounting options) for the                    /var/log/audit
         partition.                 Example: <device> /var/log/audit    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0
        0

        Run the following command to remount                    /var/log/audit
         with the configured options:                 # mount -o remount /var/log/audit
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.6.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.6.4":
    title: '1.1.6.4 | Ensure nosuid option set on varlogaudit partition'
    section: 'Configure /var/log/audit'
    description: |
        The                nosuid
         mount option specifies that the filesystem cannot contain                setuid
         files.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nosuid
         to the fourth field (mounting options) for the                    /var/log/audit
         partition.                 Example: <device> /var/log/audit    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0
        0

        Run the following command to remount                    /var/log/audit
         with the configured options:                 # mount -o remount /var/log/audit
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.6.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.7.1":
    title: '1.1.7.1 | Ensure separate partition exists for home'
    section: 'Configure /home'
    description: |
        The                /home
         directory is used to support disk storage needs of local users.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /home
        .
        For systems that were previously installed, create a new partition and configure                    /etc/fstab
         as appropriate.                 Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.7.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.7.2":
    title: '1.1.7.2 | Ensure nodev option set on home partition'
    section: 'Configure /home'
    description: |
        The                nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nodev
         to the fourth field (mounting options) for the                    /home
         partition.                 Example: <device> /home    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /home
         with the configured options:                 # mount -o remount /home
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.7.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.7.3":
    title: '1.1.7.3 | Ensure nosuid option set on home partition'
    section: 'Configure /home'
    description: |
        The                nosuid
         mount option specifies that the filesystem cannot contain                setuid
          files.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nosuid
         to the fourth field (mounting options) for the                    /home
         partition.                 Example: <device> /home    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /home
         with the configured options:                 # mount -o remount /home
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.7.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.8.1":
    title: '1.1.8.1 | Ensure devshm is a separate partition'
    section: 'Configure /dev/shm'
    description: |
        The                /dev/shm
         directory is a worldwritable directory that can function as shared memory that facilitates inter process communication
        IPC.
    remediation: |
        For specific configuration requirements of the                    /dev/shm
         mount for your environment, modify                    /etc/fstab
        .
        Example of using                      tmpfs
         with specific mount options:                   tmpfs	/dev/shm	tmpfs
        defaults,rw,nosuid,nodev,noexec,relatime,size=2G  0 0
         Impact:
        Since the                      /dev/shm
         directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate
        partition.                   /dev/shm
         utilizing                      tmpfs
         can be resized using the                      size={size}
         parameter in the relevant entry in                      /etc/fstab
        .
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.8.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.8.2":
    title: '1.1.8.2 | Ensure nodev option set on devshm partition'
    section: 'Configure /dev/shm'
    description: |
        The                nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nodev
         to the fourth field (mounting options) for the                    /dev/shm
          partition. See the                    fstab(5)
         manual page for more information.                 Run the following command to remount /dev/shm using the updated
        options from /etc/fstab: # mount -o remount /dev/shm
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.8.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.8.3":
    title: '1.1.8.3 | Ensure noexec option set on devshm partition'
    section: 'Configure /dev/shm'
    description: |
        The                noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    noexec
         to the fourth field (mounting options) for the                    /dev/shm
         partition.                 Example: <device> /dev/shm    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                    /dev/shm
         with the configured options:                 # mount -o remount /dev/shm
         NOTE
         It is recommended to use                    tmpfs
         as the device/filesystem type as                    /dev/shm
         is used as shared memory space by applications.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.8.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.8.4":
    title: '1.1.8.4 | Ensure nosuid option set on devshm partition'
    section: 'Configure /dev/shm'
    description: |
        The                nosuid
         mount option specifies that the filesystem cannot contain                setuid
          files.
    remediation: |
        Edit the                    /etc/fstab
         file and add                    nosuid
         to the fourth field (mounting options) for the                    /dev/shm
          partition. See the                    fstab(5)
         manual page for more information.                 Run the following command to remount /dev/shm using the updated
        options from /etc/fstab: # mount -o remount /dev/shm
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.8.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.1.9":
    title: '1.1.9 | Ensure usb-storage is disabled - manual'
    section: 'Filesystem Configuration'
    description: |
        USB storage provides a means to transfer and store files ensuring persistence and availability of the files independent
        of network connection status.  Its popularity and utility has led to USBbased malware being a simple and common means
        for network infiltration and a first step to establishing a persistent threat within a networked environment.
    remediation: |
        Run the following script to disable                  usb-storage
        :
        #!/usr/bin/env bash

        {
           l_mname="usb-storage" # set module name
           # Check if the module exists on the system
           if [ -z "$(modprobe -n -v "$l_mname" 2>&1 | grep -Pi --
        "\h*modprobe:\h+FATAL:\h+Module\h+$l_mname\h+not\h+found\h+in\h+directory")" ]; then
              # Remediate loadable
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e " - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mname".conf
              fi
              # Remediate loaded
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e " - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
              # Remediate deny list
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$(tr '-' '_' <<< "$l_mname")\b"; then
                 echo -e " - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mname".conf
              fi
           else
              echo -e " - Nothing to remediate\n - Module \"$l_mname\" doesn't exist on the system"
           fi
        }
                       Impact:
        Disabling the                    usb-storage
         module will disable any usage of USB storage devices.
        If requirements and local site policy allow the use of such devices, other solutions should be configured accordingly
        instead. One example of a commonly used solution is                    USBGuard
        .
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.9', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == usb-storage'

  "1.2.1":
    title: '1.2.1 | Ensure GPG keys are configured - manual'
    section: 'Configure Software and Patch Management'
    description: |
        The RPM Package Manager implements GPG key signing to verify package integrity during and after installation.
    remediation: |
        Update your package manager GPG keys in accordance with site policy.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.2.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.2.2":
    title: '1.2.2 | Ensure gpgcheck is globally activated'
    section: 'Configure Software and Patch Management'
    description: |
        The              gpgcheck
         option, found in the main section of the              /etc/dnf/dnf.conf
         and individual              /etc/yum.repos.d/
         files, determines if an RPM packages signature is checked prior to its installation.
    remediation: |
        Edit                  /etc/dnf/dnf.conf
         and set                  gpgcheck=1
         in the                  [main]
         section.               Example: # sed -i 's/^gpgcheck\s*=\s*.*/gpgcheck=1/' /etc/dnf/dnf.conf

        Edit any failing files in                  /etc/yum.repos.d/*
         and set all instances starting with                  gpgcheck
         to                  1
        .               Example: # find /etc/yum.repos.d/ -name "*.repo" -exec echo "Checking:" {} \; -exec sed -i
        's/^gpgcheck\s*=\s*.*/gpgcheck=1/' {} \;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.2.3":
    title: '1.2.3 | Ensure package manager repositories are configured - manual'
    section: 'Configure Software and Patch Management'
    description: |
        Systems need to have the respective package manager repositories configured to ensure that the system is able to receive
        the latest patches and updates.
    remediation: |
        Configure your package manager repositories according to site policy.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.2.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.2.4":
    title: '1.2.4 | Ensure repo gpgcheck is globally activated - manual'
    section: 'Configure Software and Patch Management'
    description: |
        The              repogpgcheck
         option, found in the main section of the              /etc/dnf/dnf.conf
         and individual              /etc/yum.repos.d/
         files, will perform a GPG signature check on the repodata.
    remediation: |
        Global configuration
        Edit                  /etc/dnf/dnf.conf
         and set                  repo_gpgcheck=1
         in the                  [main]
         section.               Example:
        [main]
        repo_gpgcheck=1
                       Per repository configuration First check that the particular repository support GPG checking on the
        repodata.
        Edit any failing files in                  /etc/yum.repos.d/*
         and set all instances starting with                  repo_gpgcheck
         to                  1
        .               Impact:
        Not all repositories, notably RedHat, support                    repo_gpgcheck
        . Take care to set this value to false (default) for particular repositories that do not support it. If enabled on
        repositories that do not support                    repo_gpgcheck
         installation of packages will fail.
        Research is required by the user to determine which repositories is configured on the local system and, from that list,
        which support                    repo_gpgcheck
        .
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_1.2.4', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.3.1":
    title: '1.3.1 | Ensure AIDE is installed'
    section: 'Filesystem Integrity Checking'
    description: |
        Advanced Intrusion Detection Environment AIDE is a intrusion detection tool that uses predefined rules to check the
        integrity of files and directories in the Linux operating system. AIDE has its own database to check the integrity of
        files and directories. AIDE takes a snapshot of files and directories including modification times, permissions, and
        file hashes which can then be used to compare against the current state of the filesystem to detect modifications to the
        system.
    remediation: |
        Run the following command to install AIDE: # dnf install aide
         Configure AIDE as appropriate for your environment. Consult the AIDE documentation for options. Initialize AIDE: Run
        the following commands: # aide --init
         # mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.3.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.3.2":
    title: '1.3.2 | Ensure filesystem integrity is regularly checked'
    section: 'Filesystem Integrity Checking'
    description: |
        Periodic checking of the filesystem integrity is needed to detect changes to the filesystem.
    remediation: |
        If cron will be used to schedule and run aide check Run the following command: # crontab -u root -e
         Add the following line to the crontab: 0 5 * * * /usr/sbin/aide --check
         OR if aidecheck.service and aidecheck.timer will be used to schedule and run aide check:
        Create or edit the file                  /etc/systemd/system/aidecheck.service
         and add the following lines:
        [Unit]
        Description=Aide Check

        [Service]
        Type=simple
        ExecStart=/usr/sbin/aide --check

        [Install]
        WantedBy=multi-user.target
                       Create or edit the file /etc/systemd/system/aidecheck.timer and add the following lines:
        [Unit]
        Description=Aide check every day at 5AM

        [Timer]
        OnCalendar=*-*-* 05:00:00
        Unit=aidecheck.service

        [Install]
        WantedBy=multi-user.target
                       Run the following commands:
        # chown root:root /etc/systemd/system/aidecheck.*
        # chmod 0644 /etc/systemd/system/aidecheck.*

        # systemctl daemon-reload

        # systemctl enable aidecheck.service
        # systemctl --now enable aidecheck.timer
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.3.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == aidecheck.service'

  "1.3.3":
    title: '1.3.3 | Ensure cryptographic mechanisms are used to protect the integrity of audit tools - manual'
    section: 'Filesystem Integrity Checking'
    description: |
        Audit tools include, but are not limited to, vendorprovided and open source audit tools needed to successfully view and
        manipulate audit information system activity and records. Audit tools include custom queries and report generators.
    remediation: |
        Add or update the following selection lines for to a file ending in                  .conf
         in the                  /etc/aide.conf.d/
         directory or to                  /etc/aide.conf
         to protect the integrity of the audit tools:
        # Audit Tools
        /sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.3.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.4.1":
    title: '1.4.1 | Ensure permissions on bootloader config are configured - manual'
    section: 'Secure Boot Settings'
    description: |
        The grub files contain information on boot settings and passwords for unlocking boot options.
    remediation: |
        Run the following to update the mode, ownership, and group ownership of the grub configuration files: -- IF --
         the system uses UEFI (Files located in                  /boot/efi/EFI/*
        )
        Edit                  /etc/fstab
         and add the                  fmask=0077
        ,                  uid=0
        , and                  gid=0
         options:               Example: <device> /boot/efi vfat defaults,umask=0027,fmask=0077,uid=0,gid=0 0 0
         Note:
         This may require a re-boot to enable the change               -- OR -- -- IF --
         the system uses BIOS (Files located in                  /boot/grub2/*
        )               Run the following commands to set ownership and permissions on your grub configuration file(s):
        # [ -f /boot/grub2/grub.cfg ] && chown root:root /boot/grub2/grub.cfg
        # [ -f /boot/grub2/grub.cfg ] && chmod u-x,go-rwx /boot/grub2/grub.cfg

        # [ -f /boot/grub2/grubenv ] && chown root:root /boot/grub2/grubenv
        # [ -f /boot/grub2/grubenv ] && chmod u-x,go-rwx /boot/grub2/grubenv

        # [ -f /boot/grub2/user.cfg ] && chown root:root /boot/grub2/user.cfg
        # [ -f /boot/grub2/user.cfg ] && chmod u-x,go-rwx /boot/grub2/user.cfg
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.4.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.5.1":
    title: '1.5.1 | Ensure address space layout randomization ASLR is enabled - manual'
    section: 'Additional Process Hardening'
    description: |
        Address space layout randomization ASLR is an exploit mitigation technique which randomly arranges the address space of
        key data areas of a process.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               kernel.randomize_va_space = 2 Example:
        # printf "
        kernel.randomize_va_space = 2
        " >> /etc/sysctl.d/60-kernel_sysctl.conf
                       Run the following command to set the active kernel parameter: # sysctl -w kernel.randomize_va_space=2
         Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == kernel.randomize_va_space=2'

  "1.5.2":
    title: '1.5.2 | Ensure ptrace scope is restricted - manual'
    section: 'Additional Process Hardening'
    description: |
        The              ptrace
         system call provides a means by which one process the tracer may observe and control the execution of another process
        the tracee, and examine and change the tracees memory and registers.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               kernel.yama.ptrace_scope = 1 Example:
        # printf "
        kernel.yama.ptrace_scope = 1
        " >> /etc/sysctl.d/60-kernel_sysctl.conf
                       Run the following command to set the active kernel parameter: # sysctl -w kernel.yama.ptrace_scope=1
         Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == kernel.yama.ptrace_scope=1'

  "1.5.3":
    title: '1.5.3 | Ensure core dump storage is disabled'
    section: 'Additional Process Hardening'
    description: |
        A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also
        be used to glean confidential information from a core file.
    remediation: |
        Edit                  /etc/systemd/coredump.conf
         and edit or add the following line:               Storage=none
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.5.4":
    title: '1.5.4 | Ensure core dump backtraces are disabled'
    section: 'Additional Process Hardening'
    description: |
        A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also
        be used to glean confidential information from a core file.
    remediation: |
        Edit or add the following line in                  /etc/systemd/coredump.conf
        :               ProcessSizeMax=0
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.6.1.1":
    title: '1.6.1.1 | Ensure SELinux is installed'
    section: 'Configure SELinux'
    description: |
        SELinux provides Mandatory Access Control.
    remediation: |
        Run the following command to install                    SELinux
        :                 # dnf install libselinux
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.6.1.2":
    title: '1.6.1.2 | Ensure SELinux is not disabled in bootloader configuration - manual'
    section: 'Configure SELinux'
    description: |
        Configure SELINUX to be enabled at boot time and verify that it has not been overwritten by the grub boot parameters.
    remediation: |
        Run the following command to remove the                    selinux=0
         and                    enforcing=0
         parameters:                 grubby --update-kernel ALL --remove-args "selinux=0 enforcing=0"

        Run the following command to remove the                    selinux=0
         and                    enforcing=0
         parameters if they were created by the deprecated                    grub2-mkconfig
         command:                 # grep -Prsq -- '\h*([^#\n\r]+\h+)?kernelopts=([^#\n\r]+\h+)?(selinux|enforcing)=0\b'
        /boot/grub2 /boot/efi && grub2-mkconfig -o "$(grep -Prl --
        '\h*([^#\n\r]+\h+)?kernelopts=([^#\n\r]+\h+)?(selinux|enforcing)=0\b' /boot/grub2 /boot/efi)"
         Impact: Files created while SELinux is disabled are not labeled at all. This behavior causes problems when changing to
        enforcing mode because files are labeled incorrectly or are not labeled at all. To prevent incorrectly labeled and
        unlabeled files from causing problems, file systems are automatically relabeled when changing from the disabled state to
        permissive or enforcing mode. This can be a long running process that should be accounted for as it may extend downtime
        during initial re-boot.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == selinux=0'
            - name: Undefined
              rule: 'should cmp == enforcing=0'

  "1.6.1.3":
    title: '1.6.1.3 | Ensure SELinux policy is configured'
    section: 'Configure SELinux'
    description: |
        Configure SELinux to meet or exceed the default targeted policy, which constrains daemons and system software only.
    remediation: |
        Edit the                    /etc/selinux/config
         file to set the SELINUXTYPE parameter:                 SELINUXTYPE=targeted
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^Loaded\s+policy\s+name:\s+(targeted|mls)\s*(\s+#.*)?$'

  "1.6.1.4":
    title: '1.6.1.4 | Ensure the SELinux mode is not disabled'
    section: 'Configure SELinux'
    description: |
        SELinux can run in one of three modes disabled, permissive, or enforcing Enforcing  Is the default, and recommended,
        mode of operation in enforcing mode SELinux operates normally, enforcing the loaded security policy on the entire
        system. Permissive  The system acts as if SELinux is enforcing the loaded security policy, including labeling objects
        and emitting access denial entries in the logs, but it does not actually deny any operations. While not recommended for
        production systems, permissive mode can be helpful for SELinux policy development. Disabled  Is strongly discouraged not
        only does the system avoid enforcing the SELinux policy, it also avoids labeling any persistent objects such as files,
        making it difficult to enable SELinux in the future Note
         you can set individual domains to permissive mode while the system runs in enforcing mode. For example, to make the
        httpdt domain permissive              semanage permissive a httpdt
    remediation: |
        Run one of the following commands to set SELinux's running mode:
        To set SELinux mode to                    Enforcing
        :                 # setenforce 1
         OR
        To set SELinux mode to                    Permissive
        :                 # setenforce 0

        Edit the                    /etc/selinux/config
         file to set the SELINUX parameter:                 For Enforcing mode: SELINUX=enforcing
         OR For Permissive mode: SELINUX=permissive
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^Current mode:\s+(enforcing|permissive)$'
            - name: Undefined
              rule: 'should cmp == ^Mode from config file:\s+(enforcing|permissive)$'

  "1.6.1.5":
    title: '1.6.1.5 | Ensure the SELinux mode is enforcing'
    section: 'Configure SELinux'
    description: |
        SELinux can run in one of three modes disabled, permissive, or enforcing Enforcing  Is the default, and recommended,
        mode of operation in enforcing mode SELinux operates normally, enforcing the loaded security policy on the entire
        system. Permissive  The system acts as if SELinux is enforcing the loaded security policy, including labeling objects
        and emitting access denial entries in the logs, but it does not actually deny any operations. While not recommended for
        production systems, permissive mode can be helpful for SELinux policy development. Disabled  Is strongly discouraged not
        only does the system avoid enforcing the SELinux policy, it also avoids labeling any persistent objects such as files,
        making it difficult to enable SELinux in the future Note you can set individual domains to permissive mode while the
        system runs in enforcing mode. For example, to make the httpdt domain permissive  semanage permissive a httpdt
    remediation: |
        Run the following command to set SELinux's running mode: # setenforce 1

        Edit the                    /etc/selinux/config
         file to set the SELINUX parameter:                 For Enforcing mode: SELINUX=enforcing
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.6.1.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^Current mode:\s+enforcing$'
            - name: Undefined
              rule: 'should cmp == ^Mode from config file:\s+enforcing$'

  "1.6.1.6":
    title: '1.6.1.6 | Ensure no unconfined services exist - manual'
    section: 'Configure SELinux'
    description: |
        Unconfined processes run in unconfined domains
    remediation: |
        Investigate any unconfined processes found during the audit action. They may need to have an existing security context
        assigned to them or a policy built for them.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.6.1.6', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.6.1.7":
    title: '1.6.1.7 | Ensure SETroubleshoot is not installed'
    section: 'Configure SELinux'
    description: |
        The SETroubleshoot service notifies desktop users of SELinux denials through a userfriendly interface. The service
        provides important information around configuration errors, unauthorized intrusions, and other potential errors.
    remediation: |
        Run the following command to uninstall                    setroubleshoot
        :                 # dnf remove setroubleshoot
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.1.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.6.1.8":
    title: '1.6.1.8 | Ensure the MCS Translation Service mcstrans is not installed'
    section: 'Configure SELinux'
    description: |
        The                mcstransd
         daemon provides category label information to client processes requesting information. The label translations are
        defined in                /etc/selinux/targeted/setrans.conf
    remediation: |
        Run the following command to uninstall                    mcstrans
        :                 # dnf remove mcstrans
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.1.8', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.7.1":
    title: '1.7.1 | Ensure message of the day is configured properly - manual'
    section: 'Command Line Warning Banners'
    description: |
        The contents of the              /etc/motd
          file are displayed to users after login and function as a message of the day for authenticated users.
        Unixbased systems have typically displayed information about the OS release and patch level upon logging in to the
        system. This information can be useful to developers who are developing software for a particular OS platform. If
        mingetty8
         supports the following options, they display operating system information              \m
           machine architecture              \r
           operating system release              \s
           operating system name              \v
           operating system version
    remediation: |
        Edit the                  /etc/motd
          file with the appropriate contents according to your site policy, remove any instances of                  \m
         ,                  \r
         ,                  \s
         ,                  \v
         or references to the                  OS platform
                              OR If the motd is not used, this file can be removed. Run the following command to remove the motd
        file: # rm /etc/motd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.7.2":
    title: '1.7.2 | Ensure local login warning banner is configured properly'
    section: 'Command Line Warning Banners'
    description: |
        The contents of the              /etc/issue
          file are displayed to users prior to login for local terminals.
        Unixbased systems have typically displayed information about the OS release and patch level upon logging in to the
        system. This information can be useful to developers who are developing software for a particular OS platform. If
        mingetty8
         supports the following options, they display operating system information              \m
           machine architecture              \r
           operating system release              \s
           operating system name              \v
           operating system version  or the operating systems name
    remediation: |
        Edit the                  /etc/issue
          file with the appropriate contents according to your site policy, remove any instances of                  \m
         ,                  \r
         ,                  \s
         ,                  \v
         or references to the                  OS platform
                              # echo "Authorized uses only. All activity may be monitored and reported." > /etc/issue
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.7.3":
    title: '1.7.3 | Ensure remote login warning banner is configured properly'
    section: 'Command Line Warning Banners'
    description: |
        The contents of the              /etc/issue.net
          file are displayed to users prior to login for remote connections from configured services.
        Unixbased systems have typically displayed information about the OS release and patch level upon logging in to the
        system. This information can be useful to developers who are developing software for a particular OS platform. If
        mingetty8
         supports the following options, they display operating system information               \m
           machine architecture              \r
           operating system release              \s
           operating system name              \v
           operating system version
    remediation: |
        Edit the                  /etc/issue.net
          file with the appropriate contents according to your site policy, remove any instances of                  \m
         ,                  \r
         ,                  \s
         ,                  \v
         or references to the                  OS platform
                              # echo "Authorized uses only. All activity may be monitored and reported." > /etc/issue.net
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.7.4":
    title: '1.7.4 | Ensure permissions on etcmotd are configured'
    section: 'Command Line Warning Banners'
    description: |
        The contents of the              /etc/motd
          file are displayed to users after login and function as a message of the day for authenticated users.
    remediation: |
        Run the following commands to set permissions on                  /etc/motd
         :
        # chown root:root /etc/motd
        # chmod u-x,go-wx /etc/motd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.7.5":
    title: '1.7.5 | Ensure permissions on etcissue are configured - manual'
    section: 'Command Line Warning Banners'
    description: |
        The contents of the              /etc/issue
          file are displayed to users prior to login for local terminals.
    remediation: |
        Run the following commands to set permissions on                  /etc/issue
         :
        # chown root:root /etc/issue
        # chmod u-x,go-wx /etc/issue
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.5', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /etc/issue'

  "1.7.6":
    title: '1.7.6 | Ensure permissions on etcissue.net are configured - manual'
    section: 'Command Line Warning Banners'
    description: |
        The contents of the              /etc/issue.net
          file are displayed to users prior to login for remote connections from configured services.
    remediation: |
        Run the following commands to set permissions on                  /etc/issue.net
         :
        # chown root:root /etc/issue.net
        # chmod u-x,go-wx /etc/issue.net
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.6', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /etc/issue.net'

  "1.8":
    title: '1.8 | Ensure updates patches and additional security software are installed - manual'
    section: 'Initial Setup'
    description: |
        Periodically patches are released for included software either due to security flaws or to include additional
        functionality.
    remediation: |
        Use your package manager to update all packages on the system according to site policy. Based on the version available
        to install, run the following command with the correct versioning: # dnf upgrade --releasever=2023.0.XXXXXXX
         Once the update process is complete, verify if reboot is required to load changes. dnf needs-restarting -r
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.8', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.9":
    title: '1.9 | Ensure system-wide crypto policy is not legacy'
    section: 'Initial Setup'
    description: |
        The systemwide cryptopolicies followed by the crypto core components allow consistently deprecating and disabling
        algorithms systemwide. The individual policy levels DEFAULT, LEGACY, FUTURE, and FIPS are included in the
        cryptopolicies7 package.
    remediation: |
        Run the following command to change the system-wide crypto policy # update-crypto-policies --set <CRYPTO POLICY>
         Example: # update-crypto-policies --set DEFAULT
         Run the following to make the updated system-wide crypto policy active # update-crypto-policies
         Impact: Environments that require compatibility with older insecure protocols may require the use
        of the less secure LEGACY policy level.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.9', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.1.1":
    title: '2.1.1 | Ensure time synchronization is in use'
    section: 'Configure Time Synchronization'
    description: |
        System time should be synchronized between all systems in an environment. This is typically done by establishing an
        authoritative time server or set of servers and having all systems synchronize their clocks to them. Note
         If another method for time synchronization is being used, this section may be skipped.
    remediation: |
        Run the following command to install                  chrony
        :               # dnf install chrony
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.1.2":
    title: '2.1.2 | Ensure chrony is configured'
    section: 'Configure Time Synchronization'
    description: |
        chrony
         is a daemon which implements the Network Time Protocol NTP and is designed to synchronize system clocks across a
        variety of systems and use a source that is highly accurate. More information on              chrony
         can be found at              http//chrony.tuxfamily.org/
        .              chrony
         can be configured to be a client and/or a server.
    remediation: |
        Add or edit server or pool lines to file ending in                  .conf
         in the                   /etc/chrony.d
         as appropriate:               Example: server <remote-server>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.1":
    title: '2.2.1 | Ensure xorg-x11-server-common is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        The X Window System provides a Graphical User Interface GUI where users can have multiple windows in which to run
        programs and various add on. The X Windows system is typically used on workstations where users login, but not on
        servers where users typically do not login.
    remediation: |
        Run the following command to remove the X Windows Server packages: # dnf remove xorg-x11-server-common
         Impact: Many Linux systems run applications which require a Java runtime.  Some Linux Java packages have a dependency
        on specific X Windows xorg-x11-fonts.  One workaround to avoid this dependency is to use the "headless" Java packages
        for your specific Java runtime.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_2.2.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.2":
    title: '2.2.2 | Ensure avahi is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        Avahi is a free zeroconf implementation, including a system for multicast DNS/DNSSD service discovery. Avahi allows
        programs to publish and discover services and hosts running on a local network with no specific configuration. For
        example, a user can plug a computer into a network and Avahi automatically finds printers to print to, files to look at
        and people to talk to, as well as network services running on the machine.
    remediation: |
        Run the following commands to stop, and remove                  avahi
        :               # systemctl stop avahi-daemon.socket avahi-daemon.service
         # dnf remove avahi
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.3":
    title: '2.2.3 | Ensure a print server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        The Common Unix Print System CUPS provides the ability to print to both local and network printers. A system running
        CUPS can also accept print jobs from remote systems and print them to local printers. It also provides a web based
        remote administration capability.
    remediation: |
        Run the following command to remove                  cups
        :               # dnf remove cups
         Impact: Disabling CUPS will prevent printing from the system, a common task for workstation systems.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.4":
    title: '2.2.4 | Ensure a dhcp server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        The Dynamic Host Configuration Protocol DHCP is a service that allows machines to be dynamically assigned IP addresses.
    remediation: |
        Run the following command to remove                  dhcp
        :               # dnf remove dhcp-server
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.5":
    title: '2.2.5 | Ensure a dns server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        The Domain Name System DNS is a hierarchical naming system that maps names to IP addresses for computers, services and
        other resources connected to a network.
    remediation: |
        Run the following command to remove                  bind
        :               # dnf remove bind
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.6":
    title: '2.2.6 | Ensure an ftp server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        FTP File Transfer Protocol is a traditional and widely used standard tool for transferring files between a server and
        clients over a network, especially where no authentication is necessary permits anonymous users to connect to a server.
    remediation: |
        Run the following command to remove                  vsftpd
        :               # dnf remove vsftpd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.7":
    title: '2.2.7 | Ensure a tftp server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        Trivial File Transfer Protocol TFTP is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers
        allow connections from a TFTP Client for sending and receiving files.
    remediation: |
        Run the following command to remove                  tftp-server
        :               # dnf remove tftp-server
         Impact: TFTP is often used to provide files for network booting such as for PXE based installation of servers.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.8":
    title: '2.2.8 | Ensure a web server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        Web servers provide the ability to host web site content.
    remediation: |
        Run the following command to remove                  httpd
         and                  nginx
        :               # dnf remove httpd nginx
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.8', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.9":
    title: '2.2.9 | Ensure IMAP and POP3 server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        dovecot
         is an open source IMAP and POP3 server for Linux based systems.
    remediation: |
        Run the following command to remove                  dovecot
         and                  cyrus-imapd
        :               # dnf remove dovecot cyrus-imapd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.9', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.10":
    title: '2.2.10 | Ensure Samba is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        The Samba daemon allows system administrators to configure their Linux systems to share file systems and directories
        with Windows desktops. Samba will advertise the file systems and directories via the Server Message Block SMB protocol.
        Windows desktop users will be able to mount these directories and file systems as letter drives on their systems.
    remediation: |
        Run the following command to remove                  samba
        :               # dnf remove samba
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.10', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.11":
    title: '2.2.11 | Ensure HTTP Proxy Server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        Squid is a standard proxy server used in many distributions and environments.
    remediation: |
        Run the following command to remove the                  squid
         package:               # dnf remove squid
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.11', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.12":
    title: '2.2.12 | Ensure net-snmp is not installed or the snmpd service is not enabled'
    section: 'Configure Special Purpose Services'
    description: |
        Simple Network Management Protocol SNMP is a widely used protocol for monitoring the health and welfare of network
        equipment, computer equipment and devices like UPSs. NetSNMP is a suite of applications used to implement SNMPv1 RFC
        1157, SNMPv2 RFCs 19011908, and SNMPv3 RFCs 34113418 using both IPv4 and IPv6. Support for SNMPv2 classic a.k.a. SNMPv2
        historic  RFCs 14411452 was dropped with the 4.0 release of the UCDsnmp package. The Simple Network Management Protocol
        SNMP server is used to listen for SNMP commands from an SNMP management system, execute the commands or collect the
        information and then send results back to the requesting system.
    remediation: |
        Run the following command to remove                  net-snmpd
        :               # dnf remove net-snmp
         -OR-
        Run the following commands to stop and mask the                  snmpd
         service:
        # systemctl stop snmpd
        # systemctl mask snmpd
                       Impact: There are packages that are dependent on the net-snmp package. If the net-snmp package is
        removed, these packages will be removed as well. Before removing the net-snmp package, review any dependent packages to
        determine if they are required on the system. If a dependent package is required, mask the snmpd service and leave the
        net-snmp package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.12', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == masked'

  "2.2.13":
    title: '2.2.13 | Ensure telnet-server is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        The              telnetserver
         package contains the              telnet
         daemon, which accepts connections from users from other systems via the              telnet
         protocol.
    remediation: |
        Run the following command to remove the telnet-server package: # dnf remove telnet-server
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.13', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.14":
    title: '2.2.14 | Ensure dnsmasq is not installed'
    section: 'Configure Special Purpose Services'
    description: |
        dnsmasq
         is a lightweight tool that provides DNS caching, DNS forwarding and DHCP Dynamic Host Configuration Protocol services.
    remediation: |
        Run the following command to remove                  dnsmasq
        :               # dnf remove dnsmasq
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.14', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.15":
    title: '2.2.15 | Ensure mail transfer agent is configured for local-only mode'
    section: 'Configure Special Purpose Services'
    description: |
        Mail Transfer Agents MTA, such as sendmail and Postfix, are used to listen for incoming mail and transfer the messages
        to the appropriate user or mail server. If the system is not intended to be a mail server, it is recommended that the
        MTA be configured to only process local mail.
    remediation: |
        Edit                  /etc/postfix/main.cf
         and add the following line to the RECEIVING MAIL section. If the line already exists, change it to look like the line
        below:               inet_interfaces = loopback-only

        Run the following command to restart                  postfix
        :               # systemctl restart postfix
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.15', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.16":
    title: '2.2.16 | Ensure nfs-utils is not installed or the  nfs-server service is masked'
    section: 'Configure Special Purpose Services'
    description: |
        The Network File System NFS is one of the first and most widely distributed file systems in the UNIX environment. It
        provides the ability for systems to mount file systems of other servers through the network.
    remediation: |
        Run the following command to remove                  nfs-utils
        :               # dnf remove nfs-utils
         OR
        If the                  nfs-utils
         package is required as a dependency, run the following commands to stop and mask the                  nfs-server
         service:
        # systemctl stop nfs-server
        # systemctl mask nfs-server
                       Impact:
        Many of the                    libvirt
         packages used by Enterprise Linux virtualization are dependent on the                    nfs-utils
         package. If the                    nfs-utils
         package is required as a dependency, the                    nfs-server
         service should be disabled and masked to reduce the attack surface of the system.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.16', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == masked'

  "2.2.17":
    title: '2.2.17 | Ensure rpcbind is not installed or the  rpcbind services are masked'
    section: 'Configure Special Purpose Services'
    description: |
        The rpcbind utility maps RPC services to the ports on which they listen. RPC processes notify rpcbind when they start,
        registering the ports they are listening on and the RPC program numbers they expect to serve. The client system then
        contacts rpcbind on the server with a particular RPC program number. The rpcbind service redirects the client to the
        proper port number so it can communicate with the requested service Portmapper is an RPC service, which always listens
        on tcp and udp 111, and is used to map other RPC services such as nfs, nlockmgr, quotad, mountd, etc. to their
        corresponding port number on the server. When a remote host makes an RPC call to that server, it first consults with
        portmap to determine where the RPC server is listening.
    remediation: |
        Run the following command to remove                  nfs-utils
        :               # dnf remove rpcbind
         OR
        If the                  rpcbind
         package is required as a dependency, run the following commands to stop and mask the                  rpcbind.service
         and                  rpcbind.socket
         systemd units:
        # systemctl stop rpcbind.socket
        # systemctl mask rpcbind.socket

        # systemctl stop rpcbind.service
        # systemctl mask rpcbind.service
                       Impact:
        Many of the libvirt packages used by Enterprise Linux virtualization, and the                    nfs-utils
         package used for The Network File System (NFS), are dependent on the                    rpcbind
         package. If the                    rpcbind
         package is required as a dependency, the services                    rpcbind.service
         and                    rpcbind.socket
         should be stopped and masked to reduce the attack surface of the system.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.17', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == masked'
            - name: Undefined
              rule: 'should cmp == masked'

  "2.2.18":
    title: '2.2.18 | Ensure rsync-daemon is not installed or the rsyncd service is masked'
    section: 'Configure Special Purpose Services'
    description: |
        The              rsyncd
         service can be used to synchronize files between systems over network links.
    remediation: |
        Run the following command to remove the                  rsync
         package:               # dnf remove rsync-daemon
         OR
        Run the following commands to mask the                  rsyncd
         service:
        # systemctl stop rsyncd
        # systemctl mask rsyncd
                       Impact: There are packages that are dependent on the rsync package.  If the rsync package is removed,
        these packages will be removed as well.
        Before removing the                    rsync-daemon
         package, review any dependent packages to determine if they are required on the system.  If a dependent package is
        required, mask the                    rsyncd
         service and leave the                    rsync-daemon
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.18', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == masked'

  "2.3.1":
    title: '2.3.1 | Ensure telnet client is not installed'
    section: 'Service Clients'
    description: |
        The              telnet
         package contains the              telnet
         client, which allows users to start connections to other systems via the telnet protocol.
    remediation: |
        Run the following command to remove the                  telnet
         package:               # dnf remove telnet
         Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them
        can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to
        prevent accidental or intentional misuse.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.3.2":
    title: '2.3.2 | Ensure LDAP client is not installed'
    section: 'Service Clients'
    description: |
        The Lightweight Directory Access Protocol LDAP was introduced as a replacement for NIS/YP. It is a service that provides
        a method for looking up information from a central database.
    remediation: |
        Run the following command to remove the                  openldap-clients
         package:               # dnf remove openldap-clients
         Impact: Removing the LDAP client will prevent or inhibit using LDAP for authentication in your environment.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.3.3":
    title: '2.3.3 | Ensure FTP client is not installed'
    section: 'Service Clients'
    description: |
        FTP File Transfer Protocol is a traditional and widely used standard tool for transferring files between a server and
        clients over a network, especially where no authentication is necessary permits anonymous users to connect to a server.
    remediation: |
        Run the following command to remove                  ftp
        :               # dnf remove ftp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.4":
    title: '2.4 | Ensure nonessential services listening on the system are removed or masked - manual'
    section: 'Services'
    description: |
        A network port is identified by its number, the associated IP address, and the type of the communication protocol such
        as TCP or UDP. A listening port is a network port on which an application or process listens on, acting as a
        communication endpoint. Each listening port can be open or closed filtered using a firewall. In general terms, an open
        port is a network port that accepts incoming packets from remote locations.
    remediation: |
        Run the following command to remove the package containing the service: # dnf remove <package_name>
         OR
         If required packages have a dependency:               Run the following commands to stop and mask the service:
        # systemctl stop <service_name>.socket
        # systemctl stop <service_name>.service
        # systemctl mask <service_name>.socket
        # systemctl mask <service_name>.service
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_2.4', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.1.1":
    title: '3.1.1 | Ensure IPv6 status is identified - manual'
    section: 'Disable unused network protocols and devices'
    description: |
        Internet Protocol Version 6 IPv6 is the most recent version of Internet Protocol IP. Its designed to supply IP
        addressing and additional security to support the predicted growth of connected devices. IPv6 is based on 128bit
        addressing and can support 340 undecillion addresses, which is 340 followed by 36 zeroes. Features of IPv6 Hierarchical
        addressing and routing infrastructure Stateful and Stateless configuration Support for quality of service QoS An ideal
        protocol for neighboring node interaction
    remediation: |
        Enable or disable IPv6 in accordance with system requirements and local site policy Impact: IETF RFC 4038 recommends
        that applications are built with an assumption of dual stack. When enabled, IPv6 will require additional configuration
        to reduce risk to the system.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_3.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.1.2":
    title: '3.1.2 | Ensure DCCP is disabled - manual'
    section: 'Disable unused network protocols and devices'
    description: |
        The Datagram Congestion Control Protocol DCCP is a transport layer protocol that supports streaming media and telephony.
        DCCP provides a way to gain access to congestion control, without having to do it at the application layer, but does not
        provide insequence delivery.
    remediation: |
        Run the following script to disable the                  dccp
         module:               If the module is available in the running kernel:
        Create a file with                    install dccp /bin/false
         in the                    /etc/modprobe.d/
         directory
        Create a file with                    blacklist dccp
         in the                    /etc/modprobe.d/
         directory
        Unload                    dccp
         from the kernel                 If available in ANY installed kernel:
        Create a file with                    blacklist dccp
         in the                    /etc/modprobe.d/
         directory                 If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="dccp" # set module name
           l_mtype="net" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == dccp:net'

  "3.1.3":
    title: '3.1.3 | Ensure SCTP is disabled - manual'
    section: 'Disable unused network protocols and devices'
    description: |
        The Stream Control Transmission Protocol SCTP is a transport layer protocol used to support message oriented
        communication, with several streams of messages in one connection. It serves a similar function as TCP and UDP,
        incorporating features of both. It is messageoriented like UDP, and ensures reliable insequence transport of messages
        with congestion control like TCP.
    remediation: |
        Run the following script to disable the                  sctp
         module:               If the module is available in the running kernel:
        Create a file with                    install sctp /bin/false
         in the                    /etc/modprobe.d/
         directory
        Create a file with                    blacklist sctp
         in the                    /etc/modprobe.d/
         directory
        Unload                    sctp
         from the kernel                 If available in ANY installed kernel:
        Create a file with                    blacklist sctp
         in the                    /etc/modprobe.d/
         directory                 If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="sctp" # set module name
           l_mtype="net" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == sctp:net'

  "3.1.4":
    title: '3.1.4 | Ensure RDS is disabled - manual'
    section: 'Disable unused network protocols and devices'
    description: |
        The Reliable Datagram Sockets RDS protocol is a transport layer protocol designed to provide lowlatency, highbandwidth
        communications between cluster nodes. It was developed by the Oracle Corporation.
    remediation: |
        Run the following script to disable the                  rds
         module:               If the module is available in the running kernel:
        Create a file with                    install rds /bin/false
         in the                    /etc/modprobe.d/
         directory
        Create a file with                    blacklist rds
         in the                    /etc/modprobe.d/
         directory
        Unload                    rds
         from the kernel                 If available in ANY installed kernel:
        Create a file with                    blacklist rds
         in the                    /etc/modprobe.d/
         directory                 If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="rds" # set module name
           l_mtype="net" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == rds:net'

  "3.1.5":
    title: '3.1.5 | Ensure TIPC is disabled - manual'
    section: 'Disable unused network protocols and devices'
    description: |
        The Transparent InterProcess Communication TIPC protocol is designed to provide communication between cluster nodes.
    remediation: |
        Run the following script to disable the                  tipc
         module:               If the module is available in the running kernel:
        Create a file with                    install tipc /bin/false
         in the                    /etc/modprobe.d/
         directory
        Create a file with                    blacklist tipc
         in the                    /etc/modprobe.d/
         directory
        Unload                    tipc
         from the kernel                 If available in ANY installed kernel:
        Create a file with                    blacklist tipc
         in the                    /etc/modprobe.d/
         directory                 If the kernel module is not available on the system or pre-compiled into the kernel: No
        remediation is necessary
        #!/usr/bin/env bash

        {
           l_mname="tipc" # set module name
           l_mtype="net" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.1.5', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == tipc:net'

  "3.2.1":
    title: '3.2.1 | Ensure IP forwarding is disabled - manual'
    section: 'Configure Network Parameters (Host Only)'
    description: |
        The              net.ipv4.ipforward
         and              net.ipv6.conf.all.forwarding
         flags are used to tell the system whether it can forward packets or not.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.ip_forward = 0 Example:
        # printf "
        net.ipv4.ip_forward = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.ip_forward=0
           sysctl -w net.ipv4.route.flush=1
        }
                       -IF-
         IPv6 is enabled on the system:
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv6.conf.all.forwarding = 0 Example:
        # printf "
        net.ipv6.conf.all.forwarding = 0
        " >> /etc/sysctl.d/60-netipv6_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv6.conf.all.forwarding=0
           sysctl -w net.ipv6.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.2.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.ip_forward=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.all.forwarding=0'

  "3.2.2":
    title: '3.2.2 | Ensure packet redirect sending is disabled - manual'
    section: 'Configure Network Parameters (Host Only)'
    description: |
        ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router in a host
        only configuration, there is no need to send redirects.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0 Example:
        # printf "
        net.ipv4.conf.all.send_redirects = 0
        net.ipv4.conf.default.send_redirects = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.send_redirects=0
           sysctl -w net.ipv4.conf.default.send_redirects=0
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.send_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.send_redirects=0'

  "3.3.1":
    title: '3.3.1 | Ensure source routed packets are not accepted - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In
        contrast, nonsource routed packets travel a path determined by routers in the network. In some cases, systems may not be
        routable or reachable from some locations e.g. private addresses vs. Internet routable, and so source routed packets
        would need to be used.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 Example:
        # printf "
        net.ipv4.conf.all.accept_source_route = 0
        net.ipv4.conf.default.accept_source_route = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.accept_source_route=0
           sysctl -w net.ipv4.conf.default.accept_source_route=0
           sysctl -w net.ipv4.route.flush=1
        }
                       -IF-
         IPv6 is enabled on the system:
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0 Example:
        # printf "
        net.ipv6.conf.all.accept_source_route = 0
        net.ipv6.conf.default.accept_source_route = 0
        " >> /etc/sysctl.d/60-netipv6_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv6.conf.all.accept_source_route=0
           sysctl -w net.ipv6.conf.default.accept_source_route=0
           sysctl -w net.ipv6.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.accept_source_route=0'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.accept_source_route=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.all.accept_source_route=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.default.accept_source_route=0'

  "3.3.2":
    title: '3.3.2 | Ensure ICMP redirects are not accepted - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        ICMP redirect messages are packets that convey routing information and tell your host acting as a router to send packets
        via an alternate path. It is a way of allowing an outside routing device to update your system routing tables.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 Example:
        # printf "
        net.ipv4.conf.all.accept_redirects = 0
        net.ipv4.conf.default.accept_redirects = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.accept_redirects=0
           sysctl -w net.ipv4.conf.default.accept_redirects=0
           sysctl -w net.ipv4.route.flush=1
        }
                       -IF-
         IPv6 is enabled on the system:
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0 Example:
        # printf "
        net.ipv6.conf.all.accept_redirects = 0
        net.ipv6.conf.default.accept_redirects = 0
        " >> /etc/sysctl.d/60-netipv6_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv6.conf.all.accept_redirects=0
           sysctl -w net.ipv6.conf.default.accept_redirects=0
           sysctl -w net.ipv6.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.accept_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.accept_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.all.accept_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.default.accept_redirects=0'

  "3.3.3":
    title: '3.3.3 | Ensure secure ICMP redirects are not accepted - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list.
        It is assumed that these gateways are known to your system, and that they are likely to be secure.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0 Example:
        # printf "
        net.ipv4.conf.all.secure_redirects = 0
        net.ipv4.conf.default.secure_redirects = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following commands to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.secure_redirects=0
           sysctl -w net.ipv4.conf.default.secure_redirects=0
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.secure_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.secure_redirects=0'

  "3.3.4":
    title: '3.3.4 | Ensure suspicious packets are logged - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        When enabled, this feature logs packets with unroutable source addresses to the kernel log.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1 Example:
        # printf "
        net.ipv4.conf.all.log_martians = 1
        net.ipv4.conf.default.log_martians = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.log_martians=1
           sysctl -w net.ipv4.conf.default.log_martians=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.4', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.log_martians=1'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.log_martians=1'

  "3.3.5":
    title: '3.3.5 | Ensure broadcast ICMP requests are ignored - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        Setting              net.ipv4.icmpechoignorebroadcasts
         to              1
         will cause the system to ignore all ICMP echo and timestamp requests to broadcast and multicast addresses.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.icmp_echo_ignore_broadcasts = 1 Example:
        # printf "
        net.ipv4.icmp_echo_ignore_broadcasts = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.5', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.icmp_echo_ignore_broadcasts=1'

  "3.3.6":
    title: '3.3.6 | Ensure bogus ICMP responses are ignored - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        Setting              net.ipv4.icmpignoreboguserrorresponses
         to              1
         prevents the kernel from logging bogus responses RFC1122 noncompliant from broadcast reframes, keeping file systems
        from filling up with useless log messages.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.icmp_ignore_bogus_error_responses = 1 Example:
        # printf "
        net.ipv4.icmp_ignore_bogus_error_responses = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.6', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.icmp_ignore_bogus_error_responses=1'

  "3.3.7":
    title: '3.3.7 | Ensure Reverse Path Filtering is enabled - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        Setting              net.ipv4.conf.all.rpfilter
         and              net.ipv4.conf.default.rpfilter
         to              1
         forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid.
        Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding
        source packet came from, the packet is dropped and logged if              logmartians
         is set.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.rp_filter = 1 net.ipv4.conf.default.rp_filter = 1 Example:
        # printf "
        net.ipv4.conf.all.rp_filter = 1
        net.ipv4.conf.default.rp_filter = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following commands to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.rp_filter=1
           sysctl -w net.ipv4.conf.default.rp_filter=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
        Impact: If you are using asymmetrical routing on your system, you will not be able to enable this feature without
        breaking the routing.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.7', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.rp_filter=1'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.rp_filter=1'

  "3.3.8":
    title: '3.3.8 | Ensure TCP SYN Cookies is enabled - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        When              tcpsyncookies
         is set, the kernel will handle TCP SYN packets normally until the halfopen connection queue is full, at which time, the
        SYN cookie functionality kicks in. SYN cookies work by not using the SYN queue at all. Instead, the kernel simply
        replies to the SYN with a SYNACK, but will include a specially crafted TCP sequence number that encodes the source and
        destination IP address and port number and the time the packet was sent. A legitimate connection would send the ACK
        packet of the three way handshake with the specially crafted sequence number. This allows the system to verify that it
        has received a valid response to a SYN cookie and allow the connection, even though there is no corresponding SYN in the
        queue.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.tcp_syncookies = 1 Example:
        # printf "
        net.ipv4.tcp_syncookies = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.tcp_syncookies=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.8', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.tcp_syncookies=1'

  "3.3.9":
    title: '3.3.9 | Ensure IPv6 router advertisements are not accepted - manual'
    section: 'Configure Network Parameters (Host and Router)'
    description: |
        This setting disables the systems ability to accept IPv6 router advertisements.
    remediation: |
        -IF-
         IPv6 is enabled on the system:
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0 Example:
        # printf "
        net.ipv6.conf.all.accept_ra = 0
        net.ipv6.conf.default.accept_ra = 0
        " >> /etc/sysctl.d/60-netipv6_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv6.conf.all.accept_ra=0
           sysctl -w net.ipv6.conf.default.accept_ra=0
           sysctl -w net.ipv6.route.flush=1
        }
                       Note:
         If these settings appear in a conically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.9', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.all.accept_ra=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.default.accept_ra=0'

  "3.4.1.1":
    title: '3.4.1.1 | Ensure nftables is installed'
    section: 'Configure a firewall utility'
    description: |
        nftables provides a new inkernel packet classification framework that is based on a networkspecific Virtual Machine VM
        and a new nft userspace command line tool. nftables reuses the existing Netfilter subsystems such as the existing hook
        infrastructure, the connection tracking system, NAT, userspace queuing and logging subsystem.
    remediation: |
        Run the following command to install                    nftables
                                 # dnf install nftables
         Impact: Changing firewall settings while connected over the network can result in being locked out of the system.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.4.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "3.4.1.2":
    title: '3.4.1.2 | Ensure a single firewall configuration utility is in use'
    section: 'Configure a firewall utility'
    description: |
        FirewallD  Is a firewall service daemon that provides a dynamic customizable hostbased firewall with a DBus interface.
        Being dynamic, it enables creating, changing, and deleting the rules without the necessity to restart the firewall
        daemon each time the rules are changed NFTables  Includes the nft utility for configuration of the nftables subsystem of
        the Linux kernel Note
         firewalld with nftables backend does not support passing custom nftables rules to firewalld, using the
        direct
         option.
    remediation: |
        Run the following script to ensure that a single firewall utility is in use on the system:
        #!/usr/bin/env bash

        {
           l_output="" l_output2="" l_fwd_status="" l_nft_status="" l_fwutil_status=""
           # Determine FirewallD utility Status
           rpm -q firewalld > /dev/null 2>&1 && l_fwd_status="$(systemctl is-enabled firewalld.service):$(systemctl is-active
        firewalld.service)"
           # Determine NFTables utility Status
           rpm -q nftables > /dev/null 2>&1 && l_nft_status="$(systemctl is-enabled nftables.service):$(systemctl is-active
        nftables.service)"
           l_fwutil_status="$l_fwd_status:$l_nft_status"
           case $l_fwutil_status in
              enabled:active:masked:inactive|enabled:active:disabled:inactive)
                 echo -e "\n - FirewallD utility is in use, enabled and active\n - NFTables utility is correctly disabled or
        masked and inactive\n - no remediation required" ;;
              masked:inactive:enabled:active|disabled:inactive:enabled:active)
                 echo -e "\n - NFTables utility is in use, enabled and active\n - FirewallD utility is correctly disabled or
        masked and inactive\n - no remediation required" ;;
              enabled:active:enabled:active)
                 echo -e "\n - Both FirewallD and NFTables utilities are enabled and active\n - stopping and masking NFTables
        utility"
                 systemctl stop nftables && systemctl --now mask nftables ;;
              enabled:*:enabled:*)
                 echo -e "\n - Both FirewallD and NFTables utilities are enabled\n - remediating"
                 if [ "$(awk -F: '{print $2}' <<< "$l_fwutil_status")" = "active" ] && [ "$(awk -F: '{print $4}' <<<
        "$l_fwutil_status")" = "inactive" ]; then
                    echo " - masking NFTables utility"
                    systemctl stop nftables && systemctl --now mask nftables
                 elif [ "$(awk -F: '{print $4}' <<< "$l_fwutil_status")" = "active" ] && [ "$(awk -F: '{print $2}' <<<
        "$l_fwutil_status")" = "inactive" ]; then
                    echo " - masking FirewallD utility"
                    systemctl stop firewalld && systemctl --now mask firewalld
                 fi ;;
              *:active:*:active)
                 echo -e "\n - Both FirewallD and NFTables utilities are active\n - remediating"
                 if [ "$(awk -F: '{print $1}' <<< "$l_fwutil_status")" = "enabled" ] && [ "$(awk -F: '{print $3}' <<<
        "$l_fwutil_status")" != "enabled" ]; then
                    echo " - stopping and masking NFTables utility"
                    systemctl stop nftables && systemctl --now mask nftables
                 elif [ "$(awk -F: '{print $3}' <<< "$l_fwutil_status")" = "enabled" ] && [ "$(awk -F: '{print $1}' <<<
        "$l_fwutil_status")" != "enabled" ]; then
                    echo " - stopping and masking FirewallD utility"
                    systemctl stop firewalld && systemctl --now mask firewalld
                 fi ;;
              :enabled:active)
                 echo -e "\n - NFTables utility is in use, enabled, and active\n - FirewallD package is not installed\n - no
        remediation required" ;;
              :)
                 echo -e "\n - Neither FirewallD or NFTables is installed.\n - remediating\n - installing NFTables"
                 dnf -q install nftables ;;
              *:*:)
                 echo -e "\n - NFTables package is not installed on the system\n - remediating\n - installing NFTables"
                 dnf -q install nftables ;;
              *)
                 echo -e "\n - Unable to determine firewall state" ;;
           esac
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.4.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == active'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'should cmp == inactive'
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == active'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'should cmp == inactive'

  "3.4.2.1":
    title: '3.4.2.1 | Ensure firewalld default zone is set'
    section: 'Configure firewall rules'
    description: |
        A firewall zone defines the trust level for a connection, interface or source address binding. This is a one to many
        relation, which means that a connection, interface or source can only be part of one zone, but a zone can be used for
        many network connections, interfaces and sources. The default zone is the zone that is used for everything that is not
        explicitly bound/assigned to another zone. If no zone assigned to a connection, interface or source, only the default
        zone is used. The default zone is not always listed as being used for an interface or source as it will be used for it
        either way. This depends on the manager of the interfaces. Connections handled by NetworkManager are listed as
        NetworkManager requests to add the zone binding for the interface used by the connection. Also interfaces under control
        of the network service are listed also because the service requests it. Note
        A firewalld zone configuration file contains the information for a zone.
                         These are the zone description, services, ports, protocols, icmpblocks, masquerade, forwardports and
        rich language rules in an XML file format.
        The file name has to be                      zonename.xml
         where length of                      zonename
         is currently limited to 17 chars.
                              NetworkManager binds interfaces to zones automatically
    remediation: |
        Run the following script to set the default zone:
        !/usr/bin/env bash

        {
           l_zname="public" # <- Update to local site zone name if desired
           l_zone=""
           if systemctl is-enabled firewalld.service | grep -q 'enabled'; then
              l_zone="$(firewall-cmd --get-default-zone)"
              if [ "$l_zone" = "$l_zname" ]; then
                 echo -e "\n - The default zone is set to: \"$l_zone\"\n - No remediation required"
              elif [ -n "$l_zone" ]; then
                 echo -e "\n - The default zone is set to: \"$l_zone\"\n - Updating default zone to: \"l_zname\""
                 firewall-cmd --set-default-zone="$l_zname"
              else
                 echo -e "\n - The default zone is set to: \"$l_zone\"\n - Updating default zone to: \"l_zname\""
                 firewall-cmd --set-default-zone="$l_zname"
              fi
           else
              echo -e "\n - FirewallD is not in use on the system\n - No remediation required"
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.4.2.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.4.2.2":
    title: '3.4.2.2 | Ensure at least one nftables table exists - manual'
    section: 'Configure firewall rules'
    description: |
        Tables hold chains. Each table only has one address family and only applies to packets of this family.  Tables can have
        one of five families.
    remediation: |
        Run the following command to create a table in nftables # nft create table inet <table name>
         Example if FirewallD is not in use on the system: # nft create table inet filter
         Note:
         FirewallD uses the                    table inet firewalld
                                    NFTables
         table that is created when                    FirewallD
         is installed.                 Impact: Adding or modifying firewall rules can cause loss of connectivity to the system
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.4.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*table\h+\H+\b(\h+.*)?$'

  "3.4.2.3":
    title: '3.4.2.3 | Ensure nftables base chains exist - manual'
    section: 'Configure firewall rules'
    description: |
        Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an  entry
        point  for packets from the networking stack, a regular chain may be used as jump target and is used for better rule
        organization.
    remediation: |
        Run the following command to create the base chains: # nft create chain inet <table name> <base chain name> { type
        filter hook <(input|forward|output)> priority 0 \; }
         Example:
        # nft create chain inet filter input { type filter hook input priority 0 \; }
        # nft create chain inet filter forward { type filter hook forward priority 0 \; }
        # nft create chain inet filter output { type filter hook output priority 0 \; }
                         Impact:
        If configuring over ssh,                      creating
         a                      base chain
         with a  policy of                      drop
         will cause loss of connectivity.                   Ensure that a rule allowing ssh has been added to the base chain
        prior to setting the base chain's policy to drop
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.4.2.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*\H+\h+\H+\h+hook\h+input\b(\h+.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*\H+\h+\H+\h+hook\h+forward\b(\h+.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*\H+\h+\H+\h+hook\h+output\b(\h+.*)?$'

  "3.4.2.4":
    title: '3.4.2.4 | Ensure host based firewall loopback traffic is configured - manual'
    section: 'Configure firewall rules'
    description: |
        Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback
        network
    remediation: |
        Run the following script to implement the loopback rules:
        #!/usr/bin/env bash

        {
           l_hbfw=""
           if systemctl is-enabled firewalld.service | grep -q 'enabled' && systemctl is-enabled nftables.service | grep -q
        'enabled'; then
              echo -e "\n - Error - Both FirewallD and NFTables are enabled\n - Please follow recommendation: \"Ensure a single
        firewall configuration utility is in use\""
           elif ! systemctl is-enabled firewalld.service | grep -q 'enabled' && ! systemctl is-enabled nftables.service | grep
        -q 'enabled'; then
              echo -e "\n - Error - Neither FirewallD or NFTables is enabled\n - Please follow recommendation: \"Ensure a single
        firewall configuration utility is in use\""
           else
              if systemctl is-enabled firewalld.service | grep -q 'enabled' && ! systemctl is-enabled nftables.service | grep -q
        'enabled'; then
                 echo -e "\n - FirewallD is in use on the system" && l_hbfw="fwd"
              elif ! systemctl is-enabled firewalld.service | grep -q 'enabled' && systemctl is-enabled nftables.service | grep
        -q 'enabled'; then
                 echo -e "\n - NFTables is in use on the system" && l_hbfw="nft"
              fi
              l_ipsaddr="$(nft list ruleset | awk '/filter_IN_public_deny|hook\s+input\s+/,/\}\s*(#.*)?$/' | grep -P --
        'ip\h+saddr')"
              if ! nft list ruleset | awk '/hook\s+input\s+/,/\}\s*(#.*)?$/' | grep -Pq -- '\H+\h+"lo"\h+accept'; then
                 echo -e "\n - Enabling input to accept for loopback address"
                 if [ "$l_hbfw" = "fwd" ]; then
                    firewall-cmd --permanent --zone=trusted --add-interface=lo
                    firewall-cmd --reload
                 elif [ "$l_hbfw" = "nft" ]; then
                    nft add rule inet filter input iif lo accept
                 fi
              fi
              if ! grep -Pq -- 'ip\h+saddr\h+127\.0\.0\.0\/8\h+(counter\h+packets\h+\d+\h+bytes\h+\d+\h+)?drop' <<< "$l_ipsaddr"
        && ! grep -Pq -- 'ip\h+daddr\h+\!\=\h+127\.0\.0\.1\h+ip\h+saddr\h+127\.0\.0\.1\h+drop' <<< "$l_ipsaddr"; then
                 echo -e "\n - Setting IPv4 network traffic from loopback address to drop"
                 if [ "$l_hbfw" = "fwd" ]; then
                    firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address="127.0.0.1" destination not
        address="127.0.0.1" drop'
                    firewall-cmd --permanent --zone=trusted --add-rich-rule='rule family=ipv4 source address="127.0.0.1"
        destination not address="127.0.0.1" drop'
                    firewall-cmd --reload
                 elif [ "$l_hbfw" = "nft" ]; then
                    nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop
                 fi
              fi
              if grep -Pq -- '^\h*0\h*$' /sys/module/ipv6/parameters/disable; then
                 l_ip6saddr="$(nft list ruleset | awk '/filter_IN_public_deny|hook input/,/}/' | grep 'ip6 saddr')"
                 if ! grep -Pq 'ip6\h+saddr\h+::1\h+(counter\h+packets\h+\d+\h+bytes\h+\d+\h+)?drop' <<< "$l_ip6saddr" && ! grep
        -Pq -- 'ip6\h+daddr\h+\!=\h+::1\h+ip6\h+saddr\h+::1\h+drop' <<< "$l_ip6saddr"; then
                    echo -e "\n - Setting IPv6 network traffic from loopback address to drop"
                    if [ "$l_hbfw" = "fwd" ]; then
                       firewall-cmd --permanent --add-rich-rule='rule family=ipv6 source address="::1" destination not
        address="::1" drop'
                       firewall-cmd --permanent --zone=trusted --add-rich-rule='rule family=ipv6 source address="::1"
        destination not address="::1" drop'
                       firewall-cmd --reload
                    elif [ "$l_hbfw" = "nft" ]; then
                       nft add rule inet filter input ip6 saddr ::1 counter drop
                    fi
                 fi
              fi
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.4.2.4', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.4.2.5":
    title: '3.4.2.5 | Ensure firewalld drops unnecessary services and ports - manual'
    section: 'Configure firewall rules'
    description: |
        Services and ports can be accepted or explicitly rejected or dropped by a zone. For every zone, you can set a default
        behavior that handles incoming traffic that is not further specified. Such behavior is defined by setting the target of
        the zone. There are three options  default, ACCEPT, REJECT, and DROP. ACCEPT  you accept all incoming packets except
        those disabled by a specific rule. REJECT  you disable all incoming packets except those that you have allowed in
        specific rules and the source machine is informed about the rejection. DROP  you disable all incoming packets except
        those that you have allowed in specific rules and no information sent to the source machine.
    remediation: |
        If Firewalld is in use on the system: Run the following command to remove an unnecessary service: # firewall-cmd
        --remove-service=<service>
         Example: # firewall-cmd --remove-service=cockpit
         Run the following command to remove an unnecessary port: # firewall-cmd --remove-port=<port-number>/<port-type>
         Example: # firewall-cmd --remove-port=25/tcp
         Run the following command to make new settings persistent: # firewall-cmd --runtime-to-permanent
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_3.4.2.5', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.4.2.6":
    title: '3.4.2.6 | Ensure nftables established connections are configured - manual'
    section: 'Configure firewall rules'
    description: |
        Configure the firewall rules for new outbound and established connections
    remediation: |
        If NFTables utility is in use on your system: Configure nftables in accordance with site policy. The following commands
        will implement a policy to allow all established connections:
        # systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol tcp ct state
        established accept
        # systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol udp ct state
        established accept
        # systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol icmp ct state
        established accept
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_3.4.2.6', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.4.2.7":
    title: '3.4.2.7 | Ensure nftables default deny firewall policy'
    section: 'Configure firewall rules'
    description: |
        Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.
    remediation: |
        If NFTables utility is in use on your system: Run the following command for the base chains with the input, forward, and
        output hooks to implement a default DROP policy: # nft chain <table family> <table name> <chain name> { policy drop \; }
         Example:
        # nft chain inet filter input { policy drop \; }
        # nft chain inet filter forward { policy drop \; }
                         Impact: If configuring nftables over ssh, creating a base chain with a policy of drop will cause loss
        of connectivity.
        Ensure that a rule allowing                      ssh
         has been added to the base chain prior to setting the base chain's policy to drop
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.4.2.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == input'
            - name: Undefined
              rule: 'should cmp == forward'
            - name: Undefined
              rule: 'Undefined'

  "4.1.1":
    title: '4.1.1 | Ensure cron daemon is installed and enabled'
    section: 'Configure time-based job schedulers'
    description: |
        The              cron
         daemon is used to execute batch jobs on the system.
    remediation: |
        -- IF --
         Cron is being used to execute batch jobs on the system:
        Run the following command to install and enable                  cron
        :
        # dnf install cronie
        # systemctl --now enable crond
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'

  "4.1.2":
    title: '4.1.2 | Ensure permissions on etccrontab are configured'
    section: 'Configure time-based job schedulers'
    description: |
        The              /etc/crontab
         file is used by              cron
         to control its own jobs. The commands in this item make sure that root is the user and group owner of the file and that
        only the owner can access the file.
    remediation: |
        -- IF --
         Cron is being used to execute batch jobs on the system
        Run the following commands to set ownership and permissions on                  /etc/crontab
        :
        # chown root:root /etc/crontab
        # chmod og-rwx /etc/crontab
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.3":
    title: '4.1.3 | Ensure permissions on etccron.hourly are configured'
    section: 'Configure time-based job schedulers'
    description: |
        This directory contains system              cron
         jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the              crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        -- IF --
         Cron is being used to execute batch jobs on the system:
        Run the following commands to set ownership and permissions on                  /etc/cron.hourly
         :
        # chown root:root /etc/cron.hourly

        # chmod og-rwx /etc/cron.hourly
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.4":
    title: '4.1.4 | Ensure permissions on etccron.daily are configured'
    section: 'Configure time-based job schedulers'
    description: |
        The              /etc/cron.daily
         directory contains system cron jobs that need to run on a daily basis. The files in this directory cannot be
        manipulated by the              crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        -- IF --
         Cron is being used to execute batch jobs on the system:
        Run the following commands to set ownership and permissions on                  /etc/cron.daily
         :
        # chown root:root /etc/cron.daily

        # chmod og-rwx /etc/cron.daily
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.5":
    title: '4.1.5 | Ensure permissions on etccron.weekly are configured'
    section: 'Configure time-based job schedulers'
    description: |
        The              /etc/cron.weekly
         directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be
        manipulated by the              crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        -- IF --
         Cron is being used to execute batch jobs on the system:
        Run the following commands to set ownership and permissions on                  /etc/cron.weekly
         :
        # chown root:root /etc/cron.weekly

        # chmod og-rwx /etc/cron.weekly
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.6":
    title: '4.1.6 | Ensure permissions on etccron.monthly are configured'
    section: 'Configure time-based job schedulers'
    description: |
        The              /etc/cron.monthly
         directory contains system cron jobs that need to run on a monthly basis. The files in this directory cannot be
        manipulated by the              crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        -- IF --
         Cron is being used to execute batch jobs on the system:
        Run the following commands to set ownership and permissions on                  /etc/cron.monthly
         :
        # chown root:root /etc/cron.monthly

        # chmod og-rwx /etc/cron.monthly
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.7":
    title: '4.1.7 | Ensure permissions on etccron.d are configured'
    section: 'Configure time-based job schedulers'
    description: |
        The              /etc/cron.d
          directory contains system              cron
         jobs that need to run in a similar manner to the hourly, daily, weekly and monthly jobs from              /etc/crontab
         , but require more granular control as to when they run. The files in this directory cannot be manipulated by the
        crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        -- IF --
         Cron is being used to execute batch jobs on the system:
        Run the following commands to set ownership and permissions on                  /etc/cron.d
         :
        # chown root:root /etc/cron.d

        # chmod og-rwx /etc/cron.d
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.8":
    title: '4.1.8 | Ensure cron is restricted to authorized users'
    section: 'Configure time-based job schedulers'
    description: |
        If              cron
         is installed in the system, configure              /etc/cron.allow
         to allow specific users to use these services. If              /etc/cron.allow
         does not exist, then              /etc/cron.deny
         is checked. Any user not specifically defined in those files is allowed to use cron. By removing the file, only users
        in              /etc/cron.allow
         are allowed to use cron.
        Note Even though a given user is not listed in                cron.allow
        , cron jobs can still be run as that user. The                cron.allow
         file only controls administrative access to the crontab command for scheduling and modifying cron jobs.
    remediation: |
        -- IF --
         Cron is being used to execute batch jobs on the system:
        Run the following script to remove                  /etc/cron.deny
        , create                  /etc/cron.allow
        , and set the file mode on                  /etc/cron.allow
        :
        #!/usr/bin/env bash

        {
           if rpm -q cronie >/dev/null; then
              [ -e /etc/cron.deny ] && rm -f /etc/cron.deny
              [ ! -e /etc/cron.allow ] && touch /etc/cron.allow
              chown root:root /etc/cron.allow
              chmod u-x,go-rwx /etc/cron.allow
           else
              echo "cron is not installed on the system"
           fi
        }
                       OR
         Run the following command to remove                  cron
        :               # dnf remove cronie
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.8', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.9":
    title: '4.1.9 | Ensure at is restricted to authorized users'
    section: 'Configure time-based job schedulers'
    description: |
         IF  at
         is installed in the system
        Configure              /etc/at.allow
         to allow specific users to use these services. If              /etc/at.allow
         does not exist, then              /etc/at.deny
         is checked. Any user not specifically defined in those files is allowed to use at. By removing the file, only users in
        /etc/at.allow
         are allowed to use at.           Note
         Even though a given user is not listed in              at.allow
        , at jobs can still be run as that user. The              at.allow
         file only controls administrative access to the at command for scheduling and modifying at jobs.
    remediation: |
        Run the following script to remove                  /etc/at.deny
        , create                  /etc/at.allow
        , and set the file mode for                  /etc/at.allow
        :
        #!/usr/bin/env bash

        {
           if rpm -q at >/dev/null; then
              [ -e /etc/at.deny ] && rm -f /etc/at.deny
              [ ! -e /etc/at.allow ] && touch /etc/at.allow
              chown root:root /etc/at.allow
              chmod u-x,go-rwx /etc/at.allow
           else
              echo "at is not installed on the system"
           fi
        }
                       OR
         Run the following command to remove                  at
        :               # dnf remove at
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.9', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.2.1":
    title: '4.2.1 | Ensure permissions on etcsshsshd config are configured'
    section: 'Configure SSH Server'
    description: |
        The              /etc/ssh/sshdconfig
         file contains configuration specifications for              sshd
        . The command below sets the owner and group of the file to root.
    remediation: |
        Run the following commands to set ownership and permissions on                  /etc/ssh/sshd_config
        :
        # chown root:root /etc/ssh/sshd_config
        # chmod u-x,go-rwx /etc/ssh/sshd_config
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.2.2":
    title: '4.2.2 | Ensure permissions on SSH private host key files are configured'
    section: 'Configure SSH Server'
    description: |
        An SSH private key is one of two files used in SSH public key authentication.  In this authentication method, the
        possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to
        authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key
        should be distributed.
    remediation: |
        Run the following script to set mode, ownership, and group on the private SSH host key files:
        #!/usr/bin/env bash

        {
           l_output="" l_output2=""
           l_skgn="ssh_keys" # Group designated to own openSSH keys
           l_skgid="$(awk -F: '($1 == "'"$l_skgn"'"){print $3}' /etc/group)" # Get gid of group
           if [ -n "$l_skgid" ]; then
              l_agroup="(root|$l_skgn)" && l_sgroup="$l_skgn" && l_mfix="u-x,g-wx,o-rwx"
           else
              l_agroup="root" && l_sgroup="root" && l_mfix="u-x,go-rwx"
           fi
           unset a_skarr && a_skarr=() # Clear and initialize array
           while IFS= read -r -d $'\0' l_file; do # Loop to populate array
              if grep -Pq ':\h+OpenSSH\h+private\h+key\b' <<< "$(file "$l_file")"; then
                 a_skarr+=("$(stat -Lc '%n^%#a^%U^%G^%g' "$l_file")")
              fi
           done < <(find -L /etc/ssh -xdev -type f -print0)
           while IFS="^" read -r l_file l_mode l_owner l_group l_gid; do
              l_out2=""
              [ "$l_gid" = "$l_skgid" ] && l_pmask="0137" || l_pmask="0177"
              l_maxperm="$( printf '%o' $(( 0777 & ~$l_pmask )) )"
              if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then
                 l_out2="$l_out2\n  - Mode: \"$l_mode\" should be mode: \"$l_maxperm\" or more restrictive\n   - Revoking excess
        permissions"
                 chmod "$l_mfix" "$l_file"
              fi
              if [ "$l_owner" != "root" ]; then
                 l_out2="$l_out2\n  - Owned by: \"$l_owner\" should be owned by \"root\"\n   - Changing ownership to \"root\""
                 chown root "$l_file"
              fi
              if [[ ! "$l_group" =~ $l_agroup ]]; then
                 l_out2="$l_out2\n  - Owned by group \"$l_group\" should be group owned by: \"${l_agroup//|/ or }\"\n   -
        Changing group ownership to \"$l_sgroup\""
                 chgrp "$l_sgroup" "$l_file"
              fi
              [ -n "$l_out2" ] && l_output2="$l_output2\n - File: \"$l_file\"$l_out2"
           done <<< "$(printf '%s\n' "${a_skarr[@]}")"
           unset a_skarr
           if [ -z "$l_output2" ]; then
              echo -e "\n- No access changes required\n"
           else
              echo -e "\n- Remediation results:\n$l_output2\n"
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.2.3":
    title: '4.2.3 | Ensure permissions on SSH public host key files are configured'
    section: 'Configure SSH Server'
    description: |
        An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key
        is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public
        key that corresponds to a private key will be able to authenticate successfully.
    remediation: |
        Run the following script to set mode, ownership, and group on the public SSH host key files:
        #!/usr/bin/env bash

        {
           l_pmask="0133"
           l_maxperm="$( printf '%o' $(( 0777 & ~$l_pmask )) )"
           awk '{print}' <<< "$(find -L /etc/ssh -xdev -type f -exec stat -Lc "%n %#a %U %G" {} +)" | (while read -r  l_file
        l_mode l_owner l_group; do
              if file "$l_file" | grep -Pq ':\h+OpenSSH\h+(\H+\h+)?public\h+key\b'; then
                 echo -e " - Checking private key file: \"$l_file\""
                 if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then
                    echo -e " - File: \"$l_file\" is mode \"$l_mode\" changing to mode: \"$l_maxperm\""
                    chmod u-x,go-wx "$l_file"
                 fi
                 if [ "$l_owner" != "root" ]; then
                    echo -e " - File: \"$l_file\" is owned by: \"$l_owner\" changing owner to \"root\""
                    chown root "$l_file"
                 fi
                 if [ "$l_group" != "root" ]; then
                    echo -e " - File: \"$l_file\" is owned by group \"$l_group\" changing to group \"root\""
                    chgrp "root" "$l_file"
                 fi
              fi
           done
           )
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.2.4":
    title: '4.2.4 | Ensure SSH access is limited'
    section: 'Configure SSH Server'
    description: |
        There are several options available to limit which users and group can access the system via SSH. It is recommended that
        at least one of the following options be leveraged AllowUsers


        The                    AllowUsers
         variable gives the system administrator the option of allowing specific users to                    ssh
         into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this
        variable. If a system administrator wants to restrict user access further by only allowing the allowed users to log in
        from a particular host, the entry can be specified in the form of userhost.
                           AllowGroups


        The                    AllowGroups
         variable gives the system administrator the option of allowing specific groups of users to                    ssh
         into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this
        variable.
                           DenyUsers


        The                    DenyUsers
         variable gives the system administrator the option of denying specific users to                    ssh
         into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this
        variable. If a system administrator wants to restrict user access further by specifically denying a users access from a
        particular host, the entry can be specified in the form of userhost.
                           DenyGroups


        The                    DenyGroups
         variable gives the system administrator the option of denying specific groups of users to                    ssh
         into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this
        variable.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set one or more of the parameters as follows:               AllowUsers <userlist>
         -OR- AllowGroups <grouplist>
         -OR- DenyUsers <userlist>
         -OR- DenyGroups <grouplist>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^(allowusers|allowgroups|denyusers|denygroups)\s+(\S+).*$'

  "4.2.5":
    title: '4.2.5 | Ensure SSH LogLevel is appropriate'
    section: 'Configure SSH Server'
    description: |
        INFO
         level is the basic level that only records login activity of SSH users. In many situations, such as Incident Response,
        it is important to determine when a particular user was active on a system. The logout record can eliminate those users
        who disconnected, which helps narrow the field.           VERBOSE
         level specifies that login and logout activity as well as the key fingerprint for any SSH key used for login will be
        logged. This information is important for SSH key management, especially in legacy environments.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  LogLevel
         parameter as follows:               LogLevel VERBOSE
         OR LogLevel INFO

        Run the following command to comment out any                  LogLevel
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  VERBOSE
         or                  INFO
        :               # grep -Pi '^\h*LogLevel\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep -Evi
        '(VERBOSE|INFO)' | while read -r l_out; do sed -ri "/^\s*LogLevel\s+/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^loglevel\s*(VERBOSE|INFO)\s*$'

  "4.2.6":
    title: '4.2.6 | Ensure SSH PAM is enabled'
    section: 'Configure SSH Server'
    description: |
        UsePAM Enables the Pluggable Authentication Module interface. If set to yes this will enable PAM authentication using
        ChallengeResponseAuthentication and PasswordAuthentication in addition to PAM account and session module processing for
        all authentication types
    remediation: |
        Edit or create a file in the directory /etc/ssh/sshd_config.d/ ending in *.conf or the /etc/ssh/sshd_config file and set
        the parameter as follows: UsePAM yes

        Run the following command to comment out any                  UsePAM
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  yes
                              # grep -Pi '^\h*UsePAM\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep -Evi 'yes' |
        while read -r l_out; do sed -ri "/^\s*UsePAM\s+/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
         Impact: If UsePAM is enabled, you will not be able to run sshd as a non-root user.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\s*usepam\s+yes\s*$'

  "4.2.7":
    title: '4.2.7 | Ensure SSH root login is disabled'
    section: 'Configure SSH Server'
    description: |
        The              PermitRootLogin
         parameter specifies if the root user can log in using ssh. The default is no.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  PermitRootLogin
         parameter as follows:               PermitRootLogin no

        Run the following command to comment out any                  PermitRootLogin
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  no
                              # grep -Pi '^\h*PermitRootLogin\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep -Evi
        'no' | while read -r l_out; do sed -ri "/^\s*PermitRootLogin\s+/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^permitrootlogin\s*no\s*$'

  "4.2.8":
    title: '4.2.8 | Ensure SSH HostbasedAuthentication is disabled'
    section: 'Configure SSH Server'
    description: |
        The              HostbasedAuthentication
         parameter specifies if authentication is allowed through trusted hosts via the user of              .rhosts
        , or              /etc/hosts.equiv
        , along with successful public key client host authentication. This option only applies to SSH Protocol Version 2.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  HostbasedAuthentication
         parameter as follows:               HostbasedAuthentication no

        Run the following command to comment out any                  HostbasedAuthentication
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  no
        :               # grep -Pi '^\h*HostbasedAuthentication\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep
        -Evi 'no' | while read -r l_out; do sed -ri "/^\s*HostbasedAuthentication\s+/s/^/# /" "$(awk -F: '{print $1}' <<<
        $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.8', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^hostbasedauthentication\s*no\s*$'

  "4.2.9":
    title: '4.2.9 | Ensure SSH PermitEmptyPasswords is disabled'
    section: 'Configure SSH Server'
    description: |
        The              PermitEmptyPasswords
         parameter specifies if the SSH server allows login to accounts with empty password strings.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  PermitEmptyPasswords
         parameter as follows:               PermitEmptyPasswords no

        Run the following command to comment out any                  PermitEmptyPasswords
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  no
                              # grep -Pi '^\h*PermitEmptyPasswords\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep
        -Evi 'no' | while read -r l_out; do sed -ri "/^\s*PermitEmptyPasswords\s+/s/^/# /" "$(awk -F: '{print $1}' <<<
        $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.9', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^permitemptypasswords\s*no\s*$'

  "4.2.10":
    title: '4.2.10 | Ensure SSH PermitUserEnvironment is disabled'
    section: 'Configure SSH Server'
    description: |
        The              PermitUserEnvironment
         option allows users to present environment options to the              ssh
         daemon.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  PermitUserEnvironment
         parameter as follows:               PermitUserEnvironment no

        Run the following command to comment out any                  PermitUserEnvironment
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  no
                              # grep -Pi '^\h*PermitUserEnvironment\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep
        -Evi 'no' | while read -r l_out; do sed -ri "/^\s*PermitUserEnvironment\s+/s/^/# /" "$(awk -F: '{print $1}' <<<
        $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.10', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^permituserenvironment\s*no\s*$'

  "4.2.11":
    title: '4.2.11 | Ensure SSH IgnoreRhosts is enabled'
    section: 'Configure SSH Server'
    description: |
        The              IgnoreRhosts
         parameter specifies that              .rhosts
         and              .shosts
         files will not be used in              RhostsRSAAuthentication
         or              HostbasedAuthentication
        .
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  IgnoreRhosts
         parameter as follows:               IgnoreRhosts yes

        Run the following command to comment out any                  IgnoreRhosts
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  yes
                              # grep -Pi '^\h*IgnoreRhosts\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep -Evi
        'yes' | while read -r l_out; do sed -ri "/^\s*IgnoreRhosts\s+/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.11', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^ignorerhosts\s*yes\s*$'

  "4.2.12":
    title: '4.2.12 | Ensure SSH X11 forwarding is disabled'
    section: 'Configure SSH Server'
    description: |
        The              X11Forwarding
         parameter provides the ability to tunnel X11 traffic through the connection to enable remote graphic connections.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  X11Forwarding
         parameter as follows:               X11Forwarding no

        Run the following command to comment out any                  X11Forwarding
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  no
                              # grep -Pi '^\h*X11Forwarding\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep -Evi
        'no' | while read -r l_out; do sed -ri "/^\s*X11Forwarding\s+/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_4.2.12', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^x11forwarding\s*no\s*$'

  "4.2.13":
    title: '4.2.13 | Ensure SSH AllowTcpForwarding is disabled'
    section: 'Configure SSH Server'
    description: |
        SSH port forwarding is a mechanism in SSH for tunneling application ports from the client to the server, or servers to
        clients. It can be used for adding encryption to legacy applications, going through firewalls, and some system
        administrators and IT professionals use it for opening backdoors into the internal network from their home machines
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  AllowTcpForwarding
         parameter as follows:               AllowTcpForwarding no

        Run the following command to comment out any                  AllowTcpForwarding
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting other than                  no
        :               # grep -Pi '^\h*AllowTcpForwarding\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep -Evi
        'no' | while read -r l_out; do sed -ri "/^\s*AllowTcpForwarding\s+/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
         Impact: SSH tunnels are widely used in many corporate environments that employ mainframe systems as their application
        backends. In those environments the applications themselves may have very limited native support for security. By
        utilizing tunneling, compliance with SOX, HIPAA, PCI-DSS, and other standards can be achieved without having to modify
        the applications.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_4.2.13', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\s*allowtcpforwarding\s+no\s*$'

  "4.2.14":
    title: '4.2.14 | Ensure system-wide crypto policy is not over-ridden'
    section: 'Configure SSH Server'
    description: |
        Systemwide Crypto policy can be overridden or opted out of for openSSH
    remediation: |
        Run the following commands:
        # sed -ri "s/^\s*(CRYPTO_POLICY\s*=.*)$/# \1/" /etc/sysconfig/sshd /etc/ssh/sshd_config.d/*.conf

        # systemctl reload sshd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.14', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.2.15":
    title: '4.2.15 | Ensure SSH warning banner is configured'
    section: 'Configure SSH Server'
    description: |
        The              Banner
         parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By
        default, no banner is displayed.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  Banner
         parameter as follows:               Banner /etc/issue.net
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.15', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^banner\s+\/(\S+)$'

  "4.2.16":
    title: '4.2.16 | Ensure SSH MaxAuthTries is set to 4 or less'
    section: 'Configure SSH Server'
    description: |
        The              MaxAuthTries
         parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure
        count reaches half the number, error messages will be written to the              syslog
         file detailing the login failure.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  MaxAuthTries
         parameter as follows:               MaxAuthTries 4

        Run the following command to comment out any                  MaxAuthTries
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting greater than                  4
        :               # grep -Pi '^\h*maxauthtries\h+([5-9]|[1-9][0-9]+)' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf |
        while read -r l_out; do sed -ri "/^\s*maxauthtries\s+([5-9]|[1-9][0-9]+)/s/^/# /" "$(awk -F: '{print $1}' <<<
        $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.16', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\s*maxauthtries\s*[0-4]\b'

  "4.2.17":
    title: '4.2.17 | Ensure SSH MaxStartups is configured'
    section: 'Configure SSH Server'
    description: |
        The              MaxStartups
         parameter specifies the  maximum number of concurrent unauthenticated connections to the SSH daemon.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  MaxStartups
         parameter as follows:               MaxStartups 10:30:60

        Run the following command to comment out any                  MaxStartups
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting greater than                  10:30:60
        :               # grep -Pi
        '^\s*maxstartups\s+(((1[1-9]|[1-9][0-9][0-9]+):([0-9]+):([0-9]+))|(([0-9]+):(3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):([0-9]+))|(([0-9]+):([0-9]+):(6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+)))'
        /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | while read -r l_out; do sed -ri
        "/^\s*MaxStartups\s+(((1[1-9]|[1-9][0-9][0-9]+):([0-9]+):([0-9]+))|(([0-9]+):(3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):([0-9]+))|(([0-9]+):([0-9]+):(6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+)))/s/^/#
        /" "$(awk -F: '{print $1}' <<< $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.17', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\s*maxstartups\s+(10|[1-9])\:(30|[1-2][0-9]|[1-9])\:(60|[1-5][0-9]|[1-9])\s*$'

  "4.2.18":
    title: '4.2.18 | Ensure SSH MaxSessions is set to 10 or less'
    section: 'Configure SSH Server'
    description: |
        The              MaxSessions
         parameter specifies the maximum number of open sessions permitted from a given connection.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  MaxSessions
         parameter as follows:               MaxSessions 10

        Run the following command to comment out any                  MaxSessions
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting greater than                  10
                              # grep -Pi '^\s*MaxSessions\s+(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)' /etc/ssh/sshd_config
        /etc/ssh/sshd_config.d/*.conf | while read -r l_out; do sed -ri
        "/^\s*MaxSessions\s+(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.18', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\s*maxsessions\s+([1-9]|10)\s*$'

  "4.2.19":
    title: '4.2.19 | Ensure SSH LoginGraceTime is set to one minute or less'
    section: 'Configure SSH Server'
    description: |
        The              LoginGraceTime
         parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is
        the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should
        be limited to appropriate organizational limits to ensure the service is available for needed access.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter as follows:               LoginGraceTime 60

        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  LoginGraceTime
         parameter as follows:
        LoginGraceTime 60
        -or-
        LoginGraceTime 1m

        Run the following command to comment out any                  LoginGraceTime
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include any setting equal to                  0
         or greater than                  60
         seconds:               # grep -Pi '^\s*LoginGraceTime\s+(0|6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+|[^1]m)'
        /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | while read -r l_out; do sed -ri
        "/^\s*LoginGraceTime\s+(0|6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+|[^1]m)/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.19', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^logingracetime\s*([1-9]|[1-5][0-9]|60|1m)\s*$'

  "4.2.20":
    title: '4.2.20 | Ensure SSH Idle Timeout Interval is configured'
    section: 'Configure SSH Server'
    description: |
        NOTE
         To clarify, the two settings described below are only meant for idle connections from a protocol perspective and not
        meant to check if the user is active or not. An idle user does not mean an idle connection. SSH does not, and never had,
        intentionally the capability to drop idle users. In SSH versions before              8.2p1
         there was a bug that caused these values to behave in such a manner that they were abused to disconnect idle users.
        This bug has been resolved in              8.2p1
         and thus may no longer be abused to disconnect idle users.
        The two options              ClientAliveInterval
         and              ClientAliveCountMax
         control the timeout of SSH sessions. Taken directly from              man 5 sshdconfig
                   ClientAliveInterval
         Sets a timeout interval in seconds after which if no data has been received from the client, sshd8 will send a message
        through the encrypted channel to request a response from the client. The default is 0, indicating that these messages
        will not be sent to the client.               ClientAliveCountMax
         Sets the number of client alive messages which may be sent without sshd8 receiving any messages back from the client.
        If this threshold is reached while client alive messages are being sent, sshd will disconnect the client, terminating
        the session.  It is important to note that the use of client alive messages is very different from TCPKeepAlive. The
        client alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive
        option enabled by TCPKeepAlive is spoofable. The client alive mechanism is valuable when the client or server depend on
        knowing when a connection has become unresponsive.
        The default value is 3. If ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default,
        unresponsive SSH clients will be disconnected after approximately 45 seconds. Setting a zero ClientAliveCountMax
        disables connection termination.
    remediation: |
        Edit or create a file ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file and set the                  ClientAliveInterval
         and                  ClientAliveCountMax
         parameters according to site policy.               Example:
        ClientAliveInterval 15
        ClientAliveCountMax 3

        Edit files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory and the                  /etc/ssh/sshd_config
         file and remove occurrences of the                  ClientAliveInterval
         and                  ClientAliveCountMax
         parameters not in accordence with local site policy.
        Run the following command to comment out any                  ClientAliveCountMax
         parameter entries in files ending in                  *.conf
         in the                  /etc/ssh/sshd_config.d/
         directory or the                  /etc/ssh/sshd_config
         file that include the setting of                  0
         "disabled":               # grep -Pi '^\h*ClientAliveCountMax\h+0\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf
        | while read -r l_out; do sed -ri "/^\s*ClientAliveCountMax\s+0/s/^/# /" "$(awk -F: '{print $1}' <<< $l_out)";done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.20', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^clientalivecountmax\h+([1-9][0-9]*m?)\b'

  "4.3.1":
    title: '4.3.1 | Ensure sudo is installed'
    section: 'Configure privilege escalation'
    description: |
        sudo
         allows a permitted user to execute a command as the superuser or another user, as specified by the security policy.
        The invoking users real not effective user ID is used to determine the user name with which to query the security
        policy.
    remediation: |
        Run the following command to install sudo # dnf install sudo
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.2":
    title: '4.3.2 | Ensure sudo commands use pty'
    section: 'Configure privilege escalation'
    description: |
        sudo
         can be configured to run only from a pseudo terminal              pseudopty
        .
    remediation: |
        Edit the file                  /etc/sudoers
         with                  visudo
         or a file in                  /etc/sudoers.d/
         with                  visudo -f
         <                 PATH_TO_FILE
        > and add the following line:               Defaults use_pty
         Note:
        sudo will read each file in                    /etc/sudoers.d
        , skipping file names that end in                    ~
         or contain a                    .
         character to avoid causing problems with package manager or editor temporary/backup files.
        Files are parsed in sorted lexical order. That is,                    /etc/sudoers.d/01_first
         will be parsed before                    /etc/sudoers.d/10_second
        .
        Be aware that because the sorting is lexical, not numeric,                    /etc/sudoers.d/1_whoops
         would be loaded after                    /etc/sudoers.d/10_second
        .                 Using a consistent number of leading zeroes in the file names can be used to avoid such problems.
        Impact: WARNING:
         Editing the                    sudo
         configuration incorrectly can cause                    sudo
         to stop functioning. Always use                    visudo
         to modify                    sudo
         configuration files.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.3":
    title: '4.3.3 | Ensure sudo log file exists'
    section: 'Configure privilege escalation'
    description: |
        sudo can use a custom log file
    remediation: |
        Edit the file                  /etc/sudoers
         or a file in                  /etc/sudoers.d/
         with visudo or visudo -f <PATH TO FILE> and add the following line:               Defaults  logfile="<PATH TO CUSTOM
        LOG FILE>"
         Example Defaults logfile="/var/log/sudo.log"
         Impact: WARNING:
         Editing the                    sudo
         configuration incorrectly can cause                    sudo
         to stop functioning. Always use                    visudo
         to modify                    sudo
         configuration files.
        Creation of additional log files can cause disk space exhaustion if not correctly managed. You should configure
        logrotate
         to manage the sudo log in accordance with your local policy.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.4":
    title: '4.3.4 | Ensure re-authentication for privilege escalation is not disabled globally'
    section: 'Configure privilege escalation'
    description: |
        The operating system must be configured so that users must reauthenticate for privilege escalation.
    remediation: |
        Configure the operating system to require users to reauthenticate for privilege escalation.
        Based on the outcome of the audit procedure, use                  visudo -f <PATH TO FILE>
         to edit the relevant sudoers file.
        Remove any occurrences of                  !authenticate
         tags in the file(s).
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.5":
    title: '4.3.5 | Ensure sudo authentication timeout is configured correctly'
    section: 'Configure privilege escalation'
    description: |
        sudo
         caches used credentials for a default of 5 minutes. This is for ease of use when there are multiple administrative
        tasks to perform. The timeout can be modified to suit local security policies.
    remediation: |
        If the currently configured timeout is larger than 15 minutes, edit the file listed in the audit section with
        visudo -f <PATH TO FILE>
         and modify the entry                  timestamp_timeout=
         to 15 minutes or less as per your site policy. The value is in minutes. This particular entry may appear on its own, or
        on the same line as                  env_reset
        . See the following two examples:               Defaults    env_reset, timestamp_timeout=15

        Defaults    timestamp_timeout=15
        Defaults    env_reset
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.6":
    title: '4.3.6 | Ensure access to the su command is restricted'
    section: 'Configure privilege escalation'
    description: |
        The              su
         command allows a user to run a command or shell as another user. The program has been superseded by              sudo
        , which allows for more granular control over privileged access. Normally, the              su
         command can be executed by any user. By uncommenting the              pamwheel.so
         statement in              /etc/pam.d/su
        , the              su
         command will only allow users in a specific groups to execute              su
        . This group should be empty to reinforce the use of              sudo
         for privileged access.
    remediation: |
        Create an empty group that will be specified for use of the                  su
         command.  The group should be named according to site policy.               Example: # groupadd sugroup

        Add the following line to the                  /etc/pam.d/su
         file, specifying the empty group:               auth required pam_wheel.so use_uid group=sugroup
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.1":
    title: '4.4.1 | Ensure custom authselect profile is used'
    section: 'Configure authselect'
    description: |
        A custom profile can be created by copying and customizing one of the default profiles. The default profiles include
        sssd, winbind, or the nis.  This profile can then be customized to follow site specific requirements. You can select a
        profile for the authselect utility for a specific host. The profile will be applied to every user logging into the host.
    remediation: |
        Run the following command to install authselect if needed # dnf install authselect
         Run the following command to create a custom authselect profile: # authselect create-profile <custom-profile name>
        <options>
         Example: # authselect create-profile custom-profile -b sssd --symlink-meta
         Run the following command to select a custom authselect profile: # authselect select custom/<CUSTOM PROFILE NAME>
        {with-<OPTIONS>}
         Example: # authselect select custom/custom-profile with-sudo with-faillock without-nullok
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_4.4.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.2":
    title: '4.4.2 | Ensure authselect includes with-faillock'
    section: 'Configure authselect'
    description: |
        The              pamfaillock.so
         module maintains a list of failed authentication attempts per user during a specified interval and locks the account in
        case there were more than the configured number of consecutive failed authentications this is defined by the
        deny
         parameter in the faillock configuration. It stores the failure records into peruser files in the tally directory.
    remediation: |
        Run the following commands to include the                  with-faillock
         option to the current authselect profile:
        # authselect enable-feature with-faillock
        # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.5.1":
    title: '4.5.1 | Ensure password creation requirements are configured'
    section: 'Configure PAM'
    description: |
        The pampwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a
        dictionary word, it is a certain length, contains a mix of characters e.g. alphabet, numeric, other and more. The
        following are definitions of the pampwquality.so options. tryfirstpass
          retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry3
          Allow 3 tries before sending back a failure.             minlen14
          password must be 14 characters or more             Either of the following can be used to enforce complex passwords
        minclass4
          provide at least four classes of characters for the new password             OR dcredit1
          provide at least one digit             ucredit1
          provide at least one uppercase character             ocredit1
          provide at least one special character             lcredit1
          provide at least one lowercase character             The settings shown above are one possible policy. Alter these
        values to conform to your own organizations password policies
    remediation: |
        Edit the file                  /etc/security/pwquality.conf
         and add or modify the following line for password length to conform to site policy               minlen = 14

        Edit the file                  /etc/security/pwquality.conf
         and add or modify the following line for password complexity to conform to site policy               minclass = 4
         OR
        dcredit = -1
        ucredit = -1
        ocredit = -1
        lcredit = -1
                       Run the following script to update the system-auth and password-auth files
        {
           #!/usr/bin/env bash

           for fn in system-auth password-auth; do
             file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$fn"
             if ! grep -Pq -- '^\h*password\h+requisite\h+pam_pwquality.so(\h+[^#\n\r]+)?\h+.*enforce_for_root\b.*$' "$file";
        then
               sed -ri 's/^\s*(password\s+requisite\s+pam_pwquality.so\s+)(.*)$/\1\2 enforce_for_root/' "$file"
             fi
             if grep -Pq -- '^\h*password\h+requisite\h+pam_pwquality.so(\h+[^#\n\r]+)?\h+retry=([4-9]|[1-9][0-9]+)\b.*$'
        "$file"; then
               sed -ri '/pwquality/s/retry=\S+/retry=3/' "$file"
             elif ! grep -Pq -- '^\h*password\h+requisite\h+pam_pwquality.so(\h+[^#\n\r]+)?\h+retry=\d+\b.*$' "$file"; then
               sed -ri 's/^\s*(password\s+requisite\s+pam_pwquality.so\s+)(.*)$/\1\2 retry=3/' "$file"
             fi
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.5.2":
    title: '4.5.2 | Ensure lockout for failed password attempts is configured'
    section: 'Configure PAM'
    description: |
        Lock out users after              n
         unsuccessful consecutive login attempts.           denyn
          Number of attempts before the account is locked             unlocktimen
          Time in seconds before the account is unlocked             Note
         The maximum configurable value for              unlocktime
         is              604800
    remediation: |
        Set password lockouts and unlock times to conform to site policy.                  deny
         should be greater than                  0
         and no greater than                  5
        .                  unlock_time
         should be                  0
         (never), or                  900
         seconds or greater.
        Edit                  /etc/security/faillock.conf
         and update or add the following lines:
        deny = 5
        unlock_time = 900
                       Impact:
        Use of                    unlock_time=0
         may allow an attacker to cause denial of service to legitimate users.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.5.3":
    title: '4.5.3 | Ensure password reuse is limited'
    section: 'Configure PAM'
    description: |
        The              /etc/security/opasswd
         file stores the users old passwords and can be checked to ensure that users are not recycling recent passwords.
        remember5  Number of old passwords to remember
    remediation: |
        Set remembered password history to conform to site policy.
        Run the following script to add or modify the                  pam_pwhistory.so
         and                  pam_unix.so
         lines to include the                  remember
         option:
        #!/usr/bin/env bash

        {
          file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/system-auth"
          if ! grep -Pq --
        '^\h*password\h+(requisite|required|sufficient)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?remember=([5-9]|[1-9][0-9]+)\b.*$'
        "$file"; then
            if grep -Pq --
        '^\h*password\h+(requisite|required|sufficient)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?remember=\d+\b.*$' "$file"; then
              sed -ri
        's/^\s*(password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so\s+([^#\n\r]+\s+)?)(remember=\S+\s*)(\s+.*)?$/\1
        remember=5 \5/' $file
            elif grep -Pq -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?.*$' "$file";
        then
              sed -ri '/^\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so/ s/$/ remember=5/' $file
            else
              sed -ri '/^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so/i password    required
        pam_pwhistory.so  remember=5 use_authtok' $file
            fi
          fi
          if ! grep -Pq --
        '^\h*password\h+(requisite|required|sufficient)\h+pam_unix\.so\h+([^#\n\r]+\h+)?remember=([5-9]|[1-9][0-9]+)\b.*$'
        "$file"; then
            if grep -Pq -- '^\h*password\h+(requisite|required|sufficient)\h+pam_unix\.so\h+([^#\n\r]+\h+)?remember=\d+\b.*$'
        "$file"; then
              sed -ri
        's/^\s*(password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+([^#\n\r]+\s+)?)(remember=\S+\s*)(\s+.*)?$/\1
        remember=5 \5/' $file
            else
              sed -ri '/^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so/ s/$/ remember=5/' $file
            fi
          fi
          authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.5.4":
    title: '4.5.4 | Ensure password hashing algorithm is SHA-512'
    section: 'Configure PAM'
    description: |
        A cryptographic hash function converts an arbitrarylength input into a fixed length output. Password hashing performs a
        oneway transformation of a password, turning the password into another string, called the hashed password.
    remediation: |
        Set password hashing algorithm to sha512.
        Edit                  /etc/libuser.conf
         and edit of add the following line:               crypt_style = sha512

        Edit                  /etc/login.defs
         and edit or add the following line:
        ENCRYPT_METHOD SHA512

        -OR-

        ENCRYPT_METHOD YESCRYPT

        Run the following script to configure                  pam_unix.so
         to use the sha512 hashing algorithm:
        #!/usr/bin/env bash

        {
           for fn in system-auth password-auth; do
             file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$fn"
             if ! grep -Pq -- '^\h*password\h+(requisite|required|sufficient)\h+pam_unix\.so(\h+[^#\n\r]+)?\h+sha512\b.*$'
        "$file"; then
               if grep -Pq --
        '^\h*password\h+(requisite|required|sufficient)\h+pam_unix\.so(\h+[^#\n\r]+)?\h+(md5|blowfish|bigcrypt|sha256|yescrypt)\b.*$'
        "$file"; then
                 sed -ri 's/(md5|blowfish|bigcrypt|sha256|yescrypt)/sha512/' "$file"
               else
                 sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix.so\s+)(.*)$/\1sha512 \3/' "$file"
               fi
             fi
           done
           authselect apply-changes
        }
                       Note:
         This only effects local users and passwords created after updating the files to use                  sha512
        . If it is determined that the password algorithm being used is not SHA-512, once it is changed, it is recommended that
        all user ID's be immediately expired and forced to change their passwords on next login.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.6.1.1":
    title: '4.6.1.1 | Ensure password expiration is 365 days or less'
    section: 'Set Shadow Password Suite Parameters'
    description: |
        The                PASSMAXDAYS
         parameter in                /etc/login.defs
         allows an administrator to force passwords to expire once they reach a defined age.  It is recommended that the
        PASSMAXDAYS
         parameter be set to less than or equal to 365 days.
    remediation: |
        Set the                    PASS_MAX_DAYS
         parameter to conform to site policy in                    /etc/login.defs
         :                 PASS_MAX_DAYS 365
         Modify user parameters for all users with a password set to match: # chage --maxdays 365 <user>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.6.1.2":
    title: '4.6.1.2 | Ensure minimum days between password changes is  configured'
    section: 'Set Shadow Password Suite Parameters'
    description: |
        The                PASSMINDAYS
         parameter in                /etc/login.defs
         allows an administrator to prevent users from changing their password until a minimum number of days have passed since
        the last time the user changed their password. It is recommended that                PASSMINDAYS
         parameter be set to 1 or more days.
    remediation: |
        Set the                    PASS_MIN_DAYS
          parameter to 1 in                    /etc/login.defs
        :                 PASS_MIN_DAYS 1
         Modify user parameters for all users with a password set to match: # chage --mindays 1 <user>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.6.1.3":
    title: '4.6.1.3 | Ensure password expiration warning days is 7 or more'
    section: 'Set Shadow Password Suite Parameters'
    description: |
        The                PASSWARNAGE
         parameter in                /etc/login.defs
          allows an administrator to notify users that their password will expire in a defined number of days. It is recommended
        that the                PASSWARNAGE
         parameter be set to 7 or more days.
    remediation: |
        Set the                    PASS_WARN_AGE
          parameter to 7 in                    /etc/login.defs
         :                 PASS_WARN_AGE 7
         Modify user parameters for all users with a password set to match: # chage --warndays 7 <user>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.6.1.4":
    title: '4.6.1.4 | Ensure inactive password lock is 30 days or less'
    section: 'Set Shadow Password Suite Parameters'
    description: |
        User accounts that have been inactive for over a given period of time can be automatically disabled. It is recommended
        that accounts that are inactive for 30 days after password expiration be disabled.
    remediation: |
        Run the following command to set the default password inactivity period to 30 days: # useradd -D -f 30
         Modify user parameters for all users with a password set to match: # chage --inactive 30 <user>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.6.1.5":
    title: '4.6.1.5 | Ensure all users last password change date is in the past - manual'
    section: 'Set Shadow Password Suite Parameters'
    description: |
        All users should have a password change date in the past.
    remediation: |
        Investigate any users with a password change date in the future and correct them.  Locking the account, expiring the
        password, or resetting the password manually may be appropriate.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.1.5', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.6.2":
    title: '4.6.2 | Ensure system accounts are secured - manual'
    section: 'User Accounts and Environment'
    description: |
        There are a number of accounts provided with most distributions that are used to manage applications and are not
        intended to provide an interactive shell. Furthermore, a user may add special accounts that are not intended to provide
        an interactive shell.
    remediation: |
        System accounts
        Set the shell for any accounts returned by the audit to                  nologin
        :               # usermod -s $(command -v nologin) <user>
         Disabled accounts Lock any non root accounts returned by the audit: # usermod -L <user>
         Large scale changes
        The following command will set all system accounts to                  nologin
        :               # awk -F: '($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && ($3<'"$(awk '/^\s*UID_MIN/{print $2}'
        /etc/login.defs)"' || $3 == 65534)) { print $1 }' /etc/passwd | while read user; do usermod -s $(command -v nologin)
        $user >/dev/null; done

        The following command will automatically lock all accounts that have their shell set to                  nologin
        :               # awk -F: '/nologin/ {print $1}' /etc/passwd | while read user; do usermod -L $user; done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.6.3":
    title: '4.6.3 | Ensure default user shell timeout is 900 seconds or less - manual'
    section: 'User Accounts and Environment'
    description: |
        TMOUT
         is an environmental setting that determines the timeout of a shell in seconds.
        TMOUT               n
          Sets the shell timeout to                n
         seconds.  A setting of                TMOUT0
         disables timeout.             readonly TMOUT Sets the TMOUT environmental variable as readonly, preventing unwanted
        modification during runtime. export TMOUT  exports the TMOUT variable System Wide Shell Configuration Files /etc/profile
          used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in
        the                .bashprofile
        , however this file is used to set an initial PATH or PS1 for all shell users of the system.
        is only executed for interactive                  login
         shells, or shells executed with the login parameter.
                           /etc/profile.d
                         /etc/profile
         will execute the scripts within                /etc/profile.d/.sh
        . It is recommended to place your configuration in a shell script within                /etc/profile.d
         to set your own system wide environmental variables.             /etc/bashrc
          System wide version of                .bashrc
        .  In Fedora derived distributions,                /etc/bashrc
         also invokes /etc/profile.d/.sh if                nonlogin
         shell, but redirects output to                /dev/null
         if                noninteractive.

        Is only executed for                  interactive
         shells or if                  BASHENV
         is set to                  /etc/bashrc
        .
    remediation: |
        Review                  /etc/bashrc
        ,                  /etc/profile
        , and all files ending in                  *.sh
         in the                  /etc/profile.d/
         directory and remove or edit all                  TMOUT=_n_
         entries to follow local site policy.                   TMOUT
         should not exceed 900 or be equal to                  0
        .
        Configure                  TMOUT
         in                  one
         of the following files:
        A file in the                    /etc/profile.d/
         directory ending in                    .sh
                                 /etc/profile /etc/bashrc TMOUT
         configuration examples:                 As multiple lines:
        TMOUT=900
        readonly TMOUT
        export TMOUT
                       As a single line: readonly TMOUT=900 ; export TMOUT
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.6.4":
    title: '4.6.4 | Ensure default group for the root account is GID 0'
    section: 'User Accounts and Environment'
    description: |
        The              usermod
         command can be used to specify which group the              root
         account belongs to. This affects permissions of files that are created by the              root
         account.
    remediation: |
        Run the following command to set the                  root
         account default group to GID                  0
         :               # usermod -g 0 root
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.6.5":
    title: '4.6.5 | Ensure default user umask is 027 or more restrictive'
    section: 'User Accounts and Environment'
    description: |
        The user filecreation mode mask              umask
         is use to determine the file permission for newly created directories and files. In Linux, the default permissions for
        any newly created directory is 0777              rwxrwxrwx
        , and for any newly created file it is 0666              rwrwrw
        . The              umask
         modifies the default Linux permissions by restricting masking these permissions. The              umask
         is not simply subtracted, but is processed bitwise. Bits set in the              umask
         are cleared in the resulting file mode.           umask
         can be set with either              octal
         or              Symbolic
         values           Octal
         Numeric Value  Represented by either three or four digits. ie                umask 0027
         or                umask 027
        .  If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting
        permissions for user, group, and world/other respectively.             Symbolic
         Value  Represented by a comma separated list for User                u
        , group                g
        , and world/other                o
        .  The permissions listed are not masked by                umask
        . ie a                umask
         set by                umask urwx,grx,o
         is the                Symbolic
         equivalent of the                Octal
                              umask 027
        .  This                umask
         would set a newly created directory with file mode                drwxrx
         and a newly created file with file mode                rwr
        .
        The default              umask
         can be set to use the              pamumask
         module or in a              System Wide Shell Configuration File
        .  The user creating the directories or files has the discretion of changing the permissions via the chmod command, or
        choosing a different default              umask
         by adding the              umask
         command into a              User Shell Configuration File
        ,               .bashprofile
         or              .bashrc
        , in their home directory.           Setting the default umask
        pamumask module

        will set the umask according to the system default in                    /etc/login.defs
         and user settings, solving the problem of different                    umask
         settings with different shells, display managers, remote sessions etc.                 umaskmask
         value in the                    /etc/login.defs
         file is interpreted as Octal
        Setting                    USERGROUPSENAB
         to yes in                    /etc/login.defs
         default

        will enable setting of the                        umask
         group bits to be the same as owner bits. examples 022  002, 077  007 for nonroot users, if the
        uid
         is the same as                        gid
        , and                        username
         is the same as the                        primary group name
                                       userdel will remove the users group if it contains no more members, and useradd will
        create by default a group with the name of the user

                           System Wide Shell Configuration File

                       /etc/profile
          used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in
        the                    .bashprofile
        , however this file is used to set an initial PATH or PS1 for all shell users of the system.
        is only executed for interactive                      login
         shells, or shells executed with the login parameter.
                                 /etc/profile.d
                             /etc/profile
         will execute the scripts within                    /etc/profile.d/.sh
        . It is recommended to place your configuration in a shell script within                    /etc/profile.d
         to set your own system wide environmental variables.                 /etc/bashrc
          System wide version of                    .bashrc
        .  In Fedora derived distributions,                    etc/bashrc
         also invokes /etc/profile.d/.sh if                    nonlogin
         shell, but redirects output to                    /dev/null
         if                    noninteractive.

        Is only executed for                      interactive
         shells or if                      BASHENV
         is set to                      /etc/bashrc
        .

                           User Shell Configuration Files /.bashprofile
          Is executed to configure your shell before the initial command prompt.                Is only read by login shells.
                           /.bashrc
          Is executed for interactive shells.                only read by a shell thats both interactive and nonlogin
    remediation: |
        Review /etc/bashrc, /etc/profile, and all files ending in *.sh in the /etc/profile.d/ directory and remove or edit all
        umask
         entries to follow local site policy. Any remaining entries should be:                  umask 027
        ,                  umask u=rwx,g=rx,o=
         or more restrictive.
        Configure                  umask
         in                  one
         of the following files:
        A file in the                    /etc/profile.d/
         directory ending in                    .sh
                                 /etc/profile /etc/bashrc Example:
        # vi /etc/profile.d/set_umask.sh

        umask 027

        Run the following command and remove or modify the                  umask
         of any returned files:               # grep -RPi
        '(^|^[^#]*)\s*umask\s+([0-7][0-7][01][0-7]\b|[0-7][0-7][0-7][0-6]\b|[0-7][01][0-7]\b|[0-7][0-7][0-6]\b|(u=[rwx]{0,3},)?(g=[rwx]{0,3},)?o=[rwx]+\b|(u=[rwx]{1,3},)?g=[^rx]{1,3}(,o=[rwx]{0,3})?\b)'
        /etc/login.defs /etc/profile* /etc/bashrc*
         Follow one of the following methods to set the default user umask:
        Edit                  /etc/login.defs
         and edit the                  UMASK
         and                  USERGROUPS_ENAB
         lines as follows:
        UMASK 027

        USERGROUPS_ENAB no

        Edit the files                  /etc/pam.d/password-auth
         and                   /etc/pam.d/system-auth
         and add or edit the following:               session     optional      pam_umask.so
         OR
         Configure umask in one of the following files:
        A file in the                    /etc/profile.d/
         directory ending in .sh                 /etc/profile /etc/bashrc Example: /etc/profile.d/set_umask.sh umask 027
         Note:
         this method only applies to bash and shell. If other shells are supported on the system, it is recommended that their
        configuration files also are checked.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.6.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.6.6":
    title: '4.6.6 | Ensure root password is set'
    section: 'User Accounts and Environment'
    description: |
        There are a number of methods to access the root account directly. Without a password set any user would be able to gain
        access and thus control over the entire system.
    remediation: |
        Set the                  root
         password with:               # passwd root
         Impact: If there are any automated processes that relies on access to the root account without authentication, they
        will fail after remediation.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_4.6.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "5.1.1.1":
    title: '5.1.1.1 | Ensure rsyslog is installed'
    section: 'Configure rsyslog'
    description: |
        The                rsyslog
         software is recommended in environments where                journald
         does not meet operation requirements.
    remediation: |
        Run the following command to install                    rsyslog
        :                 # dnf install rsyslog
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.1.2":
    title: '5.1.1.2 | Ensure rsyslog service is enabled'
    section: 'Configure rsyslog'
    description: |
        Once the                rsyslog
          package is installed, ensure that the service is enabled.
    remediation: |
        Run the following command to enable                    rsyslog
        :                 # systemctl --now enable rsyslog
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'

  "5.1.1.3":
    title: '5.1.1.3 | Ensure journald is configured to send logs to rsyslog'
    section: 'Configure rsyslog'
    description: |
        Data from                journald
         may be stored in volatile memory or persisted locally on the server.  Utilities exist to accept remote export of
        journald
         logs, however, use of the RSyslog service provides a consistent means of log collection and export.
    remediation: |
        Edit the                    /etc/systemd/journald.conf
         file and add the following line:                 ForwardToSyslog=yes
         Restart the service: # systemctl restart rsyslog
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.1.4":
    title: '5.1.1.4 | Ensure rsyslog default file permissions are configured'
    section: 'Configure rsyslog'
    description: |
        RSyslog will create logfiles that do not already exist on the system. This setting controls what permissions will be
        applied to these newly created files.
    remediation: |
        Edit either                    /etc/rsyslog.conf
         or a dedicated                    .conf
         file in                    /etc/rsyslog.d/
         and set                    $FileCreateMode
         to                    0640
         or more restrictive:                 $FileCreateMode 0640
         Restart the service: # systemctl restart rsyslog
         Impact:
        The systems global                      umask
         could override, but only making the file permissions stricter, what is configured in RSyslog with the
        FileCreateMode
         directive. RSyslog  also has its own                      $umask
         directive that can alter the intended file creation mode. In addition, consideration should be given to how
        FileCreateMode
         is used.
        Thus it is critical to ensure that the intended file creation mode is not overridden with less restrictive settings in
        /etc/rsyslog.conf
        ,                      /etc/rsyslog.d/*conf
         files and that                      FileCreateMode
         is set before any file is created.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.1.5":
    title: '5.1.1.5 | Ensure logging is configured - manual'
    section: 'Configure rsyslog'
    description: |
        The                /etc/rsyslog.conf
         and                /etc/rsyslog.d/.conf
         files specifies rules for logging and which files are to be used to log certain classes of messages.
    remediation: |
        Edit the following lines in the                    /etc/rsyslog.conf
         and                    /etc/rsyslog.d/*.conf
         files as appropriate for your environment.                 NOTE:
         The below configuration is shown for example purposes only. Due care should be given to how the organization wish to
        store log data.
        *.emerg                                  :omusrmsg:*
        auth,authpriv.*                          /var/log/secure
        mail.*                                  -/var/log/mail
        mail.info                               -/var/log/mail.info
        mail.warning                            -/var/log/mail.warn
        mail.err                                 /var/log/mail.err
        cron.*                                   /var/log/cron
        *.=warning;*.=err                       -/var/log/warn
        *.crit                                   /var/log/warn
        *.*;mail.none;news.none                 -/var/log/messages
        local0,local1.*                         -/var/log/localmessages
        local2,local3.*                         -/var/log/localmessages
        local4,local5.*                         -/var/log/localmessages
        local6,local7.*                         -/var/log/localmessages

        Run the following command to reload the                    rsyslogd
         configuration:                 # systemctl restart rsyslog
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.5', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.1.6":
    title: '5.1.1.6 | Ensure rsyslog is configured to send logs to a remote log host'
    section: 'Configure rsyslog'
    description: |
        RSyslog supports the ability to send log events it gathers to a remote log host or to receive messages from remote
        hosts, thus enabling centralized log management.
    remediation: |
        Edit the                    /etc/rsyslog.conf
         and                    /etc/rsyslog.d/*.conf
         files and add the following line (where                    loghost.example.com
         is the name of your central log host). The                    target
         directive may either be a fully qualified domain name or an IP address.
        *.* action(type="omfwd" target="192.168.2.100" port="514" protocol="tcp"
                   action.resumeRetryCount="100"
                   queue.type="LinkedList" queue.size="1000")

        Run the following command to reload the                    rsyslogd
         configuration:                 # systemctl restart rsyslog
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.1.7":
    title: '5.1.1.7 | Ensure rsyslog is not configured to receive logs from a remote client'
    section: 'Configure rsyslog'
    description: |
        RSyslog supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not
        receive data from other hosts.
    remediation: |
        Should there be any active log server configuration found in the auditing section, modify those files and remove the
        specific lines highlighted by the audit. Ensure none of the following entries are present in any of
        /etc/rsyslog.conf
         or                    /etc/rsyslog.d/*.conf
        .                 New format
        module(load="imtcp")
        input(type="imtcp" port="514")

        -                   OR
        -                 Old format
        $ModLoad imtcp
        $InputTCPServerRun
                         Restart the service: # systemctl restart rsyslog
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.1.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.1.1":
    title: '5.1.2.1.1 | Ensure systemd-journal-remote is installed'
    section: 'Ensure journald is configured to send logs to a remote log host'
    description: |
        Journald via                  systemdjournalremote
         supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus
        enabling centralized log management.
    remediation: |
        Run the following command to install                      systemd-journal-remote
        :                   # dnf install systemd-journal-remote
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.1.2":
    title: '5.1.2.1.2 | Ensure systemd-journal-remote is configured - manual'
    section: 'Ensure journald is configured to send logs to a remote log host'
    description: |
        Journald via                  systemdjournalremote
         supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus
        enabling centralized log management.
    remediation: |
        Edit the                      /etc/systemd/journal-upload.conf
         file and ensure the following lines are set per your environment:
        URL=192.168.50.42
        ServerKeyFile=/etc/ssl/private/journal-upload.pem
        ServerCertificateFile=/etc/ssl/certs/journal-upload.pem
        TrustedCertificateFile=/etc/ssl/ca/trusted.pem
                           Restart the service: # systemctl restart systemd-journal-upload
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.2.1.3":
    title: '5.1.2.1.3 | Ensure systemd-journal-remote is enabled'
    section: 'Ensure journald is configured to send logs to a remote log host'
    description: |
        Journald via                  systemdjournalremote
         supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus
        enabling centralized log management.
    remediation: |
        Run the following command to enable                      systemd-journal-remote
        :                   # systemctl --now enable systemd-journal-upload.service
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'

  "5.1.2.1.4":
    title: '5.1.2.1.4 | Ensure journald is not configured to receive logs from a remote client'
    section: 'Ensure journald is configured to send logs to a remote log host'
    description: |
        Journald supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not
        receive data from other hosts. NOTE
        The same package,                    systemdjournalremote
        , is used for both sending logs to remote hosts and receiving incoming logs.
        With regards to receiving logs, there are two services                    systemdjournalremote.socket
         and                    systemdjournalremote.service
        .
    remediation: |
        Run the following command to disable                      systemd-journal-remote.socket
        :                   # systemctl --now mask systemd-journal-remote.socket
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.2.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "5.1.2.2":
    title: '5.1.2.2 | Ensure journald service is enabled'
    section: 'Configure journald'
    description: |
        Ensure that the                systemdjournald
         service is enabled to allow capturing of logging events.
    remediation: |
        By default the                    systemd-journald
         service does not have an                    [Install]
         section and thus cannot be enabled / disabled. It is meant to be referenced as                    Requires
         or                    Wants
         by other unit files. As such, if the status of                    systemd-journald
         is not                    static
        , investigate why.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == static'

  "5.1.2.3":
    title: '5.1.2.3 | Ensure journald is configured to compress large log files'
    section: 'Configure journald'
    description: |
        The journald system includes the capability of compressing overly large files to avoid filling up the system with logs
        or making the logs unmanageably large.
    remediation: |
        Edit the                    /etc/systemd/journald.conf
         file and add the following line:                 Compress=yes
         Restart the service: # systemctl restart systemd-journald.service
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.2.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.4":
    title: '5.1.2.4 | Ensure journald is configured to write logfiles to persistent disk'
    section: 'Configure journald'
    description: |
        Data from journald may be stored in volatile memory or persisted locally on the server.  Logs in memory will be lost
        upon a system reboot.  By persisting logs to local disk on the server they are protected from loss due to a reboot.
    remediation: |
        Edit the                    /etc/systemd/journald.conf
         file and add the following line:                 Storage=persistent
         Restart the service: # systemctl restart systemd-journald.service
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.2.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.5":
    title: '5.1.2.5 | Ensure journald is not configured to send logs to rsyslog'
    section: 'Configure journald'
    description: |
        Data from                journald
         should be kept in the confines of the service and not forwarded on to other services.
    remediation: |
        Edit the                    /etc/systemd/journald.conf
         file and ensure that                    ForwardToSyslog=yes
         is removed.                 Restart the service: # systemctl restart systemd-journald.service
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.6":
    title: '5.1.2.6 | Ensure journald log rotation is configured per site policy - manual'
    section: 'Configure journald'
    description: |
        Journald includes the capability of rotating log files regularly to avoid filling up the system with logs or making the
        logs unmanageably large. The file                /etc/systemd/journald.conf
         is the configuration file used to specify how logs generated by Journald should be rotated.
    remediation: |
        Review                    /etc/systemd/journald.conf
         and verify logs are rotated according to site policy. The settings should be carefully understood as there are specific
        edge cases and prioritization of parameters.                 The specific parameters for log rotation are:
        SystemMaxUse=
        SystemKeepFree=
        RuntimeMaxUse=
        RuntimeKeepFree=
        MaxFileSec=
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.6', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.2.7":
    title: '5.1.2.7 | Ensure journald default file permissions configured - manual'
    section: 'Configure journald'
    description: |
        Journald will create logfiles that do not already exist on the system. This setting controls what permissions will be
        applied to these newly created files.
    remediation: |
        If the default configuration is not appropriate for the site specific requirements, copy
        /usr/lib/tmpfiles.d/systemd.conf
         to                    /etc/tmpfiles.d/systemd.conf
         and modify as required. Requirements is either                    0640
         or site policy if that is less restrictive.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.7', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.3":
    title: '5.1.3 | Ensure all logfiles have appropriate permissions and ownership - manual'
    section: 'Configure Logging'
    description: |
        Log files contain information from many services on the local system, or in the event of a centralized log server,
        others systems logs as well. In general log files are found in              /var/log/
        , although application can be configured to store logs elsewhere. Should your application store its logs in another
        location, ensure to run the same test on that location.
    remediation: |
        Run the following script to update permissions and ownership on files in                  /var/log
        .               Although the script is not destructive, ensure that the output of the audit procedure is captured in the
        event that the remediation causes issues.
        #!/usr/bin/env bash

        {
           echo -e "\n- Start remediation - logfiles have appropriate permissions and ownership"
           UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
           find /var/log -type f | while read -r fname; do
              bname="$(basename "$fname")"
              fugname="$(stat -Lc "%U %G" "$fname")"
              funame="$(awk '{print $1}' <<< "$fugname")"
              fugroup="$(awk '{print $2}' <<< "$fugname")"
              fuid="$(stat -Lc "%u" "$fname")"
              fmode="$(stat -Lc "%a" "$fname")"
              case "$bname" in
                 lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp-*)
                    ! grep -Pq -- '^\h*[0,2,4,6][0,2,4,6][0,4]\h*$' <<< "$fmode" && echo -e "- changing mode on \"$fname\"" &&
        chmod ug-x,o-wx "$fname"
                    ! grep -Pq -- '^\h*root\h*$' <<< "$funame" && echo -e "- changing owner on \"$fname\"" && chown root
        "$fname"
                    ! grep -Pq -- '^\h*(utmp|root)\h*$' <<< "$fugroup" && echo -e "- changing group on \"$fname\"" && chgrp root
        "$fname"
                    ;;
                 secure | auth.log | syslog | messages)
                    ! grep -Pq -- '^\h*[0,2,4,6][0,4]0\h*$' <<< "$fmode" && echo -e "- changing mode on \"$fname\"" && chmod
        u-x,g-wx,o-rwx "$fname"
                    ! grep -Pq -- '^\h*(syslog|root)\h*$' <<< "$funame" && echo -e "- changing owner on \"$fname\"" && chown
        root "$fname"
                    ! grep -Pq -- '^\h*(adm|root)\h*$' <<< "$fugroup" && echo -e "- changing group on \"$fname\"" && chgrp root
        "$fname"
                    ;;
                 SSSD | sssd)
                    ! grep -Pq -- '^\h*[0,2,4,6][0,2,4,6]0\h*$' <<< "$fmode" && echo -e "- changing mode on \"$fname\"" && chmod
        ug-x,o-rwx "$fname"
                    ! grep -Piq -- '^\h*(SSSD|root)\h*$' <<< "$funame" && echo -e "- changing owner on \"$fname\"" && chown root
        "$fname"
                    ! grep -Piq -- '^\h*(SSSD|root)\h*$' <<< "$fugroup" && echo -e "- changing group on \"$fname\"" && chgrp
        root "$fname"
                    ;;
                 gdm | gdm3)
                    ! grep -Pq -- '^\h*[0,2,4,6][0,2,4,6]0\h*$' <<< "$fmode" && echo -e "- changing mode on \"$fname\"" && chmod
        ug-x,o-rwx
                    ! grep -Pq -- '^\h*root\h*$' <<< "$funame" && echo -e "- changing owner on \"$fname\"" && chown root
        "$fname"
                    ! grep -Pq -- '^\h*(gdm3?|root)\h*$' <<< "$fugroup" && echo -e "- changing group on \"$fname\"" && chgrp
        root "$fname"
                    ;;
                 *.journal | *.journal~)
                    ! grep -Pq -- '^\h*[0,2,4,6][0,4]0\h*$' <<< "$fmode" && echo -e "- changing mode on \"$fname\"" && chmod
        u-x,g-wx,o-rwx "$fname"
                    ! grep -Pq -- '^\h*root\h*$' <<< "$funame" && echo -e "- changing owner on \"$fname\"" && chown root
        "$fname"
                    ! grep -Pq -- '^\h*(systemd-journal|root)\h*$' <<< "$fugroup" && echo -e "- changing group on \"$fname\"" &&
        chgrp root "$fname"
                    ;;
                 *)
                    ! grep -Pq -- '^\h*[0,2,4,6][0,4]0\h*$' <<< "$fmode" && echo -e "- changing mode on \"$fname\"" && chmod
        u-x,g-wx,o-rwx "$fname"
                    if [ "$fuid" -ge "$UID_MIN" ] || ! grep -Pq -- '(adm|root|'"$(id -gn "$funame")"')' <<< "$fugroup"; then
                       if [ -n "$(awk -v grp="$fugroup" -F: '$1==grp {print $4}' /etc/group)" ] || ! grep -Pq '(syslog|root)'
        <<< "$funame"; then
                          [ "$fuid" -ge "$UID_MIN" ] && echo -e "- changing owner on \"$fname\"" && chown root "$fname"
                          ! grep -Pq -- '^\h*(adm|root)\h*$' <<< "$fugroup" && echo -e "- changing group on \"$fname\"" && chgrp
        root "$fname"
                       fi
                    fi
                    ;;
              esac
           done
           echo -e "- End remediation - logfiles have appropriate permissions and ownership\n"
        }
                       Note:
         You may also need to change the configuration for your logging software or services for any logs that had incorrect
        permissions.               If there are services that log to other locations, ensure that those log files have the
        appropriate permissions.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.1.1":
    title: '5.2.1.1 | Ensure auditd is installed'
    section: 'Ensure auditing is enabled'
    description: |
        auditd is the userspace component to the Linux Auditing System. Its responsible for writing audit records to the disk
    remediation: |
        Run the following command to Install auditd # dnf install audit
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.1.2":
    title: '5.2.1.2 | Ensure auditing for processes that start prior to auditd is enabled - manual'
    section: 'Ensure auditing is enabled'
    description: |
        Configure                grub2
         so that processes that are capable of being audited can be audited even if they start up prior to                auditd
         startup.
    remediation: |
        Run the following command to update the                    grub2
         configuration with                    audit=1
        :                 # grubby --update-kernel ALL --args 'audit=1'
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == audit=1'

  "5.2.1.3":
    title: '5.2.1.3 | Ensure audit backlog limit is sufficient - manual'
    section: 'Ensure auditing is enabled'
    description: |
        The backlog limit has a default setting of 64
    remediation: |
        Run the following command to add                    audit_backlog_limit=<BACKLOG SIZE>
         to GRUB_CMDLINE_LINUX:                 # grubby --update-kernel ALL --args 'audit_backlog_limit=<BACKLOG SIZE>'
         Example: # grubby --update-kernel ALL --args 'audit_backlog_limit=8192'
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == audit_backlog_limit=\d+'

  "5.2.1.4":
    title: '5.2.1.4 | Ensure auditd service is enabled'
    section: 'Ensure auditing is enabled'
    description: |
        Turn on the                auditd
         daemon to record system events.
    remediation: |
        Run the following command to enable                    auditd
        :                 # systemctl --now enable auditd
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'

  "5.2.2.1":
    title: '5.2.2.1 | Ensure audit log storage size is configured'
    section: 'Configure Data Retention'
    description: |
        Configure the maximum size of the audit log file. Once the log reaches the maximum size, it will be rotated and a new
        log file will be started.
    remediation: |
        Set the following parameter in                    /etc/audit/auditd.conf
          in accordance with site policy:                 max_log_file = <MB>
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.2.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.2.2":
    title: '5.2.2.2 | Ensure audit logs are not automatically deleted'
    section: 'Configure Data Retention'
    description: |
        The                maxlogfileaction
          setting determines how to handle the audit log file reaching the max file size. A value of                keeplogs
          will rotate the logs but never delete old logs.
    remediation: |
        Set the following parameter in                    /etc/audit/auditd.conf:
                                 max_log_file_action = keep_logs
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.2.3":
    title: '5.2.2.3 | Ensure system is disabled when audit logs are full'
    section: 'Configure Data Retention'
    description: |
        The                auditd
         daemon can be configured to halt the system when the audit logs are full.             The adminspaceleftaction
        parameter tells the system what action to take when the system has detected that it is low on disk space. Valid values
        are ignore, syslog, suspend, single, and halt. ignore
        , the audit daemon does nothing               Syslog
        , the audit daemon will issue a warning to syslog               Suspend
        , the audit daemon will stop writing records to the disk               single
        , the audit daemon will put the computer system in single user mode               halt
        , the audit daemon will shut down the system
    remediation: |
        Set the following parameters in                    /etc/audit/auditd.conf:

        space_left_action = email
        action_mail_acct = root

        set                    admin_space_left_action
         to either                    halt
                                    or
                                    single
         in                    /etc/audit/auditd.conf
        .                 Example: admin_space_left_action = halt
         Impact:
        If the                      admin_space_left_action
         parameter is set to                      halt
         the audit daemon will shutdown the system when the disk partition containing the audit logs becomes full.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.2.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.3.1":
    title: '5.2.3.1 | Ensure changes to system administration scope sudoers is collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor scope changes for system administrators. If the system has been properly configured to force system
        administrators to log in as themselves first and then use the                sudo
         command to execute privileged commands, it is possible to monitor changes in scope. The file
        /etc/sudoers
        , or files in                /etc/sudoers.d
        , will be written to when the files or related attributes have changed. The audit records will be tagged with the
        identifier scope.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor scope changes for system administrators.                 Example:
        # printf "
        -w /etc/sudoers -p wa -k scope
        -w /etc/sudoers.d -p wa -k scope
        " >> /etc/audit/rules.d/50-scope.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/sudoers\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/sudoers.d\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.2":
    title: '5.2.3.2 | Ensure actions as another user are always logged - manual'
    section: 'Configure auditd rules'
    description: |
        sudo
         provides users with temporary elevated privileges to perform operations, either as the superuser or another user.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor elevated privileges.                 64 Bit systems Example:
        # printf "
        -a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k user_emulation
        -a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k user_emulation
        " >> /etc/audit/rules.d/50-user_emulation.rules
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:always,exit|exit,always)\h+-F\h*arch=b32\h*(?!(?:\2\3))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?!(?:\1\3))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?!(?:\1\2))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:always,exit|exit,always)\h+-F\h*arch=b64\h*(?!(?:\2\3))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?!(?:\1\3))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?!(?:\1\2))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.3":
    title: '5.2.3.3 | Ensure events that modify the sudo log file are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor the                sudo
         log file. If the system has been properly configured to disable the use of the                su
         command and force all administrators to have to log in first and then use                sudo
         to execute privileged commands, then all administrator commands will be logged to                /var/log/sudo.log
         . Any time a command is executed, an audit event will be triggered as the                /var/log/sudo.log
         file will be opened for write and the executed administration command will be written to the log.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify the sudo log file.                 Example:
        # {
        SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? .*//' -e 's/"//g')
        [ -n "${SUDO_LOG_FILE}" ] && printf "
        -w ${SUDO_LOG_FILE} -p wa -k sudo_log_file
        " >> /etc/audit/rules.d/50-sudo.rules || printf "ERROR: Variable 'SUDO_LOG_FILE_ESCAPED' is unset.\n"
        }
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.3.4":
    title: '5.2.3.4 | Ensure events that modify date and time information are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Capture events where the system date and/or time has been modified. The parameters in this section are set to determine
        if the adjtimex
          tune kernel clock               settimeofday
          set time using                  timeval
         and                  timezone
         structures               stime
          using seconds since 1/1/1970               clocksettime
          allows for the setting of several internal clocks and timers               system calls have been executed. Further,
        ensure to write an audit record to the configured audit log file upon exit, tagging the records with a unique identifier
        such as timechange.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify date and time information.                 64 Bit
        systems Example:
        # printf "
        -a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -k time-change
        -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change
        " >> /etc/audit/rules.d/50-time-change.rules
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        . In addition, add                    stime
         to the system call audit. Example:                 -a always,exit -F arch=b32 -S
        adjtimex,settimeofday,clock_settime,stime -k time-change
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.4', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/localtime\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -F key=time-change'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -F key=time-change'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime,stime -k time-change'

  "5.2.3.5":
    title: '5.2.3.5 | Ensure events that modify the systems network environment are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Record changes to network environment files or system calls. The below parameters monitors the following system calls,
        and write an audit event on system call exit sethostname
          set the systems host name               setdomainname
          set the systems domain name               The files being monitored are /etc/issue
         and                  /etc/issue.net
          messages displayed prelogin               /etc/hosts
          file containing host names and associated IP addresses               /etc/sysconfig/network
          additional information that is valid to all network interfaces               /etc/sysconfig/networkscripts/
          directory containing network interface scripts and configurations files
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify the system's network environment.                 64
        Bit systems Example:
        # printf "
        -a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale
        -a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale
        -w /etc/issue -p wa -k system-locale
        -w /etc/issue.net -p wa -k system-locale
        -w /etc/hosts -p wa -k system-locale
        -w /etc/sysconfig/network -p wa -k system-locale
        -w /etc/sysconfig/network-scripts/ -p wa -k system-locale
        " >> /etc/audit/rules.d/50-system_local.rules
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.5', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/issue\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/issue\.net\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/hosts\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/sysconfig\/network\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/sysconfig\/network-scripts\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale'

  "5.2.3.6":
    title: '5.2.3.6 | Ensure use of privileged commands are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor privileged programs, those that have the                setuid
         and/or                setgid
         bit set on execution, to determine if unprivileged users are running these commands.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor the use of privileged commands.                 Example:
        # {
          UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
          AUDIT_RULE_FILE="/etc/audit/rules.d/50-privileged.rules"
          NEW_DATA=()
          for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv
        "noexec|nosuid" | awk '{print $1}'); do
            readarray -t DATA < <(find "${PARTITION}" -xdev -perm /6000 -type f | awk -v UID_MIN=${UID_MIN} '{print "-a
        always,exit -F path=" $1 " -F perm=x -F auid>="UID_MIN" -F auid!=unset -k privileged" }')
              for ENTRY in "${DATA[@]}"; do
                NEW_DATA+=("${ENTRY}")
              done
          done
          readarray &> /dev/null -t OLD_DATA < "${AUDIT_RULE_FILE}"
          COMBINED_DATA=( "${OLD_DATA[@]}" "${NEW_DATA[@]}" )
          printf '%s\n' "${COMBINED_DATA[@]}" | sort -u > "${AUDIT_RULE_FILE}"
        }
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         Special mount points
        If there are any special mount points that are not visible by default from just scanning                    /
        , change the                    PARTITION
         variable to the appropriate partition and re-run the remediation.                 Impact:
        Both the audit and remediation section of this recommendation will traverse all mounted file systems that is not mounted
        with either                      noexec
         or                      nosuid
         mount options. If there are large file systems without these mount options,                      such traversal will be
        significantly detrimental to the performance of the system.
                                    Before running either the audit or remediation section, inspect the output of the following
        command to determine exactly which file systems will be traversed: # findmnt -n -l -k -it $(awk '/nodev/ { print $2 }'
        /proc/filesystems | paste -sd,) | grep -Pv "noexec|nosuid"

        To exclude a particular file system due to adverse performance impacts, update the audit and remediation sections by
        adding a sufficiently unique string to the                      grep
         statement. The above command can be used to test the modified exclusions.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.6', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.3.7":
    title: '5.2.3.7 | Ensure unsuccessful file access attempts are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor for unsuccessful attempts to access files. The following parameters are associated with system calls that
        control files
        creation                   creat

        opening                   open
         ,                  openat

        truncation                   truncate
         ,                  ftruncate
                              An audit log record will only be written if all of the following criteria is met for the user when
        trying to access a file a nonprivileged user auidUIDMIN is not a Daemon event auid4294967295/unset/1 if the system call
        returned EACCES permission denied or EPERM some other permanent error associated with the specific system call
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor unsuccessful file access attempts.                 64 Bit systems
        Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=${UID_MIN} -F auid!=unset -k
        access
        -a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=${UID_MIN} -F auid!=unset -k
        access
        -a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=${UID_MIN} -F auid!=unset -k
        access
        -a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=${UID_MIN} -F auid!=unset -k
        access
        " >> /etc/audit/rules.d/50-access.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.7', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?open((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?truncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?ftruncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?creat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?openat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?open((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?truncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?ftruncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?creat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?openat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?open((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?truncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?ftruncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?creat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?openat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?open((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?truncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?ftruncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?creat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?openat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.8":
    title: '5.2.3.8 | Ensure events that modify usergroup information are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Record events affecting the modification of user or group information, including that of passwords and old passwords if
        in use. /etc/group
          system groups               /etc/passwd
          system users               /etc/gshadow
          encrypted password for each group               /etc/shadow
          system user passwords               /etc/security/opasswd
          storage of old passwords if the relevant PAM module is in use               The parameters in this section will watch
        the files to see if they have been opened for write or have had attribute changes e.g. permissions and tag them with the
        identifier identity in the audit log file.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify user/group information.                 Example:
        # printf "
        -w /etc/group -p wa -k identity
        -w /etc/passwd -p wa -k identity
        -w /etc/gshadow -p wa -k identity
        -w /etc/shadow -p wa -k identity
        -w /etc/security/opasswd -p wa -k identity
        " >> /etc/audit/rules.d/50-identity.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.8', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/group\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/passwd\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/gshadow\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/shadow\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/security\/opasswd\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.9":
    title: '5.2.3.9 | Ensure discretionary access control permission modification events are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for
        system calls that affect file permissions and attributes. The following commands and system calls effect the
        permissions, ownership and various attributes of files. chmod fchmod fchmodat chown fchown fchownat lchown setxattr
        lsetxattr fsetxattr removexattr lremovexattr fremovexattr In all cases, an audit record will only be written for
        nonsystem user ids and will ignore Daemon events. All audit records will be tagged with the identifier permmod.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor discretionary access control permission modification events.
        64 Bit systems Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod
        -a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod
        -a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod
        -a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod
        -a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F
        auid!=unset -F key=perm_mod
        -a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F
        auid!=unset -F key=perm_mod
        " >> /etc/audit/rules.d/50-perm_mod.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.9', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod'

  "5.2.3.10":
    title: '5.2.3.10 | Ensure successful file system mounts are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor the use of the                mount
         system call. The                mount
         and                umount
          system call controls the mounting and unmounting of file systems. The parameters below configure the system to create
        an audit record when the mount system call is used by a nonprivileged user
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful file system mounts.                 64 Bit systems Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts
        -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts
        " >> /etc/audit/rules.d/50-mounts.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.10', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts'

  "5.2.3.11":
    title: '5.2.3.11 | Ensure session initiation information is collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor session initiation events. The parameters in this section track changes to the files associated with session
        events. /var/run/utmp
          tracks all currently logged in users.               /var/log/wtmp
          file tracks logins, logouts, shutdown, and reboot events.               /var/log/btmp
          keeps track of failed login attempts and can be read by entering the command                  /usr/bin/last f
        /var/log/btmp
        .               All audit records will be tagged with the identifier session.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor session initiation information.                 Example:
        # printf "
        -w /var/run/utmp -p wa -k session
        -w /var/log/wtmp -p wa -k session
        -w /var/log/btmp -p wa -k session
        " >> /etc/audit/rules.d/50-session.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.11', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/run\/utmp\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/run\/utmp\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/log\/wtmp\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.12":
    title: '5.2.3.12 | Ensure login and logout events are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor login and logout events. The parameters below track changes to files associated with login/logout events.
        /var/log/lastlog
          maintain records of the last time a user successfully logged in.               /var/run/faillock
          directory maintains records of login failures via the                  pamfaillock
         module.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor login and logout events.                 Example:
        # printf "
        -w /var/log/lastlog -p wa -k logins
        -w /var/run/faillock -p wa -k logins
        " >> /etc/audit/rules.d/50-login.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.12', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/log\/lastlog\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/run\/faillock\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.13":
    title: '5.2.3.13 | Ensure file deletion events by users are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This
        configuration statement sets up monitoring for unlink
          remove a file               unlinkat
          remove a file attribute               rename
          rename a file               renameat
         rename a file attribute
        system calls and tags them with the identifier delete.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor file deletion events by users.                 64 Bit systems Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete
        -a always,exit -F arch=b32 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete
        " >> /etc/audit/rules.d/50-delete.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.13', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S unlink,unlinkat,rename,renameat -F auid>=1000 -F auid!=unset -k delete'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S unlink,unlinkat,rename,renameat -F auid>=1000 -F auid!=unset -k delete'

  "5.2.3.14":
    title: '5.2.3.14 | Ensure events that modify the systems Mandatory Access Controls are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor SELinux, an implementation of mandatory access controls. The parameters below monitor any write access potential
        additional, deletion or modification of files in the directory or attribute changes to the                /etc/selinux/
         and                /usr/share/selinux/
         directories.             Note
         If a different Mandatory Access Control method is used, changes to the corresponding directories should be audited.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify the system's Mandatory Access Controls.
        Example:
        # printf "
        -w /etc/selinux -p wa -k MAC-policy
        -w /usr/share/selinux -p wa -k MAC-policy
        " >> /etc/audit/rules.d/50-MAC-policy.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.14', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/selinux\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/usr/share\/selinux\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.15":
    title: '5.2.3.15 | Ensure successful and unsuccessful attempts to use the chcon command are recorded - manual'
    section: 'Configure auditd rules'
    description: |
        The operating system must generate audit records for successful/unsuccessful uses of the                chcon
         command.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful and unsuccessful attempts to use the                    chcon
         command.                 64 Bit systems Example:
        # {
         UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
         [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng
        " >> /etc/audit/rules.d/50-perm_chng.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.15', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:exit,always|always,exit)\h+(?:-S\h+all\h+)?(?:-F\h+path=\/usr\/bin\/chcon(?:\/)?)\h+(?!(?:\2\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\2))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.16":
    title: '5.2.3.16 | Ensure successful and unsuccessful attempts to use the setfacl command are recorded - manual'
    section: 'Configure auditd rules'
    description: |
        The operating system must generate audit records for successful/unsuccessful uses of the                setfacl
         command
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful and unsuccessful attempts to use the
        setfacl
         command.                 64 Bit systems Example:
        # {
         UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
         [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng
        " >> /etc/audit/rules.d/50-perm_chng.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.16', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:exit,always|always,exit)\h+(?:-S\h+all\h+)?(?:-F\h+path=\/usr\/bin\/setfacl(?:\/)?)\h+(?!(?:\2\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\2))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.17":
    title: '5.2.3.17 | Ensure successful and unsuccessful attempts to use the chacl command are recorded - manual'
    section: 'Configure auditd rules'
    description: |
        The operating system must generate audit records for successful/unsuccessful uses of the                chacl
         command
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful and unsuccessful attempts to use the                    chacl
         command.                 64 Bit systems Example:
        # {
         UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
         [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng
        " >> /etc/audit/rules.d/50-perm_chng.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.17', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:exit,always|always,exit)\h+(?:-S\h+all\h+)?(?:-F\h+path=\/usr\/bin\/chacl(?:\/)?)\h+(?!(?:\2\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\2))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.18":
    title: '5.2.3.18 | Ensure successful and unsuccessful attempts to use the usermod command are recorded - manual'
    section: 'Configure auditd rules'
    description: |
        The operating system must generate audit records for successful/unsuccessful uses of the                usermod
         command.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful and unsuccessful attempts to use the
        usermod
         command.                 64 Bit systems Example:
        # {
         UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
         [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k usermod
        " >> /etc/audit/rules.d/50-usermod.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.18', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:exit,always|always,exit)\h+(?:-S\h+all\h+)?(?:-F\h+path=\/usr\/sbin\/usermod(?:\/)?)\h+(?!(?:\2\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\2))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.19":
    title: '5.2.3.19 | Ensure kernel module loading unloading and modification is collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor the loading and unloading of kernel modules. All the loading / listing / dependency checking of modules is done
        by                kmod
         via symbolic links.             The following system calls control loading and unloading of modules initmodule
          load a module               finitmodule
          load a module used when the overhead of using cryptographically signed modules to determine the authenticity of a
        module can be avoided               deletemodule
          delete a module               createmodule
          create a loadable module entry               querymodule
          query the kernel for various bits pertaining to modules
        Any execution of the loading and unloading module programs and system calls will trigger an audit record with an
        identifier of                modules
        .
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor kernel module modification.                 64 Bit systems Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b64 -S init_module,finit_module,delete_module,create_module,query_module -F auid>=${UID_MIN} -F
        auid!=unset -k kernel_modules
        -a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k kernel_modules
        " >> /etc/audit/rules.d/50-kernel_modules.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.19', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S create_module,init_module,delete_module,query_module,finit_module -F auid>=1000 -F auid!=-1 -F key=kernel_modules'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S create_module,init_module,delete_module,query_module,finit_module -F auid>=1000 -F auid!=-1 -F key=kernel_modules'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+(-S\h+all\h+)?-F\h+path=\/usr\/bin\/kmod\/?\h+-F\h+(perm=x|x=perm)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.20":
    title: '5.2.3.20 | Ensure the audit configuration is immutable - manual'
    section: 'Configure auditd rules'
    description: |
        Set system audit so that audit rules cannot be modified with                auditctl
         . Setting the flag e 2 forces audit to be put in immutable mode. Audit changes can only be made on system reboot.
        Note
         This setting will require the system to be rebooted to update the active                auditd
         configuration settings.
    remediation: |
        Edit or create the file                    /etc/audit/rules.d/99-finalize.rules
         and add the line                    -e 2
         at the end of the file:                 Example: # printf -- "-e 2" >> /etc/audit/rules.d/99-finalize.rules
         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.20', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\s*-e\s+2\b'

  "5.2.3.21":
    title: '5.2.3.21 | Ensure the running and on disk configuration is the same - manual'
    section: 'Configure auditd rules'
    description: |
        The Audit system have both on disk and running configuration. It is possible for these configuration settings to differ.
        Note
         Due to the limitations of                augenrules
         and                auditctl
        , it is not absolutely guaranteed that loading the rule sets via                augenrules load
         will result in all rules being loaded or even that the user will be informed if there was a problem loading the rules.
    remediation: |
        If the rules are not aligned across all three () areas, run the following command to merge and load all rules: #
        augenrules --load
         Check if reboot is required. if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then echo "Reboot required to load
        rules"; fi
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_5.2.3.21', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.1":
    title: '5.2.4.1 | Ensure audit log files are mode 0640 or less permissive - manual'
    section: 'Configure auditd file access'
    description: |
        Audit log files contain information about the system and system activity.
    remediation: |
        Run the following command to remove more permissive mode than                    0640
         from audit log files:                 # [ -f /etc/audit/auditd.conf ] && find "$(dirname $(awk -F "=" '/^\s*log_file/
        {print $2}' /etc/audit/auditd.conf | xargs))" -type f \( ! -perm 600 -a ! -perm 0400 -a ! -perm 0200 -a ! -perm 0000 -a
        ! -perm 0640 -a ! -perm 0440 -a ! -perm 0040 \) -exec chmod u-x,g-wx,o-rwx {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.1', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.2":
    title: '5.2.4.2 | Ensure only authorized users own audit log files - manual'
    section: 'Configure auditd file access'
    description: |
        Audit log files contain information about the system and system activity.
    remediation: |
        Run the following command to configure the audit log files to be owned by the                    root
         user:                 # [ -f /etc/audit/auditd.conf ] && find "$(dirname $(awk -F "=" '/^\s*log_file/ {print $2}'
        /etc/audit/auditd.conf | xargs))" -type f ! -user root -exec chown root {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.2', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.3":
    title: '5.2.4.3 | Ensure only authorized groups are assigned ownership of audit log files - manual'
    section: 'Configure auditd file access'
    description: |
        Audit log files contain information about the system and system activity.
    remediation: |
        Run the following command to configure the audit log files to be owned by                    adm
         group:                 # find $(dirname $(awk -F"=" '/^\s*log_file\s*=\s*/ {print $2}' /etc/audit/auditd.conf | xargs))
        -type f \( ! -group adm -a ! -group root \) -exec chgrp adm {} +

        Run the following command to configure the audit log files to be owned by the                    adm
         group:                 # chgrp adm /var/log/audit/

        Run the following command to set the                    log_group
         parameter in the audit configuration file to                    log_group = adm
        :                 # sed -ri 's/^\s*#?\s*log_group\s*=\s*\S+(\s*#.*)?.*$/log_group = adm\1/' /etc/audit/auditd.conf
         Run the following command to restart the audit daemon to reload the configuration file: # systemctl restart auditd
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.4":
    title: '5.2.4.4 | Ensure the audit log directory is 0750 or more restrictive - manual'
    section: 'Configure auditd file access'
    description: |
        The audit log directory contains audit log files.
    remediation: |
        Run the following command to configure the audit log directory to have a mode of "0750" or less permissive: # chmod
        g-w,o-rwx "$(dirname $( awk -F"=" '/^\s*log_file\s*=\s*/ {print $2}' /etc/audit/auditd.conf))"
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.4', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.5":
    title: '5.2.4.5 | Ensure audit configuration files are 640 or more restrictive'
    section: 'Configure auditd file access'
    description: |
        Audit configuration files control auditd and what events are audited.
    remediation: |
        Run the following command to remove more permissive mode than 0640 from the audit configuration files: # find
        /etc/audit/ -type f \( -name '*.conf' -o -name '*.rules' \) -exec chmod u-x,g-wx,o-rwx {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.6":
    title: '5.2.4.6 | Ensure audit configuration files are owned by root'
    section: 'Configure auditd file access'
    description: |
        Audit configuration files control auditd and what events are audited.
    remediation: |
        Run the following command to change ownership to                    root
         user:                 # find /etc/audit/ -type f \( -name '*.conf' -o -name '*.rules' \) ! -user root -exec chown root
        {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.7":
    title: '5.2.4.7 | Ensure audit configuration files belong to group root'
    section: 'Configure auditd file access'
    description: |
        Audit configuration files control auditd and what events are audited.
    remediation: |
        Run the following command to change group to                    root
        :                 # find /etc/audit/ -type f \( -name '*.conf' -o -name '*.rules' \) ! -group root -exec chgrp root {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.8":
    title: '5.2.4.8 | Ensure audit tools are 755 or more restrictive'
    section: 'Configure auditd file access'
    description: |
        Audit tools include, but are not limited to, vendorprovided and open source audit tools needed to successfully view and
        manipulate audit information system activity and records. Audit tools include custom queries and report generators.
    remediation: |
        Run the following command to remove more permissive mode from the audit tools: # chmod go-w /sbin/auditctl
        /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.8', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.9":
    title: '5.2.4.9 | Ensure audit tools are owned by root'
    section: 'Configure auditd file access'
    description: |
        Audit tools include, but are not limited to, vendorprovided and open source audit tools needed to successfully view and
        manipulate audit information system activity and records. Audit tools include custom queries and report generators.
    remediation: |
        Run the following command to change the owner of the audit tools to the                    root
         user:                 # chown root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd
        /sbin/augenrules
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.9', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.10":
    title: '5.2.4.10 | Ensure audit tools belong to group root'
    section: 'Configure auditd file access'
    description: |
        Audit tools include, but are not limited to, vendorprovided and open source audit tools needed to successfully view and
        manipulate audit information system activity and records. Audit tools include custom queries and report generators.
    remediation: |
        Run the following command to remove more permissive mode from the audit tools: # chmod go-w /sbin/auditctl
        /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules

        Run the following command to change owner and group of the audit tools to                    root
         user and group:                 # chown root:root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace
        /sbin/auditd /sbin/augenrules
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.10', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.3":
    title: '5.3 | Ensure logrotate is configured - manual'
    section: 'Logging and Auditing'
    description: |
        The system includes the capability of rotating log files regularly to avoid filling up the system with logs or making
        the logs unmanageably large. The file            /etc/logrotate.d/syslog
         is the configuration file used to rotate log files created by            syslog
         or            rsyslog
        .
    remediation: |
        Edit                /etc/logrotate.conf
         and                /etc/logrotate.d/*
         to ensure logs are rotated according to site policy.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1.1":
    title: '6.1.1 | Ensure permissions on etcpasswd are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/passwd
         file contains user account information that is used by many system utilities and therefore must be readable for these
        utilities to operate.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/passwd
        :
        # chmod u-x,go-wx /etc/passwd
        # chown root:root /etc/passwd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.2":
    title: '6.1.2 | Ensure permissions on etcpasswd are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/passwd
         file contains user account information that is used by many system utilities and therefore must be readable for these
        utilities to operate.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/passwd
        :
        # chmod u-x,go-wx /etc/passwd
        # chown root:root /etc/passwd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.3":
    title: '6.1.3 | Ensure permissions on etcpasswd- are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/passwd
         file contains backup user account information.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/passwd-
        :
        # chmod u-x,go-wx /etc/passwd-
        # chown root:root /etc/passwd-
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.3', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.4":
    title: '6.1.4 | Ensure permissions on etcgroup are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/group
         file contains a list of all the valid groups defined in the system. The command below allows read/write access for root
        and read access for everyone else.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/group
        :
        # chmod u-x,go-wx /etc/group
        # chown root:root /etc/group
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.5":
    title: '6.1.5 | Ensure permissions on etcgroup- are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/group
         file contains a backup list of all the valid groups defined in the system.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/group-
        :
        # chmod u-x,go-wx /etc/group-
        # chown root:root /etc/group-
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.6":
    title: '6.1.6 | Ensure permissions on etcshadow are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/shadow
         file is used to store the information about user accounts that is critical to the security of those accounts, such as
        the hashed password and other security information.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/shadow
        :
        # chown root:root /etc/shadow
        # chmod 0000 /etc/shadow
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.7":
    title: '6.1.7 | Ensure permissions on etcshadow- are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/shadow
         file is used to store backup information about user accounts that is critical to the security of those accounts, such
        as the hashed password and other security information.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/shadow-
        :
        # chown root:root /etc/shadow-
        # chmod 0000 /etc/shadow-
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.8":
    title: '6.1.8 | Ensure permissions on etcgshadow are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/gshadow
         file is used to store the information about groups that is critical to the security of those accounts, such as the
        hashed password and other security information.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/gshadow
        :
        # chown root:root /etc/gshadow
        # chmod 0000 /etc/gshadow
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.8', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.9":
    title: '6.1.9 | Ensure permissions on etcgshadow- are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/gshadow
         file is used to store backup information about groups that is critical to the security of those accounts, such as the
        hashed password and other security information.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/gshadow-
        :
        # chown root:root /etc/gshadow-
        # chmod 0000 /etc/gshadow-
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.9', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.10":
    title: '6.1.10 | Audit system file permissions - manual'
    section: 'System File Permissions'
    description: |
        The RPM package manager has a number of useful options. One of these, the              V
          for RPM option, can be used to verify that system packages are correctly installed. The              V
          option can be used to verify a particular package or to verify all system packages. If no output is returned, the
        package is installed correctly. The following table describes the meaning of output from the verify option
        Code   Meaning
        S      File size differs.
        M      File mode differs includes permissions and file type.
        5      The MD5 checksum differs.
        D      The major and minor version numbers differ on a device file.
        L      A mismatch occurs in a link.
        U      The file ownership differs.
        G      The file group owner differs.
        T      The file time mtime differs.

        The              rpm qf
         command can be used to determine which package a particular file belongs to. For example, the following commands
        determines which package the              /bin/bash
         file belongs to
         rpm qf /bin/bash
        bash4.1.229.el6.x8664
         rpm S /bin/bash
        bash /bin/bash

        To verify the settings for the package that controls the              /bin/bash
         file, run the following
         rpm V bash4.1.229.el6.x8664
        .M.......    /bin/bash
         rpm verify bash
        5 c /etc/bash.bashrc

        Note that you can feed the output of the              rpm qf
          command to the              rpm V
          command
         rpm V rpm qf /etc/passwd
        .M...... c /etc/passwd
        S.5....T c /etc/printcap
    remediation: |
        Correct any discrepancies found and rerun the audit until output is clean or risk is mitigated or accepted.
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_6.1.10', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1.11":
    title: '6.1.11 | Ensure world writable files and directories are secured - manual'
    section: 'System File Permissions'
    description: |
        World writable files are the least secure. Data in worldwritable files can be modified and compromised by any user on
        the system. World writable files may also indicate an incorrectly written script or program that could potentially be
        the cause of a larger compromise to the systems integrity. See the              chmod2
         man page for more information.           Setting the sticky bit on world writable directories prevents users from
        deleting or renaming files in that directory that are not owned by them.
    remediation: |
        World Writable Files:

        It is recommended that write access is removed from                        other
         with the command (                        chmod o-w <filename>
         ), but always consult relevant vendor documentation to avoid breaking any application dependencies on a given file.

        World Writable Directories:

        Set the sticky bit on all world writable directories with the command (                        chmod a+t
        <directory_name>
         )
                                 Run the following script to: Remove other write permission from any world writable files Add
        the sticky bit to all world writable directories
        #!/usr/bin/env bash

        {
           l_smask='01000'
           a_path=(); a_arr=() # Initialize array
           a_path=(! -path "/run/user/*" -a ! -path "/proc/*" -a ! -path "*/containerd/*" -a ! -path "*/kubelet/pods/*" -a !
        -path "/sys/kernel/security/apparmor/*" -a ! -path "/snap/*" -a ! -path "/sys/fs/cgroup/memory/*")
           while read -r l_bfs; do
              a_path+=( -a ! -path ""$l_bfs"/*")
           done < <(findmnt -Dkerno fstype,target | awk '$1 ~ /^\s*(nfs|proc|smb)/ {print $2}')
           # Populate array with files
           while IFS= read -r -d $'\0' l_file; do
              [ -e "$l_file" ] && a_arr+=("$(stat -Lc '%n^%#a' "$l_file")")
           done < <(find / \( "${a_path[@]}" \) \( -type f -o -type d \) -perm -0002 -print0 2>/dev/null)
           while IFS="^" read -r l_fname l_mode; do # Test files in the array
              if [ -f "$l_fname" ]; then # Remove excess permissions from WW files
                 echo -e " - File: \"$l_fname\" is mode: \"$l_mode\"\n  - removing write permission on \"$l_fname\" from
        \"other\""
                 chmod o-w "$l_fname"
              fi
              if [ -d "$l_fname" ]; then
                 if [ ! $(( $l_mode & $l_smask )) -gt 0 ]; then # Add sticky bit
                    echo -e " - Directory: \"$l_fname\" is mode: \"$l_mode\" and doesn't have the sticky bit set\n  - Adding the
        sticky bit"
                    chmod a+t "$l_fname"
                 fi
              fi
           done < <(printf '%s\n' "${a_arr[@]}")
           unset a_path; unset a_arr # Remove array
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.11', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1.12":
    title: '6.1.12 | Ensure no unowned or ungrouped files or directories exist - manual'
    section: 'System File Permissions'
    description: |
        Administrators may delete users or groups from the system and neglect to remove all files and/or directories owned by
        those users or groups.
    remediation: |
        Remove or set ownership and group ownership of these files and/or directories to an active user on the system as
        appropriate.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.12', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1.13":
    title: '6.1.13 | Ensure SUID and SGID files are reviewed - manual'
    section: 'System File Permissions'
    description: |
        The owner of a file can set the files permissions to run with the owners or groups permissions, even if the user running
        the program is not the owner or a member of the group. The most common reason for a SUID or SGID program is to enable
        users to perform functions such as changing their password that require root privileges.
    remediation: |
        Ensure that no rogue SUID or SGID programs have been introduced into the system. Review the files returned by the action
        in the Audit section and confirm the integrity of these binaries.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_6.1.13', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.1":
    title: '6.2.1 | Ensure accounts in etcpasswd use shadowed passwords'
    section: 'Local User and Group Settings'
    description: |
        Local accounts can use shadowed passwords.  With shadowed passwords, the passwords are saved in shadow password file,
        /etc/shadow
        , encrypted by a salted oneway hash. Accounts with a shadowed password have an              x
         in the second field in              /etc/passwd
        .
    remediation: |
        Run the following command to set accounts to use shadowed passwords: # sed -e 's/^\([a-zA-Z0-9_]*\):[^:]*:/\1:x:/' -i
        /etc/passwd
         Investigate to determine if the account is logged in and what it is being used for, to determine if it needs to be
        forced off.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.1', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.2.2":
    title: '6.2.2 | Ensure etcshadow password fields are not empty'
    section: 'Local User and Group Settings'
    description: |
        An account with an empty password field means that anybody may log in as that user without providing a password.
    remediation: |
        If any accounts in the                  /etc/shadow
         file do not have a password, run the following command to lock the account until it can be determined why it does not
        have a password:               # passwd -l <username>
         Also, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be
        forced off.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.2', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "6.2.3":
    title: '6.2.3 | Ensure all groups in etcpasswd exist in etcgroup - manual'
    section: 'Local User and Group Settings'
    description: |
        Over time, system administration errors and changes can lead to groups being defined in              /etc/passwd
         but not in              /etc/group
         .
    remediation: |
        Analyze the output of the Audit step above and perform the appropriate action to correct any discrepancies found.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.3', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.4":
    title: '6.2.4 | Ensure no duplicate UIDs exist'
    section: 'Local User and Group Settings'
    description: |
        Although the              useradd
         program will not let you create a duplicate User ID UID, it is possible for an administrator to manually edit the
        /etc/passwd
         file and change the UID field.
    remediation: |
        Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to
        determine which UID they are supposed to belong to.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.4', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.2.5":
    title: '6.2.5 | Ensure no duplicate GIDs exist'
    section: 'Local User and Group Settings'
    description: |
        Although the              groupadd
         program will not let you create a duplicate Group ID GID, it is possible for an administrator to manually edit the
        /etc/group
         file and change the GID field.
    remediation: |
        Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to
        determine which group they are supposed to belong to.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.5', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.2.6":
    title: '6.2.6 | Ensure no duplicate user names exist'
    section: 'Local User and Group Settings'
    description: |
        Although the              useradd
         program will not let you create a duplicate user name, it is possible for an administrator to manually edit the
        /etc/passwd
         file and change the username.
    remediation: |
        Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically
        reflect the change as long as the users have unique UIDs.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.6', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.2.7":
    title: '6.2.7 | Ensure no duplicate group names exist'
    section: 'Local User and Group Settings'
    description: |
        Although the              groupadd
         program will not let you create a duplicate group name, it is possible for an administrator to manually edit the
        /etc/group
         file and change the group name.
    remediation: |
        Based on the results of the audit script, establish unique names for the user groups. File group ownerships will
        automatically reflect the change as long as the groups have unique GIDs.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.7', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.2.8":
    title: '6.2.8 | Ensure root PATH Integrity - manual'
    section: 'Local User and Group Settings'
    description: |
        The              root
         user can execute any command on the system and could be fooled into executing programs unintentionally if the
        PATH
         is not set correctly.
    remediation: |
        Correct or justify any items discovered in the Audit step.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.8', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.9":
    title: '6.2.9 | Ensure root is the only UID 0 account'
    section: 'Local User and Group Settings'
    description: |
        Any account with UID 0 has superuser privileges on the system.
    remediation: |
        Remove any users other than                  root
          with UID                  0
          or assign them a new UID if appropriate.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.9', 'cis_amazon_linux_2023_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.2.10":
    title: '6.2.10 | Ensure local interactive user home directories are configured - manual'
    section: 'Local User and Group Settings'
    description: |
        The user home directory is space defined for the particular user to set local environment variables and to store
        personal files.  While the system administrator can establish secure permissions for users home directories, the users
        can easily override these. Users can be defined in              /etc/passwd
         without a home directory or with a home directory that does not actually exist.
    remediation: |
        If a local interactive users' home directory is undefined and/or doesn't exist, follow local site policy and perform one
        of the following: Lock the user account Remove the user from the system
        create a directory for the user.  If undefined, edit                    /etc/passwd
         and add the absolute path to the directory to the last field of the user.                 Run the following script to:
        Remove excessive permissions from local interactive users home directories Update the home directory's owner
        #!/usr/bin/env bash

        {
           l_output2=""
           l_valid_shells="^($( awk -F\/ '$NF != "nologin" {print}' /etc/shells | sed -rn '/^\//{s,/,\\\\/,g;p}' | paste -s -d
        '|' - ))$"
           unset a_uarr && a_uarr=() # Clear and initialize array
           while read -r l_epu l_eph; do # Populate array with users and user home location
              a_uarr+=("$l_epu $l_eph")
           done <<< "$(awk -v pat="$l_valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd)"
           l_asize="${#a_uarr[@]}" # Here if we want to look at number of users before proceeding
           [ "$l_asize " -gt "10000" ] && echo -e "\n  ** INFO **\n  - \"$l_asize\" Local interactive users found on the
        system\n  - This may be a long running process\n"
           while read -r l_user l_home; do
              if [ -d "$l_home" ]; then
                 l_mask='0027'
                 l_max="$( printf '%o' $(( 0777 & ~$l_mask)) )"
                 while read -r l_own l_mode; do
                    if [ "$l_user" != "$l_own" ]; then
                       l_output2="$l_output2\n  - User: \"$l_user\" Home \"$l_home\" is owned by: \"$l_own\"\n  -  changing
        ownership to: \"$l_user\"\n"
                       chown "$l_user" "$l_home"
                    fi
                    if [ $(( $l_mode & $l_mask )) -gt 0 ]; then
                       l_output2="$l_output2\n  - User: \"$l_user\" Home \"$l_home\" is mode: \"$l_mode\" should be mode:
        \"$l_max\" or more restrictive\n  -  removing excess permissions\n"
                       chmod g-w,o-rwx "$l_home"
                    fi
                 done <<< "$(stat -Lc '%U %#a' "$l_home")"
              else
                 l_output2="$l_output2\n  - User: \"$l_user\" Home \"$l_home\" Doesn't exist\n  -  Please create a home in
        accordance with local site policy"
              fi
           done <<< "$(printf '%s\n' "${a_uarr[@]}")"
           if [ -z "$l_output2" ]; then # If l_output2 is empty, we pass
              echo -e " - No modification needed to local interactive users home directories"
           else
              echo -e "\n$l_output2"
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.10', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.11":
    title: '6.2.11 | Ensure local interactive user dot files access is configured - manual'
    section: 'Local User and Group Settings'
    description: |
        While the system administrator can establish secure permissions for users dot files, the users can easily override
        these. .forward
         file specifies an email address to forward the users mail to.             .rhost
         file provides the remote authentication database for the rcp, rlogin, and rsh commands and the rcmd function. These
        files bypass the standard passwordbased user authentication mechanism. They specify remote hosts and users that are
        considered trusted i.e. are allowed to access the local system without supplying a password             .netrc
         file contains data for logging into a remote host or passing authentication to an API.             .bashhistory
         file keeps track of the users last 500 commands.
    remediation: |
        Making global modifications to users' files without alerting the user community can result in unexpected outages and
        unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions
        and determine the action to be taken in accordance with site policy. The following script will:
        remove excessive permissions on                    dot
         files within interactive users' home directories
        change ownership of                    dot
         files within interactive users' home directories to the user
        change group ownership of                    dot
         files within interactive users' home directories to the user's primary group
        list                    .forward
         and                    .rhost
         files to be investigated and manually deleted
        #!/usr/bin/env bash

        {
           l_valid_shells="^($( awk -F\/ '$NF != "nologin" {print}' /etc/shells | sed -rn '/^\//{s,/,\\\\/,g;p}' | paste -s -d
        '|' - ))$"
           unset a_uarr && a_uarr=() # Clear and initialize array
           while read -r l_epu l_eph; do # Populate array with users and user home location
              [[ -n "$l_epu" && -n "$l_eph" ]] && a_uarr+=("$l_epu $l_eph")
           done <<< "$(awk -v pat="$l_valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd)"
           l_asize="${#a_uarr[@]}" # Here if we want to look at number of users before proceeding
           l_maxsize="1000" # Maximum number of local interactive users before warning (Default 1,000)
           [ "$l_asize " -gt "$l_maxsize" ] && echo -e "\n  ** INFO **\n  - \"$l_asize\" Local interactive users found on the
        system\n  - This may be a long running check\n"
           file_access_fix()
           {
              l_facout2=""
              l_max="$( printf '%o' $(( 0777 & ~$l_mask)) )"
              if [ $(( $l_mode & $l_mask )) -gt 0 ]; then
                 echo -e "  - File: \"$l_hdfile\" is mode: \"$l_mode\" and should be mode: \"$l_max\" or more restrictive\n   -
        Changing to mode \"$l_max\""
                 chmod "$l_chp" "$l_hdfile"
              fi
              if [[ ! "$l_owner" =~ ($l_user) ]]; then
                 echo -e "  - File: \"$l_hdfile\" owned by: \"$l_owner\" and should be owned by \"${l_user//|/ or }\"\n   -
        Changing ownership to \"$l_user\""
                 chown "$l_user" "$l_hdfile"
              fi
              if [[ ! "$l_gowner" =~ ($l_group) ]]; then
                 echo -e "  - File: \"$l_hdfile\" group owned by: \"$l_gowner\" and should be group owned by \"${l_group//|/ or
        }\"\n   - Changing group ownership to \"$l_group\""
                 chgrp "$l_group" "$l_hdfile"
              fi
           }
           while read -r l_user l_home; do
              if [ -d "$l_home" ]; then
                 echo -e "\n - Checking user: \"$l_user\" home directory: \"$l_home\""
                 l_group="$(id -gn "$l_user" | xargs)"
                 l_group="${l_group// /|}"
                 while IFS= read -r -d $'\0' l_hdfile; do
                    while read -r l_mode l_owner l_gowner; do
                       case "$(basename "$l_hdfile")" in
                          .forward | .rhost )
                             echo -e "  - File: \"$l_hdfile\" exists\n   - Please investigate and manually delete \"$l_hdfile\""
                          ;;
                          .netrc )
                             l_mask='0177'
                             l_chp="u-x,go-rwx"
                             file_access_fix ;;
                          .bash_history )
                             l_mask='0177'
                             l_chp="u-x,go-rwx"
                             file_access_fix ;;
                          * )
                             l_mask='0133'
                             l_chp="u-x,go-wx"
                             file_access_fix ;;
                          esac
                    done <<< "$(stat -Lc '%#a %U %G' "$l_hdfile")"
                 done < <(find "$l_home" -xdev -type f -name '.*' -print0)
              fi
           done <<< "$(printf '%s\n' "${a_uarr[@]}")"
           unset a_uarr # Remove array
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.11', 'cis_amazon_linux_2023_benchmark']
    enabled: false
    properties:
      match: all
      rules:
