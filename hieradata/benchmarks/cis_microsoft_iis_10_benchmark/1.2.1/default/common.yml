---

inspec_rules:
  "1.1":
    title: '1.1 | L1 Ensure Web content is on non-system partition - manual'
    section: 'Basic Configurations'
    description: |
        Web resources published through IIS are mapped via Virtual Directories to physical locations on disk. It is recommended
        to map all Virtual Directories to a nonsystem disk volume.
    remediation: |
        Browse to web content in                  C:\inetpub\wwwroot\

        Copy or cut content onto a dedicated and restricted web folder on a non-system drive such as
        D:\webroot\
                              Change mappings for any applications or Virtual Directories to reflect the new location
        To change the mapping for the application named                app1
         which resides under the Default Web Site, open IIS Manager:             Expand the server node Expand Sites Expand
        Default Web Site
        Click on                  app1
                              In the Actions pane, select Basic Settings
        In the Physical path text box, put the new location of the application,                  D:\wwwroot\app1
         in the example above               Impact: Once the configuration is changed all content from the root drive to the new
        drive including ACLs and empty directories will need to copied.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.1', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.2":
    title: '1.2 | L1 Ensure Host headers are on all sites'
    section: 'Basic Configurations'
    description: |
        Host headers provide the ability to host multiple websites on the same IP address and port. It is recommended that host
        headers be configured for all sites. Note
         Wildcard host headers are now supported.
    remediation: |
        Obtain a listing of all sites by using the following                appcmd.exe
         command:             Enter the following command in AppCmd.exe to configure the host header:
        %systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.applicationHost/sites /"[name='<website
        name>'].bindings.[protocol='http',bindingInformation='*:80:<host header>'].bindingInformation:"*:80:<host header>""
        /commit:apphost
         OR Enter the following command in PowerShell to configure the host header: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter 'system.applicationHost/sites/site[@name='<website
        name>']/bindings/binding[@protocol='http' and @bindingInformation='*:80:']' -name 'bindingInformation' -value
        '*:80:<host header value>'
         OR Perform the following in IIS Manager to configure host headers for the Default Web Site: Open IIS Manager In the
        Connections pane expand the Sites node and select Default Web Site In the Actions pane click Bindings In the Site
        Bindings dialog box, select the binding for which host headers are going to be configured, Port 80 in this example Click
        Edit
        Under host name, enter the sites FQDN, such as                  <www.examplesite.com>
                              Click OK, then Close Note:
         Requiring a host header may impair site functionality for HTTP/1.0 clients.             Impact: If a wildcard DNS entry
        exists and a wildcard host header is used, it may be serving data to more domains than intended.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.2', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "1.3":
    title: '1.3 | L1 Ensure Directory browsing is set to Disabled'
    section: 'Basic Configurations'
    description: |
        Directory browsing allows the contents of a directory to be displayed upon request from a web client. If directory
        browsing is enabled for a directory in Internet Information Services, users receive a page that lists the contents of
        the directory when the following two conditions are met No specific file is requested in the URL The Default Documents
        feature is disabled in IIS, or if it is enabled, IIS is unable to locate a file in the directory that matches a name
        specified in the IIS default document list Note
         If directory browsing is enabled an exception to this recommendation, make sure that it is only enabled on the
        particular directory or directories that need to be shared.
    remediation: |
        Directory Browsing can be set by using the UI, running                appcmd.exe
         commands, by editing configuration files directly, or by writing WMI scripts. To disable directory browsing at the
        server level using an                appcmd.exe
         command:             Enter the following command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd set
        config /section:directoryBrowse /enabled:false
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -Filter
        system.webserver/directorybrowse -PSPath iis:\ -Name Enabled  -Value False
         Impact: Users will not be able to see the contents of directories.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.3', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq false'

  "1.4":
    title: '1.4 | L1 Ensure application pool identity is configured for all application pools'
    section: 'Basic Configurations'
    description: |
        Application Pool Identities are the actual users/authorities that will run the worker process             w3wp.exe
        . Assigning the correct user authority will help ensure that applications can function properly, while not giving overly
        permissive permissions on the system. These identities can further be used in ACLs to protect system content. It is
        recommended that each Application Pool run under a unique identity.         IIS has additional builtin least privilege
        identities intended for use by Application Pools. It is recommended that the default Application Pool Identity be
        changed to a least privilege principle other than Network Service. Furthermore, it is recommended that all application
        pool identities be assigned a unique least privilege principal. To achieve isolation in IIS, application pools can be
        run as separate identities. IIS can be configured to automatically use the application pool identity if no anonymous
        user account is configured for a Web site. This can greatly reduce the number of accounts needed for Web sites and make
        management of the accounts easier. It is recommended the Application Pool Identity be set as the Anonymous User
        Identity.
        The name of the Application Pool account corresponds to the name of the Application Pool. Application Pool Identities
        were introduced in Windows Server 2008 SP2. It is recommended that Application Pools be set to run as
        ApplicationPoolIdentity
         unless there is an underlying reason that the application pool needs to run as a specified end user account. One
        example where this is needed is for web farms using Kerberos authentication.
    remediation: |
        The default Application Pool identity may be set for an application using the IIS Manager GUI, using
        AppCmd.exe
         commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the
        following to change the default identity to the built-in                ApplicationPoolIdentity
         in the IIS Manager GUI:             Open the IIS Manager GUI In the connections pane, expand the server node and click
        Application Pools
        On the Application Pools page, select the                  DefaultAppPool
        , and then click Advanced Settings in the Actions pane
        For the Identity property, click the                  '...'
         button to open the Application Pool Identity dialog box
        Select the Built-in account option choose                  ApplicationPoolIdentity
         from the list, or input a unique application user created for this purpose               Restart IIS
        To change the                ApplicationPool
         identity to the built-in                ApplicationPoolIdentity
         using AppCmd.exe, run the following from a command prompt:             Enter the following command in AppCmd.exe to
        configure %systemroot%\system32\inetsrv\appcmd set config /section:applicationPools /[name='<apppool
        name>'].processModel.identityType:ApplicationPoolIdentity
         OR
        To change the                ApplicationPool
         identity to the built-in                ApplicationPoolIdentity
         using PowerShell:             Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter
        'system.applicationHost/applicationPools/add[@name='<apppool name>']/processModel' -name 'identityType' -value
        'ApplicationPoolIdentity'

        The example code above will set just the                DefaultAppPool
        . Run this command for each configured Application Pool. Additionally,                ApplicationPoolIdentity
         can be made the default for all Application Pools by using the Set Application Pool Defaults action on the Application
        Pools node.             If using a custom defined Windows user such as a dedicated service account, that user will need
        to be a member of the IIS_IUSRS group. The IIS_IUSRS group has access to all the necessary file and system resources so
        that an account, when added to this group, can seamlessly act as an application pool identity. Impact: If Application
        Pool Identities are not set properly to users/authorities applications may not function properly.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.4', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ApplicationPoolIdentity'

  "1.5":
    title: '1.5 | L1 Ensure unique application pools is set for sites'
    section: 'Basic Configurations'
    description: |
        Application Pool Identities allows Application Pools to be run under unique accounts without the need to create and
        manage local or domain accounts. It is recommended that all Sites run under unique, dedicated Application Pools.
    remediation: |
        The following appcmd.exe command will set the application pool for a given application:
        %systemroot%\system32\inetsrv\appcmd set app '<website name>/' /applicationpool:<apppool name>
         The output of this command will be similar to the following: APP object "Default Web Site/" changed
        (applicationPool:DefaultAppPool) Run the above command to ensure a unique application pool is assigned for each site
        listed OR Enter the following command in PowerShell to configure: Set-ItemProperty -Path 'IIS:\Sites\<website name>'
        -Name applicationPool -Value <apppool name>
         OR Open IIS Manager Open the Sites node underneath the machine node Select the Site to be changed In the Actions pane,
        select Basic Settings Click the Select… box next to the Application Pool text box Select the desired Application Pool
        Once selected, click OK Impact: All sites will need to be run under unique dedicated Application Pools.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 1'

  "1.6":
    title: '1.6 | L1 Ensure application pool identity is configured for anonymous user identity'
    section: 'Basic Configurations'
    description: |
        To achieve isolation in IIS, application pools can be run as separate identities. IIS can be configured to automatically
        use the application pool identity if no anonymous user account is configured for a web site. This can greatly reduce the
        number of accounts needed for Web sites and make management of the accounts easier. It is recommended the Application
        Pool Identity be set as the Anonymous User Identity.
    remediation: |
        The Anonymous User Identity can be set to Application Pool Identity by using the IIS Manager GUI, using
        AppCmd.exe
         commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the
        following to set the username attribute of the                anonymousAuthentication
         node in the IIS Manager GUI:             Open the IIS Manager GUI and navigate to the desired server, site, or
        application In Features View, find and double-click the Authentication icon Select the Anonymous Authentication option
        and in the Actions pane select Edit... Choose Application pool identity in the modal window and then press the OK button
        OR
        To use AppCmd.exe to configure                anonymousAuthentication
         at the server level, the command would look like this:             %systemroot%\system32\inetsrv\appcmd set config
        -section:anonymousAuthentication /username:"" --password
         OR Enter the following command in PowerShell to configure: Set-ItemProperty -Path IIS:\AppPools\<apppool name> -Name
        passAnonymousToken -Value True
         Impact: N/A
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "1.7":
    title: '1.7 | L1 Ensure WebDav feature is disabled - manual'
    section: 'Basic Configurations'
    description: |
        WebDAV is an extension to the HTTP protocol which allows clients to create, move, and delete files and resources on the
        web server. Note
         The WebDAV feature must be enabled for this functionality to be available in IIS.
    remediation: |
        To disable this feature using PowerShell, enter the following command: Uninstall-WindowsFeature Web-DAV-Publishing
         Verify that Success is True Impact: The WebDav feature will not be available in IIS.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "2.1":
    title: '2.1 | L1 Ensure global authorization rule is set to restrict access - manual'
    section: 'Configure Authentication and Authorization'
    description: |
        IIS introduced URL Authorization, which allows the addition of Authorization rules to the actual URL, instead of the
        underlying file system resource, as a way to protect it. Authorization rules can be configured at the server, web site,
        folder including Virtual Directories, or file level. The native URL Authorization module applies to all requests,
        whether they are .NET managed or other types of files e.g., static files or ASP files. It is recommended that URL
        Authorization be configured to only grant access to the necessary security principals.
    remediation: |
        To configure URL Authorization at the server level using command line utilities: Enter the following command in
        AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd set config
        -section:system.webServer/security/authorization /-"[users='*',roles='',verbs='']"
         %systemroot%\system32\inetsrv\appcmd set config  -section:system.webServer/security/authorization
        /+"[accessType='Allow',roles='Administrators']"
         OR Enter the following command in PowerShell to configure: Remove-WebConfigurationProperty  -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/security/authorization" -name "." -AtElement
        @{users='*';roles='';verbs=''}
         Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/security/authorization" -name
        "." -value @{accessType='Allow';roles='Administrators'}
         OR To configure URL Authorization at the server level using IIS Manager: Connect to Internet Information Services (IIS
        Manager) Select the server Select Authorization Rules Remove the "Allow All Users" rule Click Add Allow Rule… Allow
        access to the user(s), user groups, or roles that are authorized across all of the web sites and applications (e.g. the
        Administrators group) Impact: If not set properly, the authorization rule could restrict assess at a level that is not
        intended to be restricted.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_2.1', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "2.2":
    title: '2.2 | L1 Ensure access to sensitive site features is restricted to authenticated principals only - manual'
    section: 'Configure Authentication and Authorization'
    description: |
        IIS supports both challengebased and login redirectionbased authentication methods. Challengebased authentication
        methods, such as Integrated Windows Authentication, require a client to respond correctly to a serverinitiated
        challenge. A login redirectionbased authentication method such as Forms Authentication relies on redirection to a login
        page to determine the identity of the principal. Challengebased authentication and login redirectionbased authentication
        methods cannot be used in conjunction with one another. Public servers/sites are typically configured to use Anonymous
        Authentication. This method typically works, provided the content or services is intended for use by the public. When
        sites, applications, or specific content containers are not intended for anonymous public use, an appropriate
        authentication mechanism should be utilized. Authentication will help confirm the identity of clients who request access
        to sites, application, and content. IIS provides the following authentication modules by default Anonymous
        Authentication  allows anonymous users to access sites, applications, and/or content Integrated Windows Authentication
        authenticates users using the NTLM or Kerberos protocols Kerberos v5 requires a connection to Active Directory ASP.NET
        Impersonation  allows ASP.NET applications to run under a security context different from the default security context
        for an application Forms Authentication  enables a user to login to the configured space with a valid username and
        password which is then validated against a database or other credentials store Basic authentication  requires a valid
        username and password to access content Client Certificate Mapping Authentication  allows automatic authentication of
        users who log on with client certificates that have been configured requires SSL Digest Authentication  uses Windows
        domain controller to authenticate users who request access Note that none of the challengebased authentication modules
        can be used at the same time Forms Authentication is enabled for certain applications/content. Forms Authentication does
        not rely on IIS authentication, so anonymous access for the ASP.NET application can be configured if Forms
        Authentication will be used. It is recommended that sites containing sensitive information, confidential data, or
        nonpublic web services be configured with a credentialsbased authentication mechanism.
    remediation: |
        When configuring an authentication module for the first time, each mechanism must be completely configured before use.
        Enabling authentication can be performed by using the user interface (UI), running                AppCmd.exe
         commands in a command-line window, editing configuration files directly, or by writing WMI scripts. To verify an
        authentication mechanism is in place for sensitive content using the IIS Manager GUI:             Open IIS Manager and
        navigate to level with sensitive content In Features View, double-click Authentication On the Authentication page, make
        sure an authentication module is enabled, while anonymous authentication is enabled (Forms Authentication can have
        anonymous as well) If necessary, select the desired authentication module, then in the Actions pane, click Enable OR
        Enter the following command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd set config
        -section:system.web/authentication /mode:<Windows|Passport|Forms>
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter
        'system.webServer/security/authentication/anonymousAuthentication' -name 'enabled' -value 'False'
         Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter
        'system.webServer/security/authentication/windowsAuthentication' -name 'enabled' -value 'True'
         Impact: Authentication will be restricted to the method that is applied.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_2.2', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "2.3":
    title: '2.3 | L1 Ensure forms authentication require SSL'
    section: 'Configure Authentication and Authorization'
    description: |
        Formsbased authentication can pass credentials across the network in clear text. It is therefore imperative that the
        traffic between client and server be encrypted using SSL, especially in cases where the site is publicly accessible. It
        is recommended that communications with any portion of a site using Forms Authentication be encrypted using SSL. NOTE
         Due to identified security vulnerabilities, SSL no longer provides adequate protection for a sensitive information.
    remediation: |
        Open IIS Manager and navigate to the appropriate tier In Features View, double-click Authentication On the
        Authentication page, select Forms Authentication In the Actions pane, click Edit Check the Requires SSL checkbox in the
        cookie settings section, click OK OR Enter the following command in AppCmd.exe to configure:
        %systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /mode:Forms
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'requireSSL' -value 'True'
         Impact: None.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq true'

  "2.4":
    title: '2.4 | L2 Ensure forms authentication is set to use cookies'
    section: 'Configure Authentication and Authorization'
    description: |
        Forms Authentication can be configured to maintain the site visitors session identifier in either a URI or cookie. It is
        recommended that Forms Authentication be set to use cookies.
    remediation: |
        Open IIS Manager and navigate to the level where Forms Authentication is enabled In Features View, double-click
        Authentication On the Authentication page, select Forms Authentication In the Actions pane, click Edit In the Cookie
        settings section, select Use cookies from the Mode dropdown OR Enter the following command in AppCmd.exe to configure:
        %systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /forms.cookieless:"UseCookies"
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'cookieless' -value
        'UseCookies'
         Impact: Site visitor's session identifier will be stored via cookies.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_2.4', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == UseCookies'

  "2.5":
    title: '2.5 | L1 Ensure cookie protection mode is configured for forms authentication'
    section: 'Configure Authentication and Authorization'
    description: |
        The cookie protection mode defines the protection Forms Authentication cookies will be given within a configured
        application. The four cookie protection modes that can be defined are Encryption and validation  Specifies that the
        application use both data validation and encryption to help protect the cookie this option uses the configured data
        validation algorithm based on the machine key and tripleDES 3DES for encryption, if available and if the key is long
        enough 48 bytes or more None  Specifies that both encryption and validation are disabled for sites that are using
        cookies only for personalization and have weaker security requirements Encryption  Specifies that the cookie is
        encrypted by using TripleDES or DES, but data validation is not performed on the cookie cookies used in this manner
        might be subject to plain text attacks Validation  Specifies that a validation scheme verifies that the contents of an
        encrypted cookie have not been changed in transit It is recommended that cookie protection mode always encrypt and
        validate Forms Authentication cookies.
    remediation: |
        Cookie protection mode can be configured by using the user interface (UI), by running                Appcmd.exe
         commands in a command-line window, by editing configuration files directly, or by writing WMI scripts. Using IIS
        Manager:             Open IIS Manager and navigate to the level where Forms Authentication is enabled In Features View,
        double-click Authentication On the Authentication page, select Forms Authentication In the Actions pane, click Edit In
        the Cookie settings section, verify the drop-down for Protection mode is set for Encryption and validation OR Enter the
        following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website
        name>'  -filter 'system.web/authentication/forms' -name 'protection' -value 'All'
         Impact: Protection Forms Authentication cookies will restricted to the mode defined.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.5', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == All'

  "2.6":
    title: '2.6 | L1 Ensure transport layer security for basic authentication is configured - manual'
    section: 'Configure Authentication and Authorization'
    description: |
        Basic Authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic
        between client and server be encrypted, especially in cases where the site is publicly accessible and is recommended
        that TLS be configured and required for any Site or Application using Basic Authentication.
    remediation: |
        To protect Basic Authentication with transport layer security: Open IIS Manager In the Connections pane on the left,
        select the server to be configured In the Connections pane, expand the server, then expand Sites and select the site to
        be configured In the Actions pane, click Bindings; the Site Bindings dialog appears If an HTTPS binding is available,
        click Close and see below "To require SSL" If no HTTPS binding is visible, perform the following steps To add an HTTPS
        binding: In the Site Bindings dialog, click Add; the Add Site Binding dialog appears Under Type, select https Under SSL
        certificate, select an X.509 certificate Click OK, then close To require SSL: In Features View, double-click SSL
        Settings On the SSL Settings page, select Require SSL. In the Actions pane, click Apply OR Enter the following command
        in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website name>'
        -filter 'system.webServer/security/access' -name 'sslFlags' -value 'Ssl'
         Impact: Credentials will not be passed across the network in plain text.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.6', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "2.7":
    title: '2.7 | L1 Ensure passwordFormat is not set to clear'
    section: 'Configure Authentication and Authorization'
    description: |
        The            credentials
         element of the            authentication
         element allows optional definitions of name and password for IIS Manager User accounts within the configuration file.
        Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration
        interface to connect to sites and applications in which theyve been granted authorization.         Note
         The            credentials
         element only applies when the default provider,            ConfigurationAuthenticationProvider
        , is configured as the authentication provider.
        It is recommended that            passwordFormat
         be set to a value other than            Clear
        , such as            SHA1
        .
    remediation: |
        Authentication mode is configurable at the                machine.config
        , root-level                web.config
        , or application-level                web.config
        :             Locate and open the configuration file where the credentials are stored
        Find the                  <credentials>
         element
        If present, ensure                  passwordFormat
         is not set to                  Clear

        Change                  passwordFormat
        to                  SHA1
                              The clear text passwords will need to be replaced with the appropriate hashed version. OR Enter
        the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website
        name>'  -filter 'system.web/authentication/forms/credentials' -name 'passwordFormat' -value 'SHA1'
         Impact: passwordFormat
         will be encrypted.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.7', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "2.8":
    title: '2.8 | L2 Ensure credentials are not stored in configuration files'
    section: 'Configure Authentication and Authorization'
    description: |
        The            credentials
         element of the            authentication
         element allows optional definitions of name and password for IIS Manager User accounts within the configuration file.
        Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration
        interface to connect to sites and applications in which theyve been granted authorization.         Note
         The            credentials
         element only applies when the default provider,            ConfigurationAuthenticationProvider
        , is configured as the authentication provider.         It is recommended to avoid storing passwords in the
        configuration file even in form of hash.
    remediation: |
        Authentication mode is configurable at the                machine.config
        , root-level                web.config
        , or application-level                web.config
        :             Locate and open the configuration file where the credentials are stored
        Find the                  <credentials>
         element               If present, remove the section This will remove all references to stored users in the
        configuration files. OR Enter the following command in PowerShell to configure: Remove-WebConfigurationProperty  -pspath
        'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/authentication/forms/credentials' -name '.'
         Impact: Passwords in the configuration file will be stored in form of a hash.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_2.8', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.1":
    title: '3.1 | L1 Ensure deployment method retail is set - manual'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        The            deployment retail
         switch is intended for use by production IIS servers. This switch is used to help applications run with the best
        possible performance and least possible security information leakages by disabling the applications ability to generate
        trace output on a page, disabling the ability to display detailed error messages to end users, and disabling the debug
        switch. Often times, switches and options that are developerfocused, such as failed request tracing and debugging, are
        enabled during active development.
        It is recommended that the deployment method on any production server be set to            retail
        .
    remediation: |
        Open the                  machine.config
         file located in:                  %systemroot%\Microsoft.NET\Framework<bitness (if not the 32 bit)>\<framework
        version>\CONFIG

        Add the line                  <deployment retail="true" />
         within the                  <system.web>
         section
        If systems are 64-bit, do the same for the                  machine.config
         located in:                  %systemroot%\Microsoft.NET\Framework<bitness (if not the 32 bit)>\<framework
        version>\CONFIG
                              Impact: N/A
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_3.1', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.2":
    title: '3.2 | L2 Ensure debug is turned off'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        Developers often enable the debug mode during active ASP.NET development so that they do not have to continually clear
        their browsers cache every time they make a change to a resource handler. The problem would arise from this being left
        on or set to true. Compilation debug output is displayed to the end user, allowing malicious persons to obtain detailed
        information about applications.
        This is a defense in depth recommendation due to the            deployment retailtrue /
         in the            machine.config
         configuration file overriding any debug settings.         It is recommended that debugging still be turned off.
    remediation: |
        To use the UI to make this change: Open IIS Manager and navigate desired server, site, or application In Features View,
        double-click .NET Compilation On the .NET Compilation page, in the Behavior section, ensure the Debug field is set to
        False When finished, click Apply in the Actions pane
        Note: The                <compilation debug>
         switch will not be present in the                web.config
         file unless it has been added manually, or has previously been configured using the IIS Manager GUI.             OR
        Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST/<website name>'  -filter "system.web/compilation" -name "debug" -value "False"
         Impact: Debugging will be disabled.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.2', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq false'

  "3.3":
    title: '3.3 | L2 Ensure custom error messages are not off'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        When an ASP.NET application fails and causes an HTTP/1.x 500 Internal Server Error, or a feature configuration such as
        Request Filtering prevents a page from being displayed, an error message will be generated. Administrators can choose
        whether or not the application should display a friendly message to the client, detailed error message to the client, or
        detailed error message to localhost only. The            customErrors
         tag in the            web.config
         has three modes
        On Specifies that custom errors are enabled. If no              defaultRedirect
         attribute is specified, users see a generic error. The custom errors are shown to the remote clients and to the local
        host           Off Specifies that custom errors are disabled. The detailed ASP.NET errors are shown to the remote
        clients and to the local host RemoteOnly Specifies that custom errors are shown only to the remote clients, and that
        ASP.NET errors are shown to the local host. This is the default value
        This is a defense in depth recommendation due to the            deployment retailtrue /
         in the            machine.config
         file overriding any settings for            customErrors
         to be turned            Off
        .
        It is recommended that            customErrors
         still be turned to            On
        or            RemoteOnly
        .
    remediation: |
        customErrors
         may be set for a server, site, or application using the IIS Manager GUI, using                AppCmd.exe
         commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the
        following to set the                customErrors
         mode to                RemoteOnly
         or                On
         for a Web Site in the IIS Manager GUI:             Open the IIS Manager GUI and navigate to the site to be configured
        In Features View, find and double-click .NET Error Pages icon In the Actions Pane, click Edit Feature Settings In modal
        dialog, choose On or Remote Only for Mode settings Click OK OR Enter the following command in PowerShell to configure:
        Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter "system.web/customErrors" -name
        "mode" -value "RemoteOnly"
         Impact: N/A
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.3', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.4":
    title: '3.4 | L1 Ensure IIS HTTP detailed errors are hidden from displaying remotely'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        A Web sites error pages are often set to show detailed error information for troubleshooting purposes during testing or
        initial deployment. To prevent unauthorized users from viewing this privileged information, detailed error pages must
        not be seen by remote users. This setting can be modified in the            errorMode
         attribute setting for a Web sites error pages. By default, the            errorMode
         attribute is set in the            Web.config
         file for the Web site or application and is located in the            httpErrors
         element of the            system.webServer
         section.         It is recommended that custom errors be prevented from displaying remotely.
    remediation: |
        The following describes how to change the                errorMode
         attribute to                DetailedLocalOnly
         or                Custom
         for a Web site by using IIS Manager:             Open IIS Manager with Administrative privileges In the Connections
        pane on the left, expand the server, then expand the Sites folder Select the Web site or application to be configured In
        Features View, select Error Pages, in the Actions pane, select Open Feature In the Actions pane, select Edit Feature
        Settings In the Edit Error Pages Settings dialog, under Error Responses, select either Custom error pages or Detailed
        errors for local requests and custom error pages for remote requests Click OK and exit the Edit Error Pages Settings
        dialog OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST/<website name>'  -filter "system.webServer/httpErrors" -name "errorMode" -value
        "DetailedLocalOnly"
         Impact: Custom errors will not be viewable remotely.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.4', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == DetailedLocalOnly'

  "3.5":
    title: '3.5 | L2 Ensure ASP.NET stack tracing is not enabled'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        The            trace
         element configures the ASP.NET code tracing service that controls how trace results are gathered, stored, and
        displayed. When tracing is enabled, each page request generates trace messages that can be appended to the page output
        or stored in an application trace log.
        This is a defense in depth recommendation due to the            deployment retailtrue /
         in the            machine.config
         file overriding any settings for ASP.NET stack tracing that are left on.         It is recommended that ASP.NET stack
        tracing still be turned off.
    remediation: |
        Ensure                  <deployment retail="true" />
        is enabled in the                  machine.config
        .               Remove all attribute references to ASP.NET tracing by deleting the trace and trace enable attributes.
        Per Page: Remove any references to: Trace="true"
         Per Application:
        <configuration>
          <system.web>
             <trace enabled="true">
          </system.web>
        </configuration>
                     OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST/<website name>'  -filter "system.web/trace" -name "enabled" -value "False"
         Impact: ASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will
        not be viewable to anyone who views the pages in the site.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.5', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq false'

  "3.6":
    title: '3.6 | L2 Ensure httpcookie mode is configured for session state'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        A session cookie associates session information with client information for that session, which can be the duration of a
        users connection to a site. The cookie is passed in a HTTP header together with all requests between the client and
        server.
        Session information can also be stored in the URL. However, storing session information in this manner has security
        implications that can open attack vectors such as session hijacking. An effective method used to prevent session
        hijacking attacks is to force web applications to use cookies to store the session token. This is accomplished by
        setting the            cookieless
         attribute of the            sessionState
         node to            UseCookies
         or            False
         which will in turn keep session state data out of URI.
        It is recommended that session state be configured to            UseCookies
        .
    remediation: |
        SessionState
         can be set to                UseCookies
         by using the IIS Manager GUI, using                AppCmd.exe
         commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the
        following to set the                cookieless
         attribute of the                sessionState
         node to                UseCookies
         in the IIS Manager GUI:             Open the IIS Manager GUI and navigate desired server, site, or application In
        Features View, find and double-click the Session State icon In the Cookie Settings section, choose Use Cookies from the
        Mode dropdown In the Actions Pane, click Apply
        To use                AppCmd.exe
         to configure                sessionState
         at the server level, the command would look like this:             %systemroot%\system32\inetsrv\appcmd set config
        /commit:WEBROOT /section:sessionState /cookieless:UseCookies /cookieName:ASP.NET_SessionID /timeout:20

        When                Appcmd.exe
         is used to configure the                <sessionstate>
         element at the global level in IIS, the                /commit:WEBROOT
         switch must be included so that configuration changes are made to the root                web.config
         file instead of                ApplicationHost.config
        .             OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST/<website name>'  -filter "system.web/sessionState" -name "mode" -value "StateServer"
         Impact: Session information in URI session IDs will not show up in proxy logs.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.6', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == UseCookies'

  "3.7":
    title: '3.7 | L1 Ensure cookies are set with HttpOnly attribute'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        The            httpOnlyCookies
         attribute of the            httpCookies
         node determines if IIS will set the            HttpOnly
         flag on HTTP cookies it sets. The            HttpOnly
         flag indicates to the user agent that the cookie must not be accessible by clientside script i.e document.cookie.
        It is recommended that the            httpOnlyCookies
         attribute be set to            true
        .
    remediation: |
        Locate and open the application's                  web.config
         file
        Add the                  <httpCookies httpOnlyCookies="true" />
         tag within                  <system.web>
        :
        <configuration>
          <system.web>
            <httpCookies httpOnlyCookies="true" />
          </system.web>
        </configuration>

        Setting the value of the                httpOnlyCookies
         attribute of the                httpCookies
         element to                true
         will add the                HttpOnly
         flag to all the cookies set by the application. All modern versions of browsers recognize                HttpOnly
         attribute; older versions will either treat them as normal cookies or simply ignore them altogether.
        Impact: N/A
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.7', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq true'

  "3.8":
    title: '3.8 | L2 Ensure MachineKey validation method - .Net 3.5 is configured'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        The            machineKey
         element of the ASP.NET            web.config
         specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to
        specify hashing and encryption settings for application services such as view state, Forms authentication, membership
        and roles, and anonymous identification.         The following validation methods are available Advanced Encryption
        Standard AES is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits.
        This method uses the same private key to encrypt and decrypt data, whereas a publickey method must use a pair of keys
        Message Digest 5 MD5 is used for digital signing of applications. This method produces a 128bit message digest, which is
        a compressed form of the original data Secure Hash Algorithm SHA1 is considered more secure than MD5 because it produces
        a 160bit message digest Triple Data Encryption Standard TripleDES is a minor variation of Data Encryption Standard DES.
        It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance
        is not a primary consideration, consider using TripleDES It is recommended that AES or SHA1 methods be configured for
        use at the global level.
    remediation: |
        Machine key encryption can be set by using the UI, running                appcmd.exe
         commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the
        global level using an                appcmd.exe
         command:             %systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:machineKey
        /validation:SHA1

        Note: When                Appcmd.exe
         is used to configure the                <machineKey>
         element at the global level in IIS, the                /commit:WEBROOT
         switch must be included so that configuration changes are made to the root                web.config
         file instead of                ApplicationHost.config
        .             Impact: N/A
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.8', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == (AES|SHA)'

  "3.9":
    title: '3.9 | L1 Ensure MachineKey validation method - .Net 4.5 is configured'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        The            machineKey
         element of the ASP.NET            web.config
         specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to
        specify hashing and encryption settings for application services such as view state, Forms authentication, membership
        and roles, and anonymous identification.         The following validation methods are available Advanced Encryption
        Standard AES is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits.
        This method uses the same private key to encrypt and decrypt data, whereas a publickey method must use a pair of keys
        Message Digest 5 MD5 is used for digital signing of applications. This method produces a 128bit message digest, which is
        a compressed form of the original data Secure Hash Algorithm SHA1 is considered more secure than MD5 because it produces
        a 160bit message digest Triple Data Encryption Standard TripleDES is a minor variation of Data Encryption Standard DES.
        It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance
        is not a primary consideration, consider using TripleDES Secure Hash Algorithm SHA2 is a family of two similar hash
        functions, with different block sizes known as SHA256 and SHA512. They differ in the word size SHAS256 used 32bit words
        and SHA512 uses 64bit words. It is recommended that SHA2 methods be configured for use at the global level.
    remediation: |
        Machine key encryption can be set by using the UI, running                appcmd.exe
         commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the
        global level using an                appcmd.exe
         command:             %systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:machineKey
        /validation:<validation method>

        Note: When                Appcmd.exe
         is used to configure the                <machineKey>
         element at the global level in IIS, the                /commit:WEBROOT
         switch must be included so that configuration changes are made to the root                web.config
         file instead of                ApplicationHost.config
        .             OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT'  -filter "system.web/machineKey" -name "validation" -value "<validation method>"
         Impact: N/A
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.9', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == (AES|SHA)'

  "3.10":
    title: '3.10 | L1 Ensure global .NET trust level is configured'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        An applications trust level determines the permissions that are granted by the ASP.NET code access security CAS policy.
        CAS defines two trust categories full trust and partial trust. An application that has full trust permissions may access
        all resource types on a server and perform privileged operations, while applications that run with partial trust have
        varying levels of operating permissions and access to resources. The possible values for the Level property of the
        TrustSection class are Full Specifies unrestricted permissions and grants the ASP.NET application permissions to access
        any resource that is subject to operating system security all privileged operations are supported
        High specifies a high level of code access security which limits the application from doing the following
                     Call unmanaged code Call serviced components Write to the event log Access Microsoft Windows Message
        Queuing queues Access ODBC, OLD DB, or Oracle data sources

        Medium specifies a medium level of code access security, which means that in addition to the restrictions for High, the
        ASP.NET application cannot do any of the following things
                     Access files outside the application directory Access the registry

        Low specifies a low level of code access security, which means that in addition to the restrictions for Medium, the
        application is prevented from performing any of the following actions
                     Write to the file system
        Call the                  System.Security.CodeAccessPermission.Assert
         method to expand permissions to resources               Minimal specifies a minimal level of code access security,
        which means that the application has only execute permission
                        It is recommended that the global .NET Trust Level be set to Medium or lower.
    remediation: |
        Trust level can be set by using the UI, running                appcmd.exe
         commands, by editing configuration files directly, or by writing WMI scripts. To set the .Net Trust Level to Medium at
        the server level using an                appcmd.exe
         command:             %systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:trust /level:Medium

        When                Appcmd.exe
         is used to configure the element at the global level in IIS, the                /commit:WEBROOT
         switch must be included so that configuration changes are made to the root                web.config
         file instead of                ApplicationHost.config
        .             OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT'  -filter "system.web/trust" -name "level" -value "Medium"
         Impact: If not set properly, the application may not run.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.10', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ((?i)Medium|(?i)Low)'

  "3.11":
    title: '3.11 | L2 Ensure X-Powered-By Header is removed - manual'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        The xpoweredby headers specify the underlying technology used by the webserver.
    remediation: |
        Enter the following command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd.exe set config
        -section:system.webServer/httpProtocol /-"customHeaders.[name='X-Powered-By']" /commit:apphost
         OR Enter the following command in PowerShell to configure: Remove-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST' -filter "system.webserver/httpProtocol/customHeaders" -name "." -AtElement @{name='X-Powered-
        By'}
         Impact: X-powered-by headers will not be available on the webserver.
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_3.11', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.12":
    title: '3.12 | L2 Ensure Server Header is removed - manual'
    section: 'ASP.NET Configuration Recommendations'
    description: |
        The server header headers specify the underlying technology used by the application.
    remediation: |
        Enter the following command to use AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd.exe set config
        -section:system.webServer/security/requestFiltering /removeServerHeader:"True"  /commit:apphost
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST/' -filter "system.webServer/security/requestFiltering" -name "removeServerHeader" -value "True"
         Impact: This will remove the server header.
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_3.12', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.1":
    title: '4.1 | L2 Ensure maxAllowedContentLength is configured - manual'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        The            maxAllowedContentLength
         Request Filter is the maximum size of the http request, measured in bytes, which can be sent from a client to the
        server. Configuring this value enables the total request size to be restricted to a configured value.         It is
        recommended that the overall size of requests be restricted to a maximum value appropriate for the server, site, or
        application.
    remediation: |
        The                MaxAllowedContentLength
         Request Filter may be set for a server, website, or application using the IIS Manager GUI, using
        AppCmd.exe
         commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager
        GUI:             Open Internet Information Services (IIS) Manager In the Connections pane, click on the server, site,
        application, or directory to be configured In the Home pane, double-click Request Filtering Click Edit Feature
        Settings... in the Actions pane Under the Request Limits section, key the maximum content length in bytes that will
        allow applications to retain their intended functionality, such as 30000000 (approx. 28.6 MB) Enter the following
        command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering
        /requestLimits.maxAllowedContentLength:30000000
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/security/requestFiltering/requestLimits" -name
        "maxAllowedContentLength" -value 30000000
         Impact: Size of requests be restricted to the maximum value set.
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_4.1', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.2":
    title: '4.2 | L2 Ensure maxURL request filter is configured'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        The            maxURL
         attribute of the            requestLimits
         property is the maximum length in Bytes in which a requested URL can be excluding query string in order for IIS to
        accept. Configuring this Request Filter enables administrators to restrict the length of the requests that the server
        will accept.         It is recommended that a limit be put on the length of URL.
    remediation: |
        The                MaxURL
         Request Filter may be set for a server, website, or application using the IIS Manager GUI, using
        AppCmd.exe
         commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager
        GUI:             Open Internet Information Services (IIS) Manager In the Connections pane, click on the connection,
        site, application, or directory to be configured In the Home pane, double-click Request Filtering Click Edit Feature
        Settings... in the Actions pane Under the Request Limits section, key the maximum URL length in bytes that has been
        tested with web applications Enter the following command in AppCmd.exe to configure:
        %systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /requestLimits.maxURL:4096
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/security/requestFiltering/requestLimits" -name "maxUrl" -value 4096
         Impact: Length of the URL will be restricted to the maximum value set.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_4.2', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should be <= 4096'

  "4.3":
    title: '4.3 | L2 Ensure MaxQueryString request filter is configured'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        The            MaxQueryString
         Request Filter describes the upper limit on the length of the query string that the configured IIS server will allow
        for websites or applications.         It is recommended that values always be established to limit the amount of data
        that can be accepted in the query string.
    remediation: |
        The                MaxQueryString
         Request Filter may be set for a server, website, or application using the IIS Manager GUI, using
        AppCmd.exe
         commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager
        GUI:             Open Internet Information Services (IIS) Manager In the Connections pane, go to the connection, site,
        application, or directory to be configured In the Home pane, double-click Request Filtering Click Edit Feature
        Settings... in the Actions pane Under the Request Limits section, key in a safe upper bound in the Maximum query string
        (Bytes) textbox Enter the following command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd set config
        /section:requestfiltering /requestLimits.maxQueryString:2048
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/security/requestFiltering/requestLimits" -name "maxQueryString"
        -value 2048
         Impact: The amount of data to be accepted in the query string will be limited.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_4.3', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should be <= 2048'

  "4.4":
    title: '4.4 | L2 Ensure non-ASCII characters in URLs are not allowed'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        This feature is used to allow or reject all requests to IIS that contain nonASCII characters. When using this feature,
        Request Filtering will deny the request if highbit characters are present in the URL. The UrlScan equivalent is
        AllowHighBitCharacters
        .         It is recommended that requests containing nonASCII characters be rejected, where possible.
    remediation: |
        The                AllowHighBitCharacters
         Request Filter may be set for a server, website, or application using the IIS Manager GUI, using
        AppCmd.exe
         commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager
        GUI:             Open Internet Information Services (IIS) Manager In the Connections pane, go to the connection, site,
        application, or directory to be configured In the Home pane, double-click Request Filtering Click Edit Feature
        Settings... in the Actions pane Under the General section, uncheck Allow high-bit characters Note: Disallowing high-bit
        ASCII characters in the URL may negatively impact the functionality of sites requiring international language support.
        Enter the following command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd set config
        /section:requestfiltering /allowHighBitCharacters:false
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/security/requestFiltering" -name "allowHighBitCharacters" -value
        "False"
         Impact: Requests containing non-ASCII characters be rejected.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_4.4', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq false'

  "4.5":
    title: '4.5 | L1 Ensure Double-Encoded requests will be rejected'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        This Request Filter feature prevents attacks that rely on doubleencoded requests and applies if an attacker submits a
        doubleencoded request to IIS. When the doubleencoded requests filter is enabled, IIS will go through a two iteration
        process of normalizing the request. If the first normalization differs from the second, the request is rejected and the
        error code is logged as a 404.11. The doubleencoded requests filter was the            VerifyNormalization
         option in UrlScan.         It is recommended that doubleencoded requests be rejected.
    remediation: |
        The                allowDoubleEscaping
         Request Filter may be set for a server, website, or application using the IIS Manager GUI, using
        AppCmd.exe
         commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager
        GUI:             Open Internet Information Services (IIS) Manager In the Connections pane, select the site, application,
        or directory to be configured In the Home pane, double-click Request Filtering Click Edit Feature Settings... in the
        Actions pane Under the General section, uncheck Allow double escaping
        If a file name in a URL includes "+" then                allowDoubleEscaping
         must be set to                true
         to allow functionality.             Enter the following command in AppCmd.exe to configure:
        %systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /allowDoubleEscaping:false
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/security/requestFiltering" -name "allowDoubleEscaping" -value "True"
         Impact: Double-encoded requests will be rejected.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq false'

  "4.6":
    title: '4.6 | L1 Ensure HTTP Trace Method is disabled - manual'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        The HTTP TRACE method returns the contents of client HTTP requests in the entitybody of the TRACE response. Attackers
        could leverage this behavior to access sensitive information, such as authentication data or cookies, contained in the
        HTTP headers of the request. One such way to mitigate this is by using the            verbs
         element of the            requestFiltering
         collection. The            verbs
         element replaces the AllowVerbs and DenyVerbs features in UrlScan.         It is recommended the HTTP TRACE method be
        denied.
    remediation: |
        Open Internet Information Services (IIS) Manager In the Connections pane, select the site, application, or directory to
        be configured In the Home pane, double-click Request Filtering In the Request Filtering pane, click the HTTP verbs tab,
        and then click Deny Verb... in the Actions pane In the Deny Verb dialog box, enter the TRACE, and then click OK Enter
        the following command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd set config
        /section:requestfiltering /+verbs.[verb='TRACE',allowed='false']
         OR Enter the following command in PowerShell to configure: Add-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/security/requestFiltering/verbs" -name "." -value
        @{verb='TRACE';allowed='False'}
         Impact: Contents of client HTTP requests in the entity-body of the TRACE response will not be available.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_4.6', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.7":
    title: '4.7 | L1 Ensure Unlisted File Extensions are not allowed'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        The            FileExtensions
         Request Filter allows administrators to define specific extensions their web servers will allow and disallow. The
        property            allowUnlisted
         will cover all other file extensions not explicitly allowed or denied. Often times, extensions such as
        .config
        ,            .bat
        ,            .exe
        , to name a few, should never be served. The            AllowExtensions
         and            DenyExtensions
         options are the UrlScan equivalents.         It is recommended that all extensions be disallowed at the most global
        level possible, with only those necessary being allowed.
    remediation: |
        The                allowUnlisted
         Request Filter may be set for a server, website, or application using the IIS Manager GUI, using
        AppCmd.exe
         commands in a command-line window, and/or directly editing the configuration files. To configure at the server level
        using the IIS Manager GUI:             Open Internet Information Services (IIS) Manager In the Connections pane, select
        the server In the Home pane, double-click Request Filtering Click Edit Feature Settings... in the Actions pane Under the
        General section, uncheck Allow unlisted file name extensions Enter the following command in AppCmd.exe  to configure:
        %systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /fileExtensions.allowunlisted:false
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/security/requestFiltering/fileExtensions" -name "allowUnlisted"
        -value "False"
         Impact: If not set properly, file extensions that are needed will be rejected.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.7', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq false'

  "4.8":
    title: '4.8 | L1 Ensure Handler is not granted Write and ScriptExecute - manual'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        Handler mappings can be configured to give permissions to            Read
        ,            Write
        ,            Script
        , or            Execute
         depending on what the use is for  reading static content, uploading files, executing scripts, etc.
        It is recommended to grant a handler either            Execute/Script
         or            Write
         permissions, but not both.
    remediation: |
        The                accessPolicy
         attribute in the                <handlers>
         section of either the                ApplicationHost.config
         (server-wide) or                web.config
         (site or application) must not have                Write
         present when                Script
         or                Execute
         are present. To resolve this issue for a Web server, the attribute in the                <handlers>
         section of the                ApplicationHost.config
         file for the server must manually be edited. To edit the ApplicationHost.config file by using Notepad, perform the
        following steps:             Open Notepad as Administrator
        Open the ApplicationHost.config file in                  %systemroot%\system32\inetsrv\config

        Edit the                  <handlers>
         section                  accessPolicy
         attribute so that                  Write
         is not present when                  Script
         or                  Execute
         are present               Enter the following command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd
        set config /section:handlers /accessPolicy:Read,Script
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/handlers" -name "accessPolicy" -value "Read,Script"
         Note: This configuration change cannot be made by using IIS Manager. Impact: N/A
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_4.8', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.9":
    title: '4.9 | L1 Ensure notListedIsapisAllowed is set to false'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        The            notListedIsapisAllowed
        attribute is a serverlevel setting that is located in the            ApplicationHost.config
         file in the            isapiCgiRestriction
         element of the            system.webServer
         section under            security
        . This element ensures that malicious users cannot copy unauthorized ISAPI binaries to the Web server and then run them.
        It is recommended that            notListedIsapisAllowed
         be set to            false
        .
    remediation: |
        To use IIS Manager to set the                notListedIsapisAllowed
         attribute to                false
        :             Open IIS Manager as Administrator In the Connections pane on the left, select server to be configured In
        Features View, select ISAPI and CGI Restrictions; in the Actions pane, select Open Feature In the Actions pane, select
        Edit Feature Settings In the Edit ISAPI and CGI Restrictions Settings dialog, clear the Allow unspecified ISAPI modules
        check box, if checked Click OK Enter the following command in AppCmd.exe to configure:
        %systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.webServer/security/isapiCgiRestriction
        /notListedIsapisAllowed:false
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/security/isapiCgiRestriction" -name "notListedIsapisAllowed" -value
        "False"
         Impact: Unauthorized ISAPI binaries will not be allowed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.9', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq false'

  "4.10":
    title: '4.10 | L1 Ensure notListedCgisAllowed is set to false'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        The            notListedCgisAllowed
         attribute is a serverlevel setting that is located in the            ApplicationHost.config
         file in the            isapiCgiRestriction
         element of the            system.webServer
         section under            security
        . This element ensures that malicious users cannot copy unauthorized CGI binaries to the Web server and then run them.
        It is recommended that            notListedCgisAllowed
         be set to            false
        .
    remediation: |
        To set the                notListedCgisAllowed
         attribute to false using IIS Manager:             Open IIS Manager as Administrator In the Connections pane on the
        left, select the server to configure In Features View, select ISAPI and CGI Restrictions; in the Actions pane, select
        Open Feature In the Actions pane, select Edit Feature Settings In the Edit ISAPI and CGI Restrictions Settings dialog,
        clear the Allow unspecified CGI modules check box Click OK Enter the following command in AppCmd.exe to configure:
        %systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.webServer/security/isapiCgiRestriction
        /notListedCgisAllowed:false
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.webServer/security/isapiCgiRestriction" -name "notListedCgisAllowed" -value
        "False"
         Impact: Unlisted CGI extensions will not be allowed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.10', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq false'

  "4.11":
    title: '4.11 | L1 Ensure Dynamic IP Address Restrictions is enabled - manual'
    section: 'Request Filtering and Other Restriction Modules'
    description: |
        Dynamic IP address filtering allows administrators to configure the server to block access for IPs that exceed the
        specified number of requests or request frequency. Note
         Ensure that you receive the Forbidden page once the block has been enforced.
    remediation: |
        Open IIS Manager. Open the IP Address and Domain Restrictions feature. Click Edit Dynamic Restrictions Settings.. Check
        the Deny IP Address based on the number of concurrent requests and the Deny IP Address based on the number of requests
        over a period of time boxes. The values can be tweaked as needed for your specific environment. OR Enter the following
        command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter
        "system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests" -name "enabled" -value "True"
         Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter
        "system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests" -name "maxConcurrentRequests" -value <number of
        requests>
         Impact: Clients will receive a forbidden response when the specified number of requests or request frequency is
        exceeded.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_4.11', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1":
    title: '5.1 | L1 Ensure Default IIS web log location is moved - manual'
    section: 'IIS Logging Recommendations'
    description: |
        IIS will log relatively detailed information on every request. These logs are usually the first item looked at in a
        security response and can be the most valuable. Malicious users are aware of this and will often try to remove evidence
        of their activities. It is recommended that the default location for IIS log files be changed to a restricted, nonsystem
        drive.
    remediation: |
        Moving the default log location can be easily accomplished using the Logging feature in the IIS Management UI,
        AppCmd.exe
        , or PowerShell.             Enter the following command in AppCmd.exe to configure:
        %systemroot%\system32\inetsrv\appcmd set config -section:sites -siteDefaults.logfile.directory:<new log location>
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/sites/siteDefaults/logFile" -name "directory" -value <new log
        location>
         Moving log file stores to a non-system drive or partition separate from where web applications run and/or content is
        served is preferred. Additionally, folder-level NTFS permissions should be set as restrictive as possible;
        Administrators and SYSTEM are typically the only principals requiring access. While standard IIS logs can be moved and
        edited using IIS Manager, additional management tool add-ons are required in order to manage logs generated by other IIS
        features, such as Request Filtering and IIS Advanced Logging. These add-ons can be obtained using the Web Platform
        Installer or from Microsoft's site. The HTTPErr logging location can be changed by adding a registry key. Impact: If an
        administrator needs access to the log file, that does not have drive permission, they will be unable to view that file.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2":
    title: '5.2 | L1 Ensure Advanced IIS logging is enabled - manual'
    section: 'IIS Logging Recommendations'
    description: |
        IIS Advanced Logging is a module which provides flexibility in logging requests and client data. It provides controls
        that allow businesses to specify what fields are important, easily add additional fields, and provide policies
        pertaining to log file rollover and Request Filtering. HTTP request/response headers, server variables, and clientside
        fields can be easily logged with minor configuration in the IIS management console.
    remediation: |
        IIS Advanced Logging can be configured for servers, Web sites, and directories in IIS Manager. To enable Advanced
        Logging using the UI: Open Internet Information Services (IIS) Manager Click the server in the Connections pane Double-
        click the Logging icon on the Home page Click Select Fields The fields that will be logged need to be configured using
        the Add or Edit Fields button. Note: There may be performance considerations depending on the extent of the
        configuration. Impact: Collecting detailed log files will take more space on the specified drive.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.2', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.3":
    title: '5.3 | L1 Ensure ETW Logging is enabled - manual'
    section: 'IIS Logging Recommendations'
    description: |
        Event Tracing for Windows ETW is a Windows feature that allows Administrators to send logging information to another
        location. This information is then compiled on the server and can be queried.
    remediation: |
        To configure ETW logging: Open IIS Manager Select the server or site to enable ETW Select Logging. Ensure Log file
        format is W3C. Select Both log file and ETW event Save your settings. Impact: A dedicated server hosting Event Tracing
        for Windows (ETW) will be needed.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.3', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1":
    title: '6.1 | L1 Ensure FTP requests are encrypted - manual'
    section: 'FTP Requests'
    description: |
        FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP
        site is also known as FTPS or FTP over Secure Socket Layers SSL. FTPS is an RFC standard RFC 4217 where an SSL
        certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
    remediation: |
        To configure FTP over SSL at the server level using AppCmd.exe or PowerShell: Enter the following command in AppCmd.exe
        to configure: %systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.applicationHost/sites
        /siteDefaults.ftpServer.security.ssl.controlChannelPolicy:"SslRequire"
        /siteDefaults.ftpServer.security.ssl.dataChannelPolicy:"SslRequire"  /commit:apphost
         OR Enter the following commands in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/sites/siteDefaults/ftpServer/security/ssl" -name
        "controlChannelPolicy" -value "SslRequire"
         Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter
        "system.applicationHost/sites/siteDefaults/ftpServer/security/ssl" -name "dataChannelPolicy" -value "SslRequire"
         Impact: SSL will be needed for the FTP transmission.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_6.1', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2":
    title: '6.2 | L1 Ensure FTP Logon attempt restrictions is enabled - manual'
    section: 'FTP Requests'
    description: |
        FTP Logon attempt restrictions is a builtin network security feature to automatically block brute force FTP attacks.
        This can be used to mitigate a malicious client from attempting a bruteforce attack on a discovered account, such as the
        local administrator account.
    remediation: |
        To configure FTP Logon Attempt Restrictions at the server level using AppCmd.exe or PowerShell: Enter the following
        command in AppCmd.exe to configure: %systemroot%\system32\inetsrv\appcmd.exe set config
        -section:system.ftpServer/security/authentication /denyByFailure.enabled:"True"  /commit:apphost
         OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath
        'MACHINE/WEBROOT/APPHOST'  -filter "system.ftpServer/security/authentication/denyByFailure" -name "enabled" -value
        "True"
         Impact: N/A
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_6.2', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "7.1":
    title: '7.1 | L2 Ensure HSTS Header is set - manual'
    section: 'Transport Encryption'
    description: |
        HTTP Strict Transport Security HSTS allows a site to inform the user agent to communicate with the site only over HTTPS.
        This header takes two parameters maxage, specifies the number of seconds, after the reception of the STS header field,
        during which the user agent regards the host from whom the message was received as a Known HSTS Host speaks only HTTPS
        and includeSubDomains. includeSubDomains is an optional directive that defines how this policy is applied to subdomains.
        If includeSubDomains is included in the header, it provides the following definition this HSTS Policy also applies to
        any hosts whose domain names are subdomains of the Known HSTS Hosts domain name.
    remediation: |
        Any value greater than 0 meets this recommendation. The examples below are specific to 8 minutes but can be adjusted to
        meet your requirements.
        To set the HTTP Header at the server level using an                AppCmd.exe
         command, run the following command from an elevated command prompt:
        %systemroot%\system32\inetsrv\appcmd.exe set config -section:system.webServer/httpProtocol
        /+"customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']"

        To set the HTTP Header and include subdomains at the server level using an                AppCmd.exe
         command, run the following command from an elevated command prompt:
        %systemroot%\system32\inetsrv\appcmd.exe set config -section:system.webServer/httpProtocol
        /+"customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']"

        To set the HTTP Header at the Website level using an                AppCmd.exe
         command, run the following command from an elevated command prompt:
        %systemroot%\system32\inetsrv\appcmd.exe set config "<em>Website"</em> -section:system.webServer/httpProtocol
        /+"customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']"

        To set the HTTP Header and include subdomains at the Website level using an                AppCmd.exe
         command, run the following command from an elevated command prompt:
        %systemroot%\system32\inetsrv\appcmd.exe set config "<em>Website"</em> -section:system.webServer/httpProtocol
        /+"customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']"
         Impact: The user agent will only be able to communicate with the site over HTTPS.
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_7.1', 'cis_microsoft_iis_10_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "7.2":
    title: '7.2 | L1 Ensure SSLv2 is Disabled'
    section: 'Transport Encryption'
    description: |
        The SSLv2 protocol is not considered cryptographically secure, therefore should be disabled.
    remediation: |
        Perform the following to disable SSL 2.0:
        Set the following Registry key to                  0
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server:Enabled
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client:Enabled

        Set the following Registry key to                  1
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server:DisabledByDefault
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client:DisabledByDefault
                     To disable using PowerShell enter the following command:
        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server' -Force | Out-Null

        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server'
        -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client'
        -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server'
        -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client'
        -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null
                     Impact: The SSLv2 protocol will not be available for use.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.2', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server'
        - checks:
            - rule: 'should have_property "DisabledByDefault"'
            - name: 'DisabledByDefault'
              rule: "should have_property_value('DisabledByDefault', :dword, '1')"

  "7.3":
    title: '7.3 | L1 Ensure SSLv3 is Disabled'
    section: 'Transport Encryption'
    description: |
        The SSLv3 protocol is not considered cryptographically secure, therefore should be disabled.
    remediation: |
        Perform the following to disable SSL 3.0:
        Set the following Registry key to                  0
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server:Enabled
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client:Enabled

        Set the following Registry key to                  1
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server:DisabledByDefault
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client:DisabledByDefault
                     To disable using PowerShell enter the following command:
        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server' -Force | Out-Null

        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server'
        -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client'
        -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server'
        -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client'
        -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null
                     Impact: The SSLv3 protocol will not be available.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.3', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server'
        - checks:
            - rule: 'should have_property "DisabledByDefault"'
            - name: 'DisabledByDefault'
              rule: "should have_property_value('DisabledByDefault', :dword, '1')"

  "7.4":
    title: '7.4 | L1 Ensure TLS 1.0 is Disabled'
    section: 'Transport Encryption'
    description: |
        The TLS 1.0 protocol is not considered cryptographically secure, therefore should be disabled.
    remediation: |
        Perform the following to disable TLS 1.0:
        Set the following Registry key to                  0
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server:Enabled
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client:Enabled

        Set the following Registry key to                  1
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server:DisabledByDefault
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client:DisabledByDefault
                     To disable using PowerShell enter the following command:
        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server' -Force | Out-Null

        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server'
        -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client'
        -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server'
        -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client'
        -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null
                     Impact: The TLS 1.0 protocol will not be available.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.4', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server'
        - checks:
            - rule: 'should have_property "Enabled"'
            - name: 'Enabled'
              rule: "should have_property_value('Enabled', :dword, '1')"

  "7.5":
    title: '7.5 | L1 Ensure TLS 1.1 is Disabled'
    section: 'Transport Encryption'
    description: |
        The TLS 1.1 protocol is not considered cryptographically secure, therefore should be disabled.
    remediation: |
        Perform the following to disable TLS 1.1:
        Set the following Registry key to                  0
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server:Enabled
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client:Enabled

        Set the following Registry key to                  1
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server:DisabledByDefault
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client:DisabledByDefault
                     To disable using PowerShell enter the following command:
        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server' -Force | Out-Null

        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server'
        -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client'
        -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server'
        -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client'
        -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null
                     Impact: TLS 1.1 may be needed for backward compatibility. Warning:
         Fully test the application to ensure that backwards compatibility is not needed. If it is, build in exceptions as
        necessary for backwards compatibility.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.5', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server'
        - checks:
            - rule: 'should have_property "Enabled"'
            - name: 'Enabled'
              rule: "should have_property_value('Enabled', :dword, '1')"

  "7.6":
    title: '7.6 | L1 Ensure TLS 1.2 is Enabled'
    section: 'Transport Encryption'
    description: |
        TLS 1.2 is the most recent and mature protocol for protecting the confidentiality and integrity of HTTP traffic.
    remediation: |
        Perform the following to enable TLS 1.2:
        Set the following Registry key to                  1
        .               HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server:Enabled

        Set the following Registry key to                  0
        .               HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS
        1.2\Server:DisabledByDefault
         To enable using PowerShell enter the following command:
        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server'
        -name 'Enabled' -value '1' -PropertyType 'DWord' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server'
        -name 'DisabledByDefault' -value '0' -PropertyType 'DWord' -Force | Out-Null
                     Impact: N/A
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.6', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server'
        - checks:
            - rule: 'should have_property "Enabled"'
            - name: 'Enabled'
              rule: "should have_property_value('Enabled', :dword, '0')"

  "7.7":
    title: '7.7 | L1 Ensure NULL Cipher Suites is Disabled'
    section: 'Transport Encryption'
    description: |
        The NULL cipher does not provide data confidentiality or integrity, therefore it is recommended that the NULL cipher be
        disabled.
    remediation: |
        Perform the following to disable                NULL
         cipher:
        Set the following Registry key to                  0
        .               HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\NULL:Enabled
         To disable using PowerShell enter the following command:
        New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\NULL' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\NULL' -name 'Enabled'
        -value '0' -PropertyType 'DWord' -Force | Out-Null
                     Impact: The NULL cipher suite will not be available.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.7', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\NULL'
        - checks:
            - rule: 'should have_property "Enabled"'
            - name: 'Enabled'
              rule: "should have_property_value('Enabled', :dword, '0')"

  "7.8":
    title: '7.8 | L1 Ensure DES Cipher Suites is Disabled'
    section: 'Transport Encryption'
    description: |
        The DES Cipher Suite is considered a weak symmetrickey cipher, therefore it is recommended that it be disabled.
    remediation: |
        Perform the following to disable                DES 56/56
         cipher:
        Set the following Registry key to                  0
        .               HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\DES 56/56:Enabled
         To disable using PowerShell enter the following command:
        (Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers',
        $true).CreateSubKey('DES 56/56')

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\DES 56/56' -name
        'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null
                     Impact: The DES Cipher Suite will not be avaiable.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.8', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\DES 56/56'
        - checks:
            - rule: 'should have_property "Enabled"'
            - name: 'Enabled'
              rule: "should have_property_value('Enabled', :dword, '0')"

  "7.9":
    title: '7.9 | L1 Ensure RC4 Cipher Suites is Disabled'
    section: 'Transport Encryption'
    description: |
        The RC4 Cipher Suites are considered insecure, therefore should be disabled. Note
         RC4 cipher enabled by default on Server 2012 and 2012 R2 is RC4 128/128.
    remediation: |
        Perform the following to disable                RC4 40/128
        ,                RC4 56/128
        ,                RC4 64/128
        ,                RC4 128/128
         ciphers:
        Set the following Registry keys to                  0
        .
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128:Enabled
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128:Enabled
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128:Enabled
        HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128:Enabled
                     To disable using PowerShell enter the following commands:
        (Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers',
        $true).CreateSubKey('RC4 40/128')

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128' -name
        'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        (Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers',
        $true).CreateSubKey('RC4 56/128')

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128' -name
        'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        (Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers',
        $true).CreateSubKey('RC4 64/128')

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128' -name
        'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

        (Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers',
        $true).CreateSubKey('RC4 128/128')

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128' -name
        'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null
                     Impact: The RC4 Cipher Suites will not be available. The use of RC4 in TLS and SSL could allow an attacker
        to perform man-in-the-middle attacks and recover plaintext from encrypted sessions.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.9', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128'
        - checks:
            - rule: 'should have_property "Enabled"'
            - name: 'Enabled'
              rule: "should have_property_value('Enabled', :dword, '0')"

  "7.10":
    title: '7.10 | L1 Ensure AES 128128 Cipher Suite is Disabled'
    section: 'Transport Encryption'
    description: |
        The AES 128/128 Cipher Suite is not considered secure and therefore should be disabled, if possible.
    remediation: |
        Perform the following to disable                AES 128/128
         cipher:
        Set the following Registry key to                  0
        .               HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 128/128:Enabled
         To disable using PowerShell enter the following command:
        (Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers',
        $true).CreateSubKey('AES 128/128')

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 128/128' -name
        'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null
                     Impact: Warning:
         Enabling AES 128/128 may be required for client compatibility.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.10', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 128/128'
        - checks:
            - rule: 'should have_property "Enabled"'
            - name: 'Enabled'
              rule: "should have_property_value('Enabled', :dword, '0')"

  "7.11":
    title: '7.11 | L1 Ensure AES 256256 Cipher Suite is Enabled'
    section: 'Transport Encryption'
    description: |
        AES 256/256 is the most recent and mature cipher suite for protecting the confidentiality and integrity of HTTP traffic.
        Enabling AES 256/256 is recommended. Note
         AES 256/256 is enabled by default starting with Server 2012 and 2012 R2.
    remediation: |
        Perform the following to enable                AES 256/256
         cipher:
        Set the following Registry key to                  1
        .               HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 256/256:Enabled
         To enable using PowerShell enter the following command:
        (Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers',
        $true).CreateSubKey('AES 256/256')

        New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 256/256' -name
        'Enabled' -value '1' -PropertyType 'DWord' -Force | Out-Null
                     Impact: N/A
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.11', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 256/256'
        - checks:
            - rule: 'should have_property "Enabled"'
            - name: 'Enabled'
              rule: "should have_property_value('Enabled', :dword, '1')"

  "7.12":
    title: '7.12 | L2 Ensure TLS Cipher Suite ordering is Configured'
    section: 'Transport Encryption'
    description: |
        Cipher suites are a named combination of authentication, encryption, message authentication code, and key exchange
        algorithms used for the security settings of a network connection using TLS protocol. Clients send a cipher list and a
        list of ciphers that it supports in order of preference to a server. The server then replies with the cipher suite that
        it selects from the client cipher suite list.
    remediation: |
        Perform the following to configure TLS cipher suite order:
        Set the following Registry key to                  TLS_AES_256_GCM_SHA384,
        TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        .               HKLM\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002:Functions
         To configure TLS cipher suite order using PowerShell enter the following command:
        New-Item 'HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002' -Force | Out-Null

        New-ItemProperty -path 'HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002' -name 'Functions'
        -value
        'TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'
        -PropertyType 'MultiString' -Force | Out-Null
                     Impact: Cipher ordering is important to ensure that the most secure ciphers are listed first and will be
        applied over weaker ciphers when possible.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_7.12', 'cis_microsoft_iis_10_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - path: 'HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002'
        - checks:
            - rule: 'should have_property "Functions"'
            - name: 'Functions'
              rule: "should have_property_value('Functions', :multi_string, '^TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384|TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256|TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384|TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256$')"
