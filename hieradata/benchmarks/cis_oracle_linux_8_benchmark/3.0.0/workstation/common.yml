---

inspec_rules:
  "1.1.1.1":
    title: '1.1.1.1 | Ensure cramfs kernel module is not available - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                cramfs
         filesystem type is a compressed readonly Linux filesystem embedded in small footprint systems. A                cramfs
         image can be used without having to first decompress the image.
    remediation: |
        Run the following script to disable the                    cramfs
         module:                 -IF-
         the module is available in the running kernel:
        Create a file ending in                      .conf
         with                      install cramfs /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file ending in                      .conf
         with                      blacklist cramfs
         in the                      /etc/modprobe.d/
         directory
        Unload                      cramfs
         from the kernel                   -IF-
         available in ANY installed kernel:
        Create a file ending in                      .conf
         with                      blacklist cramfs
         in the                      /etc/modprobe.d/
         directory                   -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:                 No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="cramfs" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == cramfs:fs'

  "1.1.1.2":
    title: '1.1.1.2 | Ensure freevxfs kernel module is not available - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                freevxfs
         filesystem type is a free version of the Veritas type filesystem. This is the primary filesystem type for HPUX
        operating systems.
    remediation: |
        Run the following script to disable the                    freevxfs
         module:                 -IF-
         the module is available in the running kernel:
        Create a file ending in                      .conf
         with                      install freevxfs /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file ending in                      .conf
         with                      blacklist freevxfs
         in the                      /etc/modprobe.d/
         directory
        Unload                      freevxfs
         from the kernel                   -IF-
         available in ANY installed kernel:
        Create a file ending in                      .conf
         with                      blacklist freevxfs
         in the                      /etc/modprobe.d/
         directory                   -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:                 No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="freevxfs" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == freevxfs:fs'

  "1.1.1.3":
    title: '1.1.1.3 | Ensure hfs kernel module is not available - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                hfs
         filesystem type is a hierarchical filesystem that allows you to mount Mac OS filesystems.
    remediation: |
        Run the following script to disable the                    hfs
         module:                 -IF-
         the module is available in the running kernel:
        Create a file ending in                      .conf
         with                      install hfs /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file ending in                      .conf
         with                      blacklist hfs
         in the                      /etc/modprobe.d/
         directory
        Unload                      hfs
         from the kernel                   -IF-
         available in ANY installed kernel:
        Create a file ending in                      .conf
         with                      blacklist hfs
         in the                      /etc/modprobe.d/
         directory                   -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:                 No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="hfs" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == hfs:fs'

  "1.1.1.4":
    title: '1.1.1.4 | Ensure hfsplus kernel module is not available - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                hfsplus
         filesystem type is a hierarchical filesystem designed to replace                hfs
         that allows you to mount Mac OS filesystems.
    remediation: |
        Run the following script to disable the                    hfsplus
         module:                 -IF-
         the module is available in the running kernel:
        Create a file ending in                      .conf
         with                      install hfsplus /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file ending in                      .conf
         with                      blacklist hfsplus
         in the                      /etc/modprobe.d/
         directory
        Unload                      hfsplus
         from the kernel                   -IF-
         available in ANY installed kernel:
        Create a file ending in                      .conf
         with                      blacklist hfsplus
         in the                      /etc/modprobe.d/
         directory                   -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:                 No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="hfsplus" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == hfsplus:fs'

  "1.1.1.5":
    title: '1.1.1.5 | Ensure jffs2 kernel module is not available - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                jffs2
         journaling flash filesystem 2 filesystem type is a logstructured filesystem used in flash memory devices.
    remediation: |
        Run the following script to disable the                    jffs2
         module:                 -IF-
         the module is available in the running kernel:
        Create a file ending in                      .conf
         with                      install jffs2 /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file ending in                      .conf
         with                      blacklist jffs2
         in the                      /etc/modprobe.d/
         directory
        Unload                      jffs2
         from the kernel                   -IF-
         available in ANY installed kernel:
        Create a file ending in                      .conf
         with                      blacklist jffs2
         in the                      /etc/modprobe.d/
         directory                   -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:                 No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="jffs2" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.1.5', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == jffs2:fs'

  "1.1.1.6":
    title: '1.1.1.6 | Ensure squashfs kernel module is not available - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                squashfs
         filesystem type is a compressed readonly Linux filesystem embedded in small footprint systems. A
        squashfs
         image can be used without having to first decompress the image.
    remediation: |
        Run the following script to disable the                    squashfs
         module:                 -IF-
         the module is available in the running kernel:
        Create a file ending in                      .conf
         with                      install squashfs /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file ending in                      .conf
         with                      blacklist squashfs
         in the                      /etc/modprobe.d/
         directory
        Unload                      squashfs
         from the kernel                   -IF-
         available in ANY installed kernel:
        Create a file ending in                      .conf
         with                      blacklist squashfs
         in the                      /etc/modprobe.d/
         directory                   -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:                 No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="squashfs" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
                         Impact:
        As Snap packages utilizes                      squashfs
         as a compressed filesystem, disabling                      squashfs
         will cause Snap packages to fail.                   Snap
         application packages of software are self-contained and work across a range of Linux distributions. This is unlike
        traditional Linux package management approaches, like APT or RPM, which require specifically adapted packages per Linux
        distribution on an application update and delay therefore application deployment from developers to their software's
        end-user. Snaps themselves have no dependency on any external store ("App store"), can be obtained from any source and
        can be therefore used for upstream software deployment.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.1.6', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == squashfs:fs'

  "1.1.1.7":
    title: '1.1.1.7 | Ensure udf kernel module is not available - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        The                udf
         filesystem type is the universal disk format used to implement ISO/IEC 13346 and ECMA167 specifications. This is an
        open vendor filesystem type for data storage on a broad range of media. This filesystem type is necessary to support
        writing DVDs and newer optical disc formats.
    remediation: |
        Run the following script to disable the                    udf
         module:                 -IF-
         the module is available in the running kernel:
        Create a file ending in                      .conf
         with                      install udf /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file ending in                      .conf
         with                      blacklist udf
         in the                      /etc/modprobe.d/
         directory
        Unload                      udf
         from the kernel                   -IF-
         available in ANY installed kernel:
        Create a file ending in                      .conf
         with                      blacklist udf
         in the                      /etc/modprobe.d/
         directory                   -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:                 No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="udf" # set module name
           l_mtype="fs" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
                         Impact:
        Microsoft Azure requires the usage of                      udf
        .                   udf should not
         be disabled on systems run on Microsoft Azure.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.1.7', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == udf:fs'

  "1.1.1.8":
    title: '1.1.1.8 | Ensure usb-storage kernel module is not available - manual'
    section: 'Configure Filesystem Kernel Modules'
    description: |
        USB storage provides a means to transfer and store files ensuring persistence and availability of the files independent
        of network connection status.  Its popularity and utility has led to USBbased malware being a simple and common means
        for network infiltration and a first step to establishing a persistent threat within a networked environment.
    remediation: |
        Run the following script to disable the                    usb-storage
         module:                 -IF-
         the module is available in the running kernel:
        Create a file ending in                      .conf
         with                      install usb-storage /bin/false
         in the                      /etc/modprobe.d/
         directory
        Create a file ending in                      .conf
         with                      blacklist usb-storage
         in the                      /etc/modprobe.d/
         directory
        Unload                      usb-storage
         from the kernel                   -IF-
         available in ANY installed kernel:
        Create a file ending in                      .conf
         with                      blacklist usb-storage
         in the                      /etc/modprobe.d/
         directory                   -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:                 No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="usb-storage" # set module name
           l_mtype="drivers" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
                         Impact:
        Disabling the                      usb-storage
         module will disable any usage of USB storage devices.
        If requirements and local site policy allow the use of such devices, other solutions should be configured accordingly
        instead. One example of a commonly used solution is                      USBGuard
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.1.8', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == usb-storage:drivers'

  "1.1.2.1.1":
    title: '1.1.2.1.1 | Ensure tmp is a separate partition - manual'
    section: 'Configure /tmp'
    description: |
        The                  /tmp
         directory is a worldwritable directory used for temporary storage by all users and some applications.               IF
         an entry for                  /tmp
         exists in                  /etc/fstab
         it will take precedence over entries in systemd default unit file.               Note
         In an environment where the main system is diskless and connected to iSCSI, entries in                  /etc/fstab
         may not take precedence.               /tmp
         can be configured to use                  tmpfs
        .               tmpfs
         puts everything into the kernel internal caches and grows and shrinks to accommodate the files it contains and is able
        to swap unneeded pages out to swap space. It has maximum size limits which can be adjusted on the fly via
        mount o remount
        .
        Since tmpfs lives completely in the page cache and on swap, all tmpfs pages will be shown as Shmem in
        /proc/meminfo
         and Shared in                  free
        . Notice that these counters also include shared memory. The most reliable way to get the count is using
        df
         and                  du
        .               tmpfs has three mount options for sizing size
         The limit of allocated bytes for this tmpfs instance. The default is half of your physical RAM without swap. If you
        oversize your tmpfs instances the machine will deadlock since the OOM handler will not be able to free that memory.
        nrblocks
         The same as size, but in blocks of PAGESIZE.                 nrinodes
         The maximum number of inodes for this instance. The default is half of the number of your physical RAM pages, or on a
        machine with highmem the number of lowmem RAM pages, whichever is the lower.
        These parameters accept a suffix k, m or g and can be changed on remount. The size parameter also accepts a suffix
        to limit this tmpfs instance to that percentage of your physical RAM. The default, when neither                  size
         nor                  nrblocks
         is specified, is                  size50
        .
    remediation: |
        First ensure that systemd is correctly configured to ensure that                      /tmp
         will be mounted at boot time.                   # systemctl unmask tmp.mount

        For specific configuration requirements of the                      /tmp
         mount for your environment, modify                      /etc/fstab
        .
        Example of using                      tmpfs
         with specific mount options:                   tmpfs	/tmp	tmpfs     defaults,rw,nosuid,nodev,noexec,relatime,size=2G  0
        0
         Note:
         the                      size=2G
         is an example of setting a specific size for                      tmpfs
        .                   Example of using a volume or disk with specific mount options. The source location of the volume or
        disk will vary depending on your environment: <device> /tmp    <fstype>    defaults,nodev,nosuid,noexec   0 0
         Impact:
        By design files saved to                        /tmp
         should have no expectation of surviving a reboot of the system.                        tmpfs
         is ram based and all files stored to                        tmpfs
         will be lost when the system is rebooted.
        If files need to be persistent through a reboot, they should be saved to                        /var/tmp
         not                        /tmp
        .
        Since the                        /tmp
         directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to
        tmpfs
         or a separate partition.
        Running out of                        /tmp
         space is a problem regardless of what kind of filesystem lies under it, but in a configuration where
        /tmp
         is not a separate file system it will essentially have the whole disk available, as the default installation only
        creates a single                        /
         partition. On the other hand, a RAM-based                        /tmp
         (as with                        tmpfs
        ) will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily.
        Another alternative is to create a dedicated partition for                        /tmp
         from a separate volume or disk. One of the downsides of a disk-based dedicated partition is that it will be slower than
        tmpfs
         which is RAM-based.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /tmp'

  "1.1.2.1.2":
    title: '1.1.2.1.2 | Ensure nodev option set on tmp partition - manual'
    section: 'Configure /tmp'
    description: |
        The                  nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        - IF -
         a separate partition exists for                      /tmp
        .
        Edit the                      /etc/fstab
         file and add                      nodev
         to the fourth field (mounting options) for the                      /tmp
         partition.                   Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /tmp
         with the configured options:                   # mount -o remount /tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /tmp:nodev'

  "1.1.2.1.3":
    title: '1.1.2.1.3 | Ensure nosuid option set on tmp partition - manual'
    section: 'Configure /tmp'
    description: |
        The                  nosuid
         mount option specifies that the filesystem cannot contain                  setuid
         files.
    remediation: |
        - IF -
         a separate partition exists for                      /tmp
        .
        Edit the                      /etc/fstab
         file and add                      nosuid
         to the fourth field (mounting options) for the                      /tmp
         partition.                   Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /tmp
         with the configured options:                   # mount -o remount /tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /tmp:nosuid'

  "1.1.2.1.4":
    title: '1.1.2.1.4 | Ensure noexec option set on tmp partition - manual'
    section: 'Configure /tmp'
    description: |
        The                  noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        - IF -
         a separate partition exists for                      /tmp
        .
        Edit the                      /etc/fstab
         file and add                      noexec
         to the fourth field (mounting options) for the                      /tmp
         partition.                   Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /tmp
         with the configured options:                   # mount -o remount /tmp
         Impact:
        Setting the                        noexec
         option on                        /tmp
         may prevent installation and/or updating of some 3rd party software.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /tmp:noexec'

  "1.1.2.2.1":
    title: '1.1.2.2.1 | Ensure devshm is a separate partition - manual'
    section: 'Configure /dev/shm'
    description: |
        The                  /dev/shm
         directory is a worldwritable directory that can function as shared memory that facilitates inter process communication
        IPC.
    remediation: |
        For specific configuration requirements of the                      /dev/shm
         mount for your environment, modify                      /etc/fstab
        .                   Example: tmpfs	/dev/shm	tmpfs     defaults,rw,nosuid,nodev,noexec,relatime,size=2G  0 0
         Impact:
        Since the                        /dev/shm
         directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate
        partition.                     /dev/shm
         utilizing                        tmpfs
         can be resized using the                        size={size}
         parameter in the relevant entry in                        /etc/fstab
        .
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /dev/shm'

  "1.1.2.2.2":
    title: '1.1.2.2.2 | Ensure nodev option set on devshm partition - manual'
    section: 'Configure /dev/shm'
    description: |
        The                  nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        - IF -
         a separate partition exists for                      /dev/shm
        .
        Edit the                      /etc/fstab
         file and add                      nodev
         to the fourth field (mounting options) for the                      /dev/shm
          partition. See the                      fstab(5)
         manual page for more information.                   Example: tmpfs /dev/shm    tmpfs
        defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /dev/shm
         with the configured options:                   # mount -o remount /dev/shm
         Note:
         It is recommended to use                      tmpfs
         as the device/filesystem type as                      /dev/shm
         is used as shared memory space by applications.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /dev/shm:nodev'

  "1.1.2.2.3":
    title: '1.1.2.2.3 | Ensure nosuid option set on devshm partition - manual'
    section: 'Configure /dev/shm'
    description: |
        The                  nosuid
         mount option specifies that the filesystem cannot contain                  setuid
          files.
    remediation: |
        - IF -
         a separate partition exists for                      /dev/shm
        .
        Edit the                      /etc/fstab
         file and add                      nosuid
         to the fourth field (mounting options) for the                      /dev/shm
          partition. See the                      fstab(5)
         manual page for more information.                   Example: tmpfs /dev/shm    tmpfs
        defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /dev/shm
         with the configured options:                   # mount -o remount /dev/shm
         Note:
         It is recommended to use                      tmpfs
         as the device/filesystem type as                      /dev/shm
         is used as shared memory space by applications.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /dev/shm:nosuid'

  "1.1.2.2.4":
    title: '1.1.2.2.4 | Ensure noexec option set on devshm partition - manual'
    section: 'Configure /dev/shm'
    description: |
        The                  noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        - IF -
         a separate partition exists for                      /dev/shm
        .
        Edit the                      /etc/fstab
         file and add                      noexec
         to the fourth field (mounting options) for the                      /dev/shm
         partition.                   Example: tmpfs /dev/shm    tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /dev/shm
         with the configured options:                   # mount -o remount /dev/shm
         Note:
         It is recommended to use                      tmpfs
         as the device/filesystem type as                      /dev/shm
         is used as shared memory space by applications.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /dev/shm:noexec'

  "1.1.2.3.1":
    title: '1.1.2.3.1 | Ensure separate partition exists for home - manual'
    section: 'Configure /home'
    description: |
        The                  /home
         directory is used to support disk storage needs of local users.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /home
        .
        For systems that were previously installed, create a new partition and configure                      /etc/fstab
         as appropriate.                   Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.2.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /home'

  "1.1.2.3.2":
    title: '1.1.2.3.2 | Ensure nodev option set on home partition - manual'
    section: 'Configure /home'
    description: |
        The                  nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        - IF -
         a separate partition exists for                      /home
        .
        Edit the                      /etc/fstab
         file and add                      nodev
         to the fourth field (mounting options) for the                      /home
         partition.                   Example: <device> /home    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /home
         with the configured options:                   # mount -o remount /home
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /home:nodev'

  "1.1.2.3.3":
    title: '1.1.2.3.3 | Ensure nosuid option set on home partition - manual'
    section: 'Configure /home'
    description: |
        The                  nosuid
         mount option specifies that the filesystem cannot contain                  setuid
          files.
    remediation: |
        - IF -
         a separate partition exists for                      /home
        .
        Edit the                      /etc/fstab
         file and add                      nosuid
         to the fourth field (mounting options) for the                      /home
         partition.                   Example: <device> /home    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /home
         with the configured options:                   # mount -o remount /home
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.3.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /home:nosuid'

  "1.1.2.4.1":
    title: '1.1.2.4.1 | Ensure separate partition exists for var - manual'
    section: 'Configure /var'
    description: |
        The                  /var
         directory is used by daemons and other system services to temporarily store dynamic data. Some directories created by
        these processes may be worldwritable.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /var
        .
        For systems that were previously installed, create a new partition and configure                      /etc/fstab
         as appropriate.                   Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.2.4.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var'

  "1.1.2.4.2":
    title: '1.1.2.4.2 | Ensure nodev option set on var partition - manual'
    section: 'Configure /var'
    description: |
        The                  nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        - IF -
         a separate partition exists for                      /var
        .
        Edit the                      /etc/fstab
         file and add                      nodev
         to the fourth field (mounting options) for the                      /var
         partition.                   Example: <device> /var    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /var
         with the configured options:                   # mount -o remount /var
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.4.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var:nodev'

  "1.1.2.4.3":
    title: '1.1.2.4.3 | Ensure nosuid option set on var partition - manual'
    section: 'Configure /var'
    description: |
        The                  nosuid
         mount option specifies that the filesystem cannot contain                  setuid
         files.
    remediation: |
        - IF -
         a separate partition exists for                      /var
        .
        Edit the                      /etc/fstab
         file and add                      nosuid
         to the fourth field (mounting options) for the                      /var
         partition.                   Example: <device> /var    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /var
         with the configured options:                   # mount -o remount /var
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.4.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var:nosuid'

  "1.1.2.5.1":
    title: '1.1.2.5.1 | Ensure separate partition exists for vartmp - manual'
    section: 'Configure /var/tmp'
    description: |
        The                  /var/tmp
         directory is a worldwritable directory used for temporary storage by all users and some applications. Temporary files
        residing in                  /var/tmp
         are to be preserved between reboots.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /var/tmp
        .
        For systems that were previously installed, create a new partition and configure                      /etc/fstab
         as appropriate.                   Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.2.5.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/tmp'

  "1.1.2.5.2":
    title: '1.1.2.5.2 | Ensure nodev option set on vartmp partition - manual'
    section: 'Configure /var/tmp'
    description: |
        The                  nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        - IF -
         a separate partition exists for                      /var/tmp
        .
        Edit the                      /etc/fstab
         file and add                      nodev
         to the fourth field (mounting options) for the                      /var/tmp
         partition.                   Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /var/tmp
         with the configured options:                   # mount -o remount /var/tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.5.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/tmp:nodev'

  "1.1.2.5.3":
    title: '1.1.2.5.3 | Ensure nosuid option set on vartmp partition - manual'
    section: 'Configure /var/tmp'
    description: |
        The                  nosuid
         mount option specifies that the filesystem cannot contain                  setuid
         files.
    remediation: |
        - IF -
         a separate partition exists for                      /var/tmp
        .
        Edit the                      /etc/fstab
         file and add                      nosuid
         to the fourth field (mounting options) for the                      /var/tmp
         partition.                   Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /var/tmp
         with the configured options:                   # mount -o remount /var/tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.5.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/tmp:nosuid'

  "1.1.2.5.4":
    title: '1.1.2.5.4 | Ensure noexec option set on vartmp partition - manual'
    section: 'Configure /var/tmp'
    description: |
        The                  noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        - IF -
         a separate partition exists for                      /var/tmp
        .
        Edit the                      /etc/fstab
         file and add                      noexec
         to the fourth field (mounting options) for the                      /var/tmp
         partition.                   Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /var/tmp
         with the configured options:                   # mount -o remount /var/tmp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.5.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/tmp:noexec'

  "1.1.2.6.1":
    title: '1.1.2.6.1 | Ensure separate partition exists for varlog - manual'
    section: 'Configure /var/log'
    description: |
        The                  /var/log
          directory is used by system services to store log data.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /var/log
         .
        For systems that were previously installed, create a new partition and configure                      /etc/fstab
          as appropriate.                   Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.2.6.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/log'

  "1.1.2.6.2":
    title: '1.1.2.6.2 | Ensure nodev option set on varlog partition - manual'
    section: 'Configure /var/log'
    description: |
        The                  nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        - IF -
         a separate partition exists for                      /var/log
        .
        Edit the                      /etc/fstab
         file and add                      nodev
         to the fourth field (mounting options) for the                      /var/log
         partition.                   Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /var/log
         with the configured options:                   # mount -o remount /var/log
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.6.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/log:nodev'

  "1.1.2.6.3":
    title: '1.1.2.6.3 | Ensure nosuid option set on varlog partition - manual'
    section: 'Configure /var/log'
    description: |
        The                  nosuid
         mount option specifies that the filesystem cannot contain                  setuid
         files.
    remediation: |
        - IF -
         a separate partition exists for                      /var/log
        .
        Edit the                      /etc/fstab
         file and add                      nosuid
         to the fourth field (mounting options) for the                      /var/log
         partition.                   Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /var/log
         with the configured options:                   # mount -o remount /var/log
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.6.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/log:nosuid'

  "1.1.2.6.4":
    title: '1.1.2.6.4 | Ensure noexec option set on varlog partition - manual'
    section: 'Configure /var/log'
    description: |
        The                  noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        - IF -
         a separate partition exists for                      /var/log
        .
        Edit the                      /etc/fstab
         file and add                      noexec
         to the fourth field (mounting options) for the                      /var/log
         partition.                   Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0

        Run the following command to remount                      /var/log
         with the configured options:                   # mount -o remount /var/log
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.6.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/log:noexec'

  "1.1.2.7.1":
    title: '1.1.2.7.1 | Ensure separate partition exists for varlogaudit - manual'
    section: 'Configure /var/log/audit'
    description: |
        The auditing daemon,                  auditd
        , stores log data in the                  /var/log/audit
         directory.
    remediation: |
        For new installations, during installation create a custom partition setup and specify a separate partition for
        /var/log/audit
        .
        For systems that were previously installed, create a new partition and configure                      /etc/fstab
         as appropriate.                   Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate
        filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for
        the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.1.2.7.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/log/audit'

  "1.1.2.7.2":
    title: '1.1.2.7.2 | Ensure nodev option set on varlogaudit partition - manual'
    section: 'Configure /var/log/audit'
    description: |
        The                  nodev
         mount option specifies that the filesystem cannot contain special devices.
    remediation: |
        - IF -
         a separate partition exists for                      /var/log/audit
        .
        Edit the                      /etc/fstab
         file and add                      nodev
         to the fourth field (mounting options) for the                      /var/log/audit
         partition.                   Example: <device> /var/log/audit    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime
        0 0

        Run the following command to remount                      /var/log/audit
         with the configured options:                   # mount -o remount /var/log/audit
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.7.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/log/audit:nodev'

  "1.1.2.7.3":
    title: '1.1.2.7.3 | Ensure nosuid option set on varlogaudit partition - manual'
    section: 'Configure /var/log/audit'
    description: |
        The                  nosuid
         mount option specifies that the filesystem cannot contain                  setuid
         files.
    remediation: |
        - IF -
         a separate partition exists for                      /var/log/audit
        .
        Edit the                      /etc/fstab
         file and add                      nosuid
         to the fourth field (mounting options) for the                      /var/log/audit
         partition.                   Example: <device> /var/log/audit    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime
        0 0

        Run the following command to remount                      /var/log/audit
         with the configured options:                   # mount -o remount /var/log/audit
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.7.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/log/audit:nosuid'

  "1.1.2.7.4":
    title: '1.1.2.7.4 | Ensure noexec option set on varlogaudit partition - manual'
    section: 'Configure /var/log/audit'
    description: |
        The                  noexec
         mount option specifies that the filesystem cannot contain executable binaries.
    remediation: |
        - IF -
         a separate partition exists for                      /var/log/audit
        .
        Edit the                      /etc/fstab
         file and add                      noexec
         to the fourth field (mounting options) for the                      /var/log/audit
         partition.                   Example: <device> /var/log/audit    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime
        0 0

        Run the following command to remount                      /var/log/audit
         with the configured options:                   # mount -o remount /var/log/audit
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.1.2.7.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /var/log/audit:noexec'

  "1.2.1":
    title: '1.2.1 | Ensure GPG keys are configured - manual'
    section: 'Configure Software and Patch Management'
    description: |
        The RPM Package Manager implements GPG key signing to verify package integrity during and after installation.
    remediation: |
        Update your package manager GPG keys in accordance with site policy.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.2.2":
    title: '1.2.2 | Ensure gpgcheck is globally activated'
    section: 'Configure Software and Patch Management'
    description: |
        The              gpgcheck
         option, found in the main section of the              /etc/dnf/dnf.conf
         and individual              /etc/yum.repos.d/
         files, determines if an RPM packages signature is checked prior to its installation.
    remediation: |
        Edit                  /etc/dnf/dnf.conf
         and set                  gpgcheck=1
         in the                  [main]
         section.               Example: # sed -i 's/^gpgcheck\s*=\s*.*/gpgcheck=1/' /etc/dnf/dnf.conf

        Edit any failing files in                  /etc/yum.repos.d/*
         and set all instances starting with                  gpgcheck
         to                  1
        .               Example: # find /etc/yum.repos.d/ -name "*.repo" -exec echo "Checking:" {} \; -exec sed -i
        's/^gpgcheck\s*=\s*.*/gpgcheck=1/' {} \;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.2.3":
    title: '1.2.3 | Ensure repo gpgcheck is globally activated - manual'
    section: 'Configure Software and Patch Management'
    description: |
        The              repogpgcheck
         option, found in the main section of the              /etc/dnf/dnf.conf
         and individual              /etc/yum.repos.d/
         files, will perform a GPG signature check on the repodata.
    remediation: |
        Global configuration
        Edit                  /etc/dnf/dnf.conf
         and set                  repo_gpgcheck=1
         in the                  [main]
         section.               Example:
        [main]
        repo_gpgcheck=1
                       Per repository configuration First check that the particular repository support GPG checking on the
        repodata.
        Edit any failing files in                  /etc/yum.repos.d/*
         and set all instances starting with                  repo_gpgcheck
         to                  1
        .               Impact:
        Not all repositories, notably RedHat, support                    repo_gpgcheck
        . Take care to set this value to false (default) for particular repositories that do not support it. If enabled on
        repositories that do not support                    repo_gpgcheck
         installation of packages will fail.
        Research is required by the user to determine which repositories is configured on the local system and, from that list,
        which support                    repo_gpgcheck
        .
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_1.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.2.4":
    title: '1.2.4 | Ensure package manager repositories are configured - manual'
    section: 'Configure Software and Patch Management'
    description: |
        Systems need to have the respective package manager repositories configured to ensure that the system is able to receive
        the latest patches and updates.
    remediation: |
        Configure your package manager repositories according to site policy.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.2.5":
    title: '1.2.5 | Ensure updates patches and additional security software are installed - manual'
    section: 'Configure Software and Patch Management'
    description: |
        Periodically patches are released for included software either due to security flaws or to include additional
        functionality.
    remediation: |
        Use your package manager to update all packages on the system according to site policy. The following command will
        install all available updates: # dnf update
         Once the update process is complete, verify if reboot is required to load changes. dnf needs-restarting -r
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.2.5', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.3.1":
    title: '1.3.1 | Ensure bootloader password is set'
    section: 'Configure Secure Boot Settings'
    description: |
        Setting the boot loader password will require that anyone rebooting the system must enter a password before being able
        to set command line boot parameters.
    remediation: |
        Create an encrypted password with                  grub2-setpassword
        :
        # grub2-setpassword

        Enter password: <password>
        Confirm password: <password>
                       Impact:
        If password protection is enabled, only the designated superuser can edit a GRUB 2 menu item by pressing
        e
         or access the GRUB 2 command line by pressing                    c
                                 If GRUB 2 is set up to boot automatically to a password-protected menu entry the user has no
        option to back out of the password prompt to select another menu entry. Holding the SHIFT key will not display the menu
        in this case. The user must enter the correct username and password. If unable, the configuration files will have to be
        edited via the LiveCD or other means to fix the problem
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.3.2":
    title: '1.3.2 | Ensure permissions on bootloader config are configured - manual'
    section: 'Configure Secure Boot Settings'
    description: |
        The grub files contain information on boot settings and passwords for unlocking boot options.
    remediation: |
        Run the following to update the mode, ownership, and group ownership of the grub configuration files: -IF-
         the system uses UEFI (Files located in                  /boot/efi/EFI/*
        )
        Edit                  /etc/fstab
         and add the                  fmask=0077
        ,                  uid=0
        , and                  gid=0
         options:               Example: <device> /boot/efi vfat defaults,umask=0027,fmask=0077,uid=0,gid=0 0 0
         Note:
         This may require a re-boot to enable the change               -OR- -IF-
         the system uses BIOS (Files located in                  /boot/grub2/*
        )               Run the following commands to set ownership and permissions on your grub configuration file(s):
        # [ -f /boot/grub2/grub.cfg ] && chown root:root /boot/grub2/grub.cfg
        # [ -f /boot/grub2/grub.cfg ] && chmod u-x,go-rwx /boot/grub2/grub.cfg

        # [ -f /boot/grub2/grubenv ] && chown root:root /boot/grub2/grubenv
        # [ -f /boot/grub2/grubenv ] && chmod u-x,go-rwx /boot/grub2/grubenv

        # [ -f /boot/grub2/user.cfg ] && chown root:root /boot/grub2/user.cfg
        # [ -f /boot/grub2/user.cfg ] && chmod u-x,go-rwx /boot/grub2/user.cfg
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.4.1":
    title: '1.4.1 | Ensure address space layout randomization ASLR is enabled - manual'
    section: 'Configure Additional Process Hardening'
    description: |
        Address space layout randomization ASLR is an exploit mitigation technique which randomly arranges the address space of
        key data areas of a process.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               kernel.randomize_va_space = 2 Example:
        # printf "
        kernel.randomize_va_space = 2
        " >> /etc/sysctl.d/60-kernel_sysctl.conf
                       Run the following command to set the active kernel parameter: # sysctl -w kernel.randomize_va_space=2
         Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.4.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == kernel.randomize_va_space=2'

  "1.4.2":
    title: '1.4.2 | Ensure ptrace scope is restricted - manual'
    section: 'Configure Additional Process Hardening'
    description: |
        The              ptrace
         system call provides a means by which one process the tracer may observe and control the execution of another process
        the tracee, and examine and change the tracees memory and registers.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               kernel.yama.ptrace_scope = 1 Example:
        # printf "
        kernel.yama.ptrace_scope = 1
        " >> /etc/sysctl.d/60-kernel_sysctl.conf
                       Run the following command to set the active kernel parameter: # sysctl -w kernel.yama.ptrace_scope=1
         Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.4.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == kernel.yama.ptrace_scope=1'

  "1.4.3":
    title: '1.4.3 | Ensure core dump backtraces are disabled - manual'
    section: 'Configure Additional Process Hardening'
    description: |
        A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also
        be used to glean confidential information from a core file.
    remediation: |
        Create or edit the file                  /etc/systemd/coredump.conf
        , or a file in the                  /etc/systemd/coredump.conf.d
         directory ending in                  .conf
        .               Edit or add the following line: ProcessSizeMax=0
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.4.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ProcessSizeMax=0:/etc/systemd/coredump.conf'

  "1.4.4":
    title: '1.4.4 | Ensure core dump storage is disabled - manual'
    section: 'Configure Additional Process Hardening'
    description: |
        A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also
        be used to glean confidential information from a core file.
    remediation: |
        Create or edit the file                  /etc/systemd/coredump.conf
        , or a file in the                  /etc/systemd/coredump.conf.d
         directory ending in                  .conf
        .               Edit or add the following line: Storage=none
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.4.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == Storage=none:/etc/systemd/coredump.conf'

  "1.5.1.1":
    title: '1.5.1.1 | Ensure SELinux is installed'
    section: 'Configure SELinux'
    description: |
        SELinux provides Mandatory Access Control.
    remediation: |
        Run the following command to install                    SELinux
        :                 # dnf install libselinux
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.5.1.2":
    title: '1.5.1.2 | Ensure SELinux is not disabled in bootloader configuration - manual'
    section: 'Configure SELinux'
    description: |
        Configure SELINUX to be enabled at boot time and verify that it has not been overwritten by the grub boot parameters.
    remediation: |
        Run the following command to remove the                    selinux=0
         and                    enforcing=0
         parameters:                 grubby --update-kernel ALL --remove-args "selinux=0 enforcing=0"

        Run the following command to remove the                    selinux=0
         and                    enforcing=0
         parameters if they were created by the deprecated                    grub2-mkconfig
         command:                 # grep -Prsq -- '\h*([^#\n\r]+\h+)?kernelopts=([^#\n\r]+\h+)?(selinux|enforcing)=0\b'
        /boot/grub2 /boot/efi && grub2-mkconfig -o "$(grep -Prl --
        '\h*([^#\n\r]+\h+)?kernelopts=([^#\n\r]+\h+)?(selinux|enforcing)=0\b' /boot/grub2 /boot/efi)"
         Impact: Files created while SELinux is disabled are not labeled at all. This behavior causes problems when changing to
        enforcing mode because files are labeled incorrectly or are not labeled at all. To prevent incorrectly labeled and
        unlabeled files from causing problems, file systems are automatically relabeled when changing from the disabled state to
        permissive or enforcing mode. This can be a long running process that should be accounted for as it may extend downtime
        during initial re-boot.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == selinux=0'
            - name: Undefined
              rule: 'should cmp == enforcing=0'

  "1.5.1.3":
    title: '1.5.1.3 | Ensure SELinux policy is configured'
    section: 'Configure SELinux'
    description: |
        Configure SELinux to meet or exceed the default targeted policy, which constrains daemons and system software only.
    remediation: |
        Edit the                    /etc/selinux/config
         file to set the SELINUXTYPE parameter:                 SELINUXTYPE=targeted
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^Loaded\s+policy\s+name:\s+(targeted|mls)\s*(\s+#.*)?$'

  "1.5.1.4":
    title: '1.5.1.4 | Ensure the SELinux mode is not disabled'
    section: 'Configure SELinux'
    description: |
        SELinux can run in one of three modes disabled, permissive, or enforcing Enforcing
          Is the default, and recommended, mode of operation in enforcing mode SELinux operates normally, enforcing the loaded
        security policy on the entire system.               Permissive
          The system acts as if SELinux is enforcing the loaded security policy, including labeling objects and emitting access
        denial entries in the logs, but it does not actually deny any operations. While not recommended for production systems,
        permissive mode can be helpful for SELinux policy development.               Disabled
          Is strongly discouraged not only does the system avoid enforcing the SELinux policy, it also avoids labeling any
        persistent objects such as files, making it difficult to enable SELinux in the future               Note
         You can set individual domains to permissive mode while the system runs in enforcing mode. For example, to make the
        httpdt domain permissive              semanage permissive a httpdt
    remediation: |
        Run one of the following commands to set SELinux's running mode:
        To set SELinux mode to                    Enforcing
        :                 # setenforce 1
         -OR-
        To set SELinux mode to                    Permissive
        :                 # setenforce 0

        Edit the                    /etc/selinux/config
         file to set the SELINUX parameter:                 For Enforcing mode: SELINUX=enforcing
         -OR- For Permissive mode: SELINUX=permissive
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^Current mode:\s+(enforcing|permissive)$'
            - name: Undefined
              rule: 'should cmp == ^Mode from config file:\s+(enforcing|permissive)$'

  "1.5.1.5":
    title: '1.5.1.5 | Ensure the SELinux mode is enforcing'
    section: 'Configure SELinux'
    description: |
        SELinux can run in one of three modes disabled, permissive, or enforcing Enforcing
          Is the default, and recommended, mode of operation in enforcing mode SELinux operates normally, enforcing the loaded
        security policy on the entire system.               Permissive
          The system acts as if SELinux is enforcing the loaded security policy, including labeling objects and emitting access
        denial entries in the logs, but it does not actually deny any operations. While not recommended for production systems,
        permissive mode can be helpful for SELinux policy development.               Disabled
          Is strongly discouraged not only does the system avoid enforcing the SELinux policy, it also avoids labeling any
        persistent objects such as files, making it difficult to enable SELinux in the future               Note You can set
        individual domains to permissive mode while the system runs in enforcing mode. For example, to make the httpdt domain
        permissive  semanage permissive a httpdt
    remediation: |
        Run the following command to set SELinux's running mode: # setenforce 1

        Edit the                    /etc/selinux/config
         file to set the SELINUX parameter:                 For Enforcing mode: SELINUX=enforcing
         Impact: Running SELinux in Enforcing mode may block intended access to files or processes if the SELinux policy is not
        correctly configured. If this occurs, review the system logs for details and update labels or policy as appropriate.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.5.1.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^Current mode:\s+enforcing$'
            - name: Undefined
              rule: 'should cmp == ^Mode from config file:\s+enforcing$'

  "1.5.1.6":
    title: '1.5.1.6 | Ensure no unconfined services exist - manual'
    section: 'Configure SELinux'
    description: |
        Unconfined processes run in unconfined domains
    remediation: |
        Investigate any unconfined processes found during the audit action. They may need to have an existing security context
        assigned to them or a policy built for them.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.1.6', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.5.1.7":
    title: '1.5.1.7 | Ensure the MCS Translation Service mcstrans is not installed'
    section: 'Configure SELinux'
    description: |
        The                mcstransd
         daemon provides category label information to client processes requesting information. The label translations are
        defined in                /etc/selinux/targeted/setrans.conf
    remediation: |
        Run the following command to uninstall                    mcstrans
        :                 # dnf remove mcstrans
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.5.1.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.6.1":
    title: '1.6.1 | Ensure system wide crypto policy is not set to legacy'
    section: 'Configure system wide crypto policy'
    description: |
        When a systemwide policy is set up, the default behavior of applications will be to follow the policy. Applications will
        be unable to use algorithms and
        protocols that do not meet the policy, unless you explicitly request the application to do so. The systemwide
        cryptopolicies followed by the crypto core components allow consistently deprecating and disabling algorithms
        systemwide.
        The              LEGACY
         policy ensures maximum compatibility with version 5 of the operating system and earlier it is less secure due to an
        increased attack surface. In addition to the              DEFAULT
         level algorithms and protocols, it includes support for the              TLS 1.0
         and              1.1
         protocols. The algorithms              DSA
        ,              3DES
        , and              RC4
         are allowed, while              RSA keys
         and              DiffieHellman
         parameters are accepted if they are at least 1023 bits long.
    remediation: |
        Run the following command to change the system-wide crypto policy # update-crypto-policies --set <CRYPTO POLICY>
         Example: # update-crypto-policies --set DEFAULT
         Run the following to make the updated system-wide crypto policy active # update-crypto-policies
         Impact:
        Environments that require compatibility with older insecure protocols may require the use
        of the less secure                    LEGACY
         policy level.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.6.2":
    title: '1.6.2 | Ensure system wide crypto policy disables sha1 hash and signature support'
    section: 'Configure system wide crypto policy'
    description: |
        SHA1 Secure Hash Algorithm is a cryptographic hash function that produces a 160 bit hash value.
    remediation: |
        Note:
        The commands below are written for the included                    DEFAULT
         system-wide crypto policy. If another policy is in use and follows local site policy, replace
        DEFAULT
         with the name of your system-wide crypto policy.
        Multiple subpolicies may be assigned to a policy as a colon separated list. e.g.                    DEFAULT:NO-SHA1:NO-
        SSHCBC

        The module for disabling SHA-1 is available from release 8.3 in                    /usr/share/crypto-
        policies/policies/modules/NO-SHA1.pmod
        . This may be copied to                    /etc/crypto-policies/policies/modules/NO-SHA1.pmod
        , verified, and used instead of creating a file ending in                    .pmod
         in the                    /etc/crypto-policies/policies/modules/
         directory.
        Any subpolicy not included in the                    update-crypto-policies --set
         command will                    not
         be applied to the system wide crypto policy.
        Subpolicies                    must exist
         before they can be applied to the system wide crypto policy.
        Create or edit a file in                  /etc/crypto-policies/policies/modules/
         ending in                  .pmod
         and add or modify the following lines:
        hash = -SHA1
        sign = -*-SHA1
        sha1_in_certs = 0
                       Example: # echo -e "# This is a subpolicy dropping the SHA1 hash and signature support\nhash =
        -SHA1\nsign = -*-SHA1\nsha1_in_certs = 0" > /etc/crypto-policies/policies/modules/NO-SHA1.pmod
         Run the following command to update the system-wide cryptographic policy # update-crypto-policies --set
        <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<SUBPOLICY3>
         Example: update-crypto-policies --set DEFAULT:NO-SHA1
         Run the following command to reboot the system to make your cryptographic settings effective for already running
        services and applications: # reboot
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.6.3":
    title: '1.6.3 | Ensure system wide crypto policy disables cbc for ssh'
    section: 'Configure system wide crypto policy'
    description: |
        Cypher Block Chaining CBC is an algorithm that uses a block cipher.
    remediation: |
        Note:
        The commands below are written for the included                    DEFAULT
         system-wide crypto policy. If another policy is in use and follows local site policy, replace
        DEFAULT
         with the name of your system-wide crypto policy.
        Multiple subpolicies may be assigned to a policy as a colon separated list. e.g.                    DEFAULT:NO-SHA1:NO-
        SSHCBC

        Any subpolicy not included in the                    update-crypto-policies --set
         command will                    not
         be applied to the system wide crypto policy.
        Subpolicies                    must exist
         before they can be applied to the system wide crypto policy.
        Create or edit a file in                  /etc/crypto-policies/policies/modules/
         ending in                  .pmod
         and add or modify                  one
         of the the following lines:
        cipher@SSH = -*-CBC # Disables the CBC cipher for SSH

        -OR-

        cipher = -*-CBC # Disables the CBC cipher
                       Example: # echo -e "# This is a subpolicy to disable all CBC mode ciphers\n# for the SSH protocol (libssh
        and OpenSSH)\ncipher@SSH = -*-CBC" > /etc/crypto-policies/policies/modules/NO-SSHCBC.pmod
         Run the following command to update the system-wide cryptographic policy # update-crypto-policies --set
        <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<SUBPOLICY3>
         Example: update-crypto-policies --set DEFAULT:NO-SHA1:NO-SSHCBC
         Run the following command to reboot the system to make your cryptographic settings effective for already running
        services and applications: # reboot
         Impact: CBC ciphers might be the only common cyphers when connecting to older SSH clients and servers
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.6.4":
    title: '1.6.4 | Ensure system wide crypto policy disables macs less than 128 bits'
    section: 'Configure system wide crypto policy'
    description: |
        Message Authentication Code MAC algorithm is a family of cryptographic functions that is parameterized by a symmetric
        key. Each of the functions can act on input data called a message of variable length to produce an output value of a
        specified length. The output value is called the MAC of the input message. A MAC algorithm can be used to provide
        dataorigin authentication and dataintegrity protection
    remediation: |
        Note:
        The commands below are written for the included                    DEFAULT
         system-wide crypto policy. If another policy is in use and follows local site policy, replace
        DEFAULT
         with the name of your system-wide crypto policy.
        Multiple subpolicies may be assigned to a policy as a colon separated list. e.g.                    DEFAULT:NO-SHA1:NO-
        SSHCBC:NO-WEAKMAC

        Any subpolicy not included in the                    update-crypto-policies --set
         command will                    not
         be applied to the system wide crypto policy.
        Subpolicies                    must exist
         before they can be applied to the system wide crypto policy.
        Create or edit a file in                  /etc/crypto-policies/policies/modules/
         ending in                  .pmod
         and add or modify                  one
         of the following lines:               mac = -*-64* # Disables weak macs
         Example: # echo -e "# This is a subpolicy to disable weak macs\nmac = -*-64" > /etc/crypto-
        policies/policies/modules/NO-WEAKMAC.pmod
         Run the following command to update the system-wide cryptographic policy # update-crypto-policies --set
        <CRYPTO_POLICY>:<CRYPTO_SUBPOLICY1>:<CRYPTO_SUBPOLICY2>:<SUBPOLICY3>
         Example: update-crypto-policies --set DEFAULT:NO-SHA1:NO-SSHCBC:NO-WEAKMAC
         Run the following command to reboot the system to make your cryptographic settings effective for already running
        services and applications: # reboot
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.6.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.7.1":
    title: '1.7.1 | Ensure message of the day is configured properly - manual'
    section: 'Configure Command Line Warning Banners'
    description: |
        The contents of the              /etc/motd
          file are displayed to users after login and function as a message of the day for authenticated users.
        Unixbased systems have typically displayed information about the OS release and patch level upon logging in to the
        system. This information can be useful to developers who are developing software for a particular OS platform. If
        mingetty8
         supports the following options, they display operating system information              \m
           machine architecture              \r
           operating system release              \s
           operating system name              \v
           operating system version
    remediation: |
        Edit the                  /etc/motd
          file with the appropriate contents according to your site policy, remove any instances of                  \m
         ,                  \r
         ,                  \s
         ,                  \v
         or references to the                  OS platform
                              -OR- -IF-
         the                  motd
         is not used, this file can be removed.
        Run the following command to remove the                  motd
         file:               # rm /etc/motd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.7.2":
    title: '1.7.2 | Ensure local login warning banner is configured properly'
    section: 'Configure Command Line Warning Banners'
    description: |
        The contents of the              /etc/issue
          file are displayed to users prior to login for local terminals.
        Unixbased systems have typically displayed information about the OS release and patch level upon logging in to the
        system. This information can be useful to developers who are developing software for a particular OS platform. If
        mingetty8
         supports the following options, they display operating system information              \m
           machine architecture              \r
           operating system release              \s
           operating system name              \v
           operating system version  or the operating systems name
    remediation: |
        Edit the                  /etc/issue
          file with the appropriate contents according to your site policy, remove any instances of                  \m
         ,                  \r
         ,                  \s
         ,                  \v
         or references to the                  OS platform
                              Example: # echo "Authorized users only. All activity may be monitored and reported." > /etc/issue
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.7.3":
    title: '1.7.3 | Ensure remote login warning banner is configured properly'
    section: 'Configure Command Line Warning Banners'
    description: |
        The contents of the              /etc/issue.net
          file are displayed to users prior to login for remote connections from configured services.
        Unixbased systems have typically displayed information about the OS release and patch level upon logging in to the
        system. This information can be useful to developers who are developing software for a particular OS platform. If
        mingetty8
         supports the following options, they display operating system information               \m
           machine architecture              \r
           operating system release              \s
           operating system name              \v
           operating system version
    remediation: |
        Edit the                  /etc/issue.net
          file with the appropriate contents according to your site policy, remove any instances of                  \m
         ,                  \r
         ,                  \s
         ,                  \v
         or references to the                  OS platform
                              Example: # echo "Authorized users only. All activity may be monitored and reported." >
        /etc/issue.net
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.7.4":
    title: '1.7.4 | Ensure access to etcmotd is configured - manual'
    section: 'Configure Command Line Warning Banners'
    description: |
        The contents of the              /etc/motd
          file are displayed to users after login and function as a message of the day for authenticated users.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/motd
        :
        # chown root:root $(readlink -e /etc/motd)
        # chmod u-x,go-wx $(readlink -e /etc/motd)
                       -OR-
        Run the following command to remove the                  /etc/motd
         file:               # rm /etc/motd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /etc/motd:0133'
            - name: Undefined
              rule: 'should cmp == /etc/motd/:root'
            - name: Undefined
              rule: 'should cmp == /etc/motd/:root'

  "1.7.5":
    title: '1.7.5 | Ensure access to etcissue is configured - manual'
    section: 'Configure Command Line Warning Banners'
    description: |
        The contents of the              /etc/issue
          file are displayed to users prior to login for local terminals.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/issue
        :
        # chown root:root $(readlink -e /etc/issue)
        # chmod u-x,go-wx $(readlink -e /etc/issue)
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.5', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /etc/issue:0133'
            - name: Undefined
              rule: 'should cmp == /etc/issue/:root'
            - name: Undefined
              rule: 'should cmp == /etc/issue/:root'

  "1.7.6":
    title: '1.7.6 | Ensure access to etcissue.net is configured - manual'
    section: 'Configure Command Line Warning Banners'
    description: |
        The contents of the              /etc/issue.net
          file are displayed to users prior to login for remote connections from configured services.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/issue.net
        :
        # chown root:root $(readlink -e /etc/issue.net)
        # chmod u-x,go-wx $(readlink -e /etc/issue.net)
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.7.6', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /etc/issue.net:0133'
            - name: Undefined
              rule: 'should cmp == /etc/issue.net/:root'
            - name: Undefined
              rule: 'should cmp == /etc/issue.net/:root'

  "1.8.2":
    title: '1.8.2 | Ensure GDM login banner is configured'
    section: 'Configure GNOME Display Manager'
    description: |
        GDM is the GNOME Display Manager which handles graphical login for GNOME based systems.
    remediation: |
        Run the following script to verify that the banner message is enabled and set:
        #!/usr/bin/env bash

        {
           l_pkgoutput=""
           if command -v dpkg-query > /dev/null 2>&1; then
              l_pq="dpkg-query -W"
           elif command -v rpm > /dev/null 2>&1; then
              l_pq="rpm -q"
           fi
           l_pcl="gdm gdm3" # Space seporated list of packages to check
           for l_pn in $l_pcl; do
              $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n -
        checking configuration"
           done
           if [ -n "$l_pkgoutput" ]; then

              l_gdmprofile="gdm" # Set this to desired profile name IaW Local site policy
              l_bmessage="'Authorized uses only. All activity may be monitored and reported'" # Set to desired banner message
              if [ ! -f "/etc/dconf/profile/$l_gdmprofile" ]; then
                 echo "Creating profile \"$l_gdmprofile\""
                 echo -e "user-db:user\nsystem-db:$l_gdmprofile\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults" >
        /etc/dconf/profile/$l_gdmprofile
              fi
              if [ ! -d "/etc/dconf/db/$l_gdmprofile.d/" ]; then
                 echo "Creating dconf database directory \"/etc/dconf/db/$l_gdmprofile.d/\""
                 mkdir /etc/dconf/db/$l_gdmprofile.d/
              fi
              if ! grep -Piq '^\h*banner-message-enable\h*=\h*true\b' /etc/dconf/db/$l_gdmprofile.d/*; then
                 echo "creating gdm keyfile for machine-wide settings"
                 if ! grep -Piq -- '^\h*banner-message-enable\h*=\h*' /etc/dconf/db/$l_gdmprofile.d/*; then
                    l_kfile="/etc/dconf/db/$l_gdmprofile.d/01-banner-message"
                    echo -e "\n[org/gnome/login-screen]\nbanner-message-enable=true" >> "$l_kfile"
                 else
                    l_kfile="$(grep -Pil -- '^\h*banner-message-enable\h*=\h*' /etc/dconf/db/$l_gdmprofile.d/*)"
                    ! grep -Pq '^\h*\[org\/gnome\/login-screen\]' "$l_kfile" && sed -ri '/^\s*banner-message-enable/
        i\[org/gnome/login-screen]' "$l_kfile"
                    ! grep -Pq '^\h*banner-message-enable\h*=\h*true\b' "$l_kfile" && sed -ri 's/^\s*(banner-message-
        enable\s*=\s*)(\S+)(\s*.*$)/\1true \3//' "$l_kfile"
         #           sed -ri '/^\s*\[org\/gnome\/login-screen\]/ a\\nbanner-message-enable=true' "$l_kfile"
                 fi
              fi
              if ! grep -Piq "^\h*banner-message-text=[\'\"]+\S+" "$l_kfile"; then
                 sed -ri "/^\s*banner-message-enable/ a\banner-message-text=$l_bmessage" "$l_kfile"
              fi
              dconf update
           else
              echo -e "\n\n - GNOME Desktop Manager isn't installed\n - Recommendation is Not Applicable\n - No remediation
        required\n"
           fi
        }
                       Note: There is no character limit for the banner message. gnome-shell autodetects longer stretches of
        text and enters two column mode. The banner message cannot be read from an external file. OR Run the following command
        to remove the gdm package: # dnf remove gdm
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.8.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.8.3":
    title: '1.8.3 | Ensure GDM disable-user-list option is enabled'
    section: 'Configure GNOME Display Manager'
    description: |
        GDM is the GNOME Display Manager which handles graphical login for GNOME based systems.
        The              disableuserlist
         option controls if a list of users is displayed on the login screen
    remediation: |
        Run the following script to enable the                  disable-user-list
         option:               Note:
         the                  l_gdm_profile
         variable in the script can be changed if a different profile name is desired in accordance with local site policy.
        #!/usr/bin/env bash

        {
           l_gdmprofile="gdm"
           if [ ! -f "/etc/dconf/profile/$l_gdmprofile" ]; then
              echo "Creating profile \"$l_gdmprofile\""
              echo -e "user-db:user\nsystem-db:$l_gdmprofile\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults" >
        /etc/dconf/profile/$l_gdmprofile
           fi
           if [ ! -d "/etc/dconf/db/$l_gdmprofile.d/" ]; then
              echo "Creating dconf database directory \"/etc/dconf/db/$l_gdmprofile.d/\""
              mkdir /etc/dconf/db/$l_gdmprofile.d/
           fi
           if ! grep -Piq '^\h*disable-user-list\h*=\h*true\b' /etc/dconf/db/$l_gdmprofile.d/*; then
              echo "creating gdm keyfile for machine-wide settings"
              if ! grep -Piq -- '^\h*\[org\/gnome\/login-screen\]' /etc/dconf/db/$l_gdmprofile.d/*; then
                 echo -e "\n[org/gnome/login-screen]\n# Do not show the user list\ndisable-user-list=true" >>
        /etc/dconf/db/$l_gdmprofile.d/00-login-screen
              else
                 sed -ri '/^\s*\[org\/gnome\/login-screen\]/ a\# Do not show the user list\ndisable-user-list=true' $(grep -Pil
        -- '^\h*\[org\/gnome\/login-screen\]' /etc/dconf/db/$l_gdmprofile.d/*)
              fi
           fi
           dconf update
        }
                       Note:
         When the user profile is created or changed, the user will need to log out and log in again before the changes will be
        applied.               OR Run the following command to remove the GNOME package: # dnf remove gdm
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.8.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.8.4":
    title: '1.8.4 | Ensure GDM screen locks when the user is idle'
    section: 'Configure GNOME Display Manager'
    description: |
        GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time.
        idledelayuint32 n
          Number of seconds of inactivity before the screen goes blank             lockdelayuint32 n
          Number of seconds after the screen is blank before locking the screen             Example key file
         Specify the dconf path
        org/gnome/desktop/session

         Number of seconds of inactivity before the screen goes blank
         Set to 0 seconds if you want to deactivate the screensaver.
        idledelayuint32 900

         Specify the dconf path
        org/gnome/desktop/screensaver

         Number of seconds after the screen is blank before locking the screen
        lockdelayuint32 5
    remediation: |
        Create or edit a file in the                  /etc/dconf/profile/
         and verify it includes the following:
        user-db:user
        system-db:{NAME_OF_DCONF_DATABASE}
                       Note: local
         is the name of a dconf database used in the examples.               Example: # echo -e '\nuser-db:user\nsystem-
        db:local' >> /etc/dconf/profile/user

        Create the directory                  /etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/
         if it doesn't already exist:               Example: # mkdir /etc/dconf/db/local.d
         Create the key file `/etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/{FILE_NAME} to provide information for the
        {NAME_OF_DCONF_DATABASE} database: Example script:
        #!/usr/bin/env bash

        {
           l_key_file="/etc/dconf/db/local.d/00-screensaver"
           l_idmv="900" # Set max value for idle-delay in seconds (between 1 and 900)
           l_ldmv="5" # Set max value for lock-delay in seconds (between 0 and 5)
           {
              echo '# Specify the dconf path'
              echo '[org/gnome/desktop/session]'
              echo ''
              echo '# Number of seconds of inactivity before the screen goes blank'
              echo '# Set to 0 seconds if you want to deactivate the screensaver.'
              echo "idle-delay=uint32 $l_idmv"
              echo ''
              echo '# Specify the dconf path'
              echo '[org/gnome/desktop/screensaver]'
              echo ''
              echo '# Number of seconds after the screen is blank before locking the screen'
              echo "lock-delay=uint32 $l_ldmv"
           } > "$l_key_file"
        }
                       Note:
         You must include the uint32 along with the integer key values as shown.               Run the following command to
        update the system databases: # dconf update
         Note:
         Users must log out and back in again before the system-wide settings take effect.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.8.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == 900:5'

  "1.8.5":
    title: '1.8.5 | Ensure GDM screen locks cannot be overridden'
    section: 'Configure GNOME Display Manager'
    description: |
        GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time. By using
        the lockdown mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath,
        create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths
        to lock. Just as with the keyfiles, you may add any number of files to this directory. Example Lock File
         Lock desktop screensaver settings
        /org/gnome/desktop/session/idledelay
        /org/gnome/desktop/screensaver/lockdelay
    remediation: |
        Run the following script to ensure screen locks cannot be overridden:
        #!/usr/bin/env bash

        {
           # Check if GNMOE Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\n
           # determine system's package manager
           l_pkgoutput=""
           if command -v dpkg-query > /dev/null 2>&1; then
              l_pq="dpkg-query -W"
           elif command -v rpm > /dev/null 2>&1; then
              l_pq="rpm -q"
           fi
           # Check if GDM is installed
           l_pcl="gdm gdm3" # Space seporated list of packages to check
           for l_pn in $l_pcl; do
              $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n -
        remediating configuration if needed"
           done
           # Check configuration (If applicable)
           if [ -n "$l_pkgoutput" ]; then
              # Look for idle-delay to determine profile in use, needed for remaining tests
              l_kfd="/etc/dconf/db/$(grep -Psril '^\h*idle-delay\h*=\h*uint32\h+\d+\b' /etc/dconf/db/*/ | awk -F'/'
        '{split($(NF-1),a,".");print a[1]}').d" #set directory of key file to be locked
              # Look for lock-delay to determine profile in use, needed for remaining tests
              l_kfd2="/etc/dconf/db/$(grep -Psril '^\h*lock-delay\h*=\h*uint32\h+\d+\b' /etc/dconf/db/*/ | awk -F'/'
        '{split($(NF-1),a,".");print a[1]}').d" #set directory of key file to be locked
              if [ -d "$l_kfd" ]; then # If key file directory doesn't exist, options can't be locked
                 if grep -Prilq '^\h*\/org\/gnome\/desktop\/session\/idle-delay\b' "$l_kfd"; then
                    echo " - \"idle-delay\" is locked in \"$(grep -Pril '^\h*\/org\/gnome\/desktop\/session\/idle-delay\b'
        "$l_kfd")\""
                 else
                    echo "creating entry to lock \"idle-delay\""
                    [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                    {
                       echo -e '\n# Lock desktop screensaver idle-delay setting'
                       echo '/org/gnome/desktop/session/idle-delay'
                    } >> "$l_kfd"/locks/00-screensaver
                 fi
              else
                 echo -e " - \"idle-delay\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM
        screen locks when the user is idle\" and follow this Recommendation again"
              fi
              if [ -d "$l_kfd2" ]; then # If key file directory doesn't exist, options can't be locked
                 if grep -Prilq '^\h*\/org\/gnome\/desktop\/screensaver\/lock-delay\b' "$l_kfd2"; then
                    echo " - \"lock-delay\" is locked in \"$(grep -Pril '^\h*\/org\/gnome\/desktop\/screensaver\/lock-delay\b'
        "$l_kfd2")\""
                 else
                    echo "creating entry to lock \"lock-delay\""
                    [ ! -d "$l_kfd2"/locks ] && echo "creating directory $l_kfd2/locks" && mkdir "$l_kfd2"/locks
                    {
                       echo -e '\n# Lock desktop screensaver lock-delay setting'
                       echo '/org/gnome/desktop/screensaver/lock-delay'
                    } >> "$l_kfd2"/locks/00-screensaver
                 fi
              else
                 echo -e " - \"lock-delay\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM
        screen locks when the user is idle\" and follow this Recommendation again"
              fi
           else
              echo -e " - GNOME Desktop Manager package is not installed on the system\n  - Recommendation is not applicable"
           fi
        }
                       Run the following command to update the system databases: # dconf update
         Note:
         Users must log out and back in again before the system-wide settings take effect.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.8.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.8.6":
    title: '1.8.6 | Ensure GDM automatic mounting of removable media is disabled'
    section: 'Configure GNOME Display Manager'
    description: |
        By default GNOME automatically mounts removable media when inserted as a convenience to the user.
    remediation: |
        Run the following script to disable automatic mounting of media for all GNOME users:
        #!/usr/bin/env bash

        {
           l_pkgoutput=""
           l_gpname="local" # Set to desired dconf profile name (default is local)
           # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\n
           # determine system's package manager
           if command -v dpkg-query > /dev/null 2>&1; then
              l_pq="dpkg-query -W"
           elif command -v rpm > /dev/null 2>&1; then
              l_pq="rpm -q"
           fi
           # Check if GDM is installed
           l_pcl="gdm gdm3" # Space seporated list of packages to check
           for l_pn in $l_pcl; do
              $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n -
        checking configuration"
           done
           # Check configuration (If applicable)
           if [ -n "$l_pkgoutput" ]; then
              echo -e "$l_pkgoutput"
              # Look for existing settings and set variables if they exist
              l_kfile="$(grep -Prils -- '^\h*automount\b' /etc/dconf/db/*.d)"
              l_kfile2="$(grep -Prils -- '^\h*automount-open\b' /etc/dconf/db/*.d)"
              # Set profile name based on dconf db directory ({PROFILE_NAME}.d)
              if [ -f "$l_kfile" ]; then
                 l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")"
                 echo " - updating dconf profile name to \"$l_gpname\""
              elif [ -f "$l_kfile2" ]; then
                 l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile2")"
                 echo " - updating dconf profile name to \"$l_gpname\""
              fi
              # check for consistency (Clean up configuration if needed)
              if [ -f "$l_kfile" ] && [ "$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")" != "$l_gpname" ]; then
                 sed -ri "/^\s*automount\s*=/s/^/# /" "$l_kfile"
                 l_kfile="/etc/dconf/db/$l_gpname.d/00-media-automount"
              fi
              if [ -f "$l_kfile2" ] && [ "$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile2")" != "$l_gpname" ];
        then
                 sed -ri "/^\s*automount-open\s*=/s/^/# /" "$l_kfile2"
              fi
              [ -z "$l_kfile" ] && l_kfile="/etc/dconf/db/$l_gpname.d/00-media-automount"
              # Check if profile file exists
              if grep -Pq -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*; then
                 echo -e "\n - dconf database profile exists in: \"$(grep -Pl -- "^\h*system-db:$l_gpname\b"
        /etc/dconf/profile/*)\""
              else
                 if [ ! -f "/etc/dconf/profile/user" ]; then
                    l_gpfile="/etc/dconf/profile/user"
                 else
                    l_gpfile="/etc/dconf/profile/user2"
                 fi
                 echo -e " - creating dconf database profile"
                 {
                    echo -e "\nuser-db:user"
                    echo "system-db:$l_gpname"
                 } >> "$l_gpfile"
              fi
              # create dconf directory if it doesn't exists
              l_gpdir="/etc/dconf/db/$l_gpname.d"
              if [ -d "$l_gpdir" ]; then
                 echo " - The dconf database directory \"$l_gpdir\" exists"
              else
                 echo " - creating dconf database directory \"$l_gpdir\""
                 mkdir "$l_gpdir"
              fi
              # check automount-open setting
              if grep -Pqs -- '^\h*automount-open\h*=\h*false\b' "$l_kfile"; then
                 echo " - \"automount-open\" is set to false in: \"$l_kfile\""
              else
                 echo " - creating \"automount-open\" entry in \"$l_kfile\""
                 ! grep -Psq -- '\^\h*\[org\/gnome\/desktop\/media-handling\]\b' "$l_kfile" && echo '[org/gnome/desktop/media-
        handling]' >> "$l_kfile"
                 sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a \\nautomount-open=false' "$l_kfile"
              fi
              # check automount setting
              if grep -Pqs -- '^\h*automount\h*=\h*false\b' "$l_kfile"; then
                 echo " - \"automount\" is set to false in: \"$l_kfile\""
              else
                 echo " - creating \"automount\" entry in \"$l_kfile\""
                 ! grep -Psq -- '\^\h*\[org\/gnome\/desktop\/media-handling\]\b' "$l_kfile" && echo '[org/gnome/desktop/media-
        handling]' >> "$l_kfile"
                 sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a \\nautomount=false' "$l_kfile"
              fi
              # update dconf database
              dconf update
           else
              echo -e "\n - GNOME Desktop Manager package is not installed on the system\n  - Recommendation is not applicable"
           fi
        }
                       OR Run the following command to uninstall the GNOME desktop Manager package: # dnf remove gdm
         Impact: The use of portable hard drives is very common for workstation users. If your organization allows the use of
        portable storage or media on workstations and physical access controls to workstations is considered adequate there is
        little value add in turning off automounting.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.8.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.8.7":
    title: '1.8.7 | Ensure GDM disabling automatic mounting of removable media is not overridden'
    section: 'Configure GNOME Display Manager'
    description: |
        By default GNOME automatically mounts removable media when inserted as a convenience to the user By using the lockdown
        mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath, create a
        locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock.
        Just as with the keyfiles, you may add any number of files to this directory. Example Lock File
         Lock automount settings
        /org/gnome/desktop/mediahandling/automount
        /org/gnome/desktop/mediahandling/automountopen
    remediation: |
        Run the following script to lock disable automatic mounting of media for all GNOME users:
        #!/usr/bin/env bash

        {
           # Check if GNMOE Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\n
           # determine system's package manager
           l_pkgoutput=""
           if command -v dpkg-query > /dev/null 2>&1; then
              l_pq="dpkg-query -W"
           elif command -v rpm > /dev/null 2>&1; then
              l_pq="rpm -q"
           fi
           # Check if GDM is installed
           l_pcl="gdm gdm3" # Space seporated list of packages to check
           for l_pn in $l_pcl; do
              $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n -
        remediating configuration if needed"
           done
           # Check configuration (If applicable)
           if [ -n "$l_pkgoutput" ]; then
              # Look for automount to determine profile in use, needed for remaining tests
              l_kfd="/etc/dconf/db/$(grep -Psril '^\h*automount\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print
        a[1]}').d" #set directory of key file to be locked
              # Look for automount-open to determine profile in use, needed for remaining tests
              l_kfd2="/etc/dconf/db/$(grep -Psril '^\h*automount-open\b' /etc/dconf/db/*/ | awk -F'/'
        '{split($(NF-1),a,".");print a[1]}').d" #set directory of key file to be locked
              if [ -d "$l_kfd" ]; then # If key file directory doesn't exist, options can't be locked
                 if grep -Priq '^\h*\/org/gnome\/desktop\/media-handling\/automount\b' "$l_kfd"; then
                    echo " - \"automount\" is locked in \"$(grep -Pril '^\h*\/org/gnome\/desktop\/media-handling\/automount\b'
        "$l_kfd")\""
                 else
                    echo " - creating entry to lock \"automount\""
                    [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                    {
                       echo -e '\n# Lock desktop media-handling automount setting'
                       echo '/org/gnome/desktop/media-handling/automount'
                    } >> "$l_kfd"/locks/00-media-automount
                 fi
              else
                 echo -e " - \"automount\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM
        automatic mounting of removable media is disabled\" and follow this Recommendation again"
              fi
              if [ -d "$l_kfd2" ]; then # If key file directory doesn't exist, options can't be locked
                 if grep -Priq '^\h*\/org/gnome\/desktop\/media-handling\/automount-open\b' "$l_kfd2"; then
                    echo " - \"automount-open\" is locked in \"$(grep -Pril '^\h*\/org/gnome\/desktop\/media-
        handling\/automount-open\b' "$l_kfd2")\""
                 else
                    echo " - creating entry to lock \"automount-open\""
                    [ ! -d "$l_kfd2"/locks ] && echo "creating directory $l_kfd2/locks" && mkdir "$l_kfd2"/locks
                    {
                       echo -e '\n# Lock desktop media-handling automount-open setting'
                       echo '/org/gnome/desktop/media-handling/automount-open'
                    } >> "$l_kfd2"/locks/00-media-automount
                 fi
              else
                 echo -e " - \"automount-open\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM
        automatic mounting of removable media is disabled\" and follow this Recommendation again"
              fi
              # update dconf database
              dconf update
           else
              echo -e " - GNOME Desktop Manager package is not installed on the system\n  - Recommendation is not applicable"
           fi
        }
                       Impact: The use of portable hard drives is very common for workstation users
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_1.8.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.8.8":
    title: '1.8.8 | Ensure GDM autorun-never is enabled'
    section: 'Configure GNOME Display Manager'
    description: |
        The              autorunnever
         setting allows the GNOME Desktop Display Manager to disable autorun through GDM.
    remediation: |
        Run the following script to set                  autorun-never
         to                  true
         for GDM users:
        #!/usr/bin/env bash

        {
           l_pkgoutput="" l_output="" l_output2=""
           l_gpname="local" # Set to desired dconf profile name (default is local)
           # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\n
           # determine system's package manager
           if command -v dpkg-query > /dev/null 2>&1; then
              l_pq="dpkg-query -W"
           elif command -v rpm > /dev/null 2>&1; then
              l_pq="rpm -q"
           fi
           # Check if GDM is installed
           l_pcl="gdm gdm3" # Space separated list of packages to check
           for l_pn in $l_pcl; do
              $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n -
        checking configuration"
           done
           echo -e "$l_pkgoutput"
           # Check configuration (If applicable)
           if [ -n "$l_pkgoutput" ]; then
              echo -e "$l_pkgoutput"
              # Look for existing settings and set variables if they exist
              l_kfile="$(grep -Prils -- '^\h*autorun-never\b' /etc/dconf/db/*.d)"
              # Set profile name based on dconf db directory ({PROFILE_NAME}.d)
              if [ -f "$l_kfile" ]; then
                 l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")"
                 echo " - updating dconf profile name to \"$l_gpname\""
              fi
              [ ! -f "$l_kfile" ] && l_kfile="/etc/dconf/db/$l_gpname.d/00-media-autorun"
              # Check if profile file exists
              if grep -Pq -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*; then
                 echo -e "\n - dconf database profile exists in: \"$(grep -Pl -- "^\h*system-db:$l_gpname\b"
        /etc/dconf/profile/*)\""
              else
                 [ ! -f "/etc/dconf/profile/user" ] && l_gpfile="/etc/dconf/profile/user" || l_gpfile="/etc/dconf/profile/user2"
                 echo -e " - creating dconf database profile"
                 {
                    echo -e "\nuser-db:user"
                    echo "system-db:$l_gpname"
                 } >> "$l_gpfile"
              fi
              # create dconf directory if it doesn't exists
              l_gpdir="/etc/dconf/db/$l_gpname.d"
              if [ -d "$l_gpdir" ]; then
                 echo " - The dconf database directory \"$l_gpdir\" exists"
              else
                 echo " - creating dconf database directory \"$l_gpdir\""
                 mkdir "$l_gpdir"
              fi
              # check autorun-never setting
              if grep -Pqs -- '^\h*autorun-never\h*=\h*true\b' "$l_kfile"; then
                 echo " - \"autorun-never\" is set to true in: \"$l_kfile\""
              else
                 echo " - creating or updating \"autorun-never\" entry in \"$l_kfile\""
                 if grep -Psq -- '^\h*autorun-never' "$l_kfile"; then
                    sed -ri 's/(^\s*autorun-never\s*=\s*)(\S+)(\s*.*)$/\1true \3/' "$l_kfile"
                 else
                    ! grep -Psq -- '\^\h*\[org\/gnome\/desktop\/media-handling\]\b' "$l_kfile" && echo
        '[org/gnome/desktop/media-handling]' >> "$l_kfile"
                    sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a \\nautorun-never=true' "$l_kfile"
                 fi
              fi
           else
              echo -e "\n - GNOME Desktop Manager package is not installed on the system\n  - Recommendation is not applicable"
           fi
           # update dconf database
           dconf update
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.8.8', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.8.9":
    title: '1.8.9 | Ensure GDM autorun-never is not overridden'
    section: 'Configure GNOME Display Manager'
    description: |
        The autorunnever setting allows the GNOME Desktop Display Manager to disable autorun through GDM. By using the lockdown
        mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath, create a
        locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock.
        Just as with the keyfiles, you may add any number of files to this directory. Example Lock File
         Lock desktop mediahandling settings
        /org/gnome/desktop/mediahandling/autorunnever
    remediation: |
        Run the following script to ensure that                  autorun-never=true
         cannot be overridden:
        #!/usr/bin/env bash

        {
           # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\n
           # determine system's package manager
           l_pkgoutput=""
           if command -v dpkg-query > /dev/null 2>&1; then
              l_pq="dpkg-query -W"
           elif command -v rpm > /dev/null 2>&1; then
              l_pq="rpm -q"
           fi
           # Check if GDM is installed
           l_pcl="gdm gdm3" # Space separated list of packages to check
           for l_pn in $l_pcl; do
              $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n -
        remediating configuration if needed"
           done
           # Check configuration (If applicable)
           if [ -n "$l_pkgoutput" ]; then
              # Look for autorun to determine profile in use, needed for remaining tests
              l_kfd="/etc/dconf/db/$(grep -Psril '^\h*autorun-never\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print
        a[1]}').d" #set directory of key file to be locked
              if [ -d "$l_kfd" ]; then # If key file directory doesn't exist, options can't be locked
                 if grep -Priq '^\h*\/org/gnome\/desktop\/media-handling\/autorun-never\b' "$l_kfd"; then
                    echo " - \"autorun-never\" is locked in \"$(grep -Pril '^\h*\/org/gnome\/desktop\/media-handling\/autorun-
        never\b' "$l_kfd")\""
                 else
                    echo " - creating entry to lock \"autorun-never\""
                    [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                    {
                       echo -e '\n# Lock desktop media-handling autorun-never setting'
                       echo '/org/gnome/desktop/media-handling/autorun-never'
                    } >> "$l_kfd"/locks/00-media-autorun
                 fi
              else
                 echo -e " - \"autorun-never\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM
        autorun-never is enabled\" and follow this Recommendation again"
              fi
              # update dconf database
              dconf update
           else
              echo -e " - GNOME Desktop Manager package is not installed on the system\n  - Recommendation is not applicable"
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.8.9', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "1.8.10":
    title: '1.8.10 | Ensure XDMCP is not enabled'
    section: 'Configure GNOME Display Manager'
    description: |
        X Display Manager Control Protocol XDMCP is designed to provide authenticated access to display management services for
        remote displays
    remediation: |
        Edit the file                  /etc/gdm/custom.conf
         and remove the line:               Enable=true
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_1.8.10', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.1.1":
    title: '2.1.1 | Ensure time synchronization is in use'
    section: 'Configure Time Synchronization'
    description: |
        System time should be synchronized between all systems in an environment. This is typically done by establishing an
        authoritative time server or set of servers and having all systems synchronize their clocks to them. Note
         If another method for time synchronization is being used, this section may be skipped.
    remediation: |
        Run the following command to install                  chrony
        :               # dnf install chrony
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.1.2":
    title: '2.1.2 | Ensure chrony is configured'
    section: 'Configure Time Synchronization'
    description: |
        chrony
         is a daemon which implements the Network Time Protocol NTP and is designed to synchronize system clocks across a
        variety of systems and use a source that is highly accurate. More information on              chrony
         can be found at              http//chrony.tuxfamily.org/
        .              chrony
         can be configured to be a client and/or a server.
    remediation: |
        Add or edit server or pool lines to                  /etc/chrony.conf
         or a file in the                  /etc/chrony.d
         directory as appropriate:               Example: server <remote-server>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.1.3":
    title: '2.1.3 | Ensure chrony is not run as the root user'
    section: 'Configure Time Synchronization'
    description: |
        The file              /etc/sysconfig/chronyd
         allows configuration of options for              chrony
         to include the user              chrony
         is run as.  By default this is set to the user              chrony
    remediation: |
        Edit the file                  /etc/sysconfig/chronyd
         and add or modify the following line:               OPTIONS="-u chrony"

        Run the following command to reload the                  chronyd.service
         configuration:               # systemctl try-reload-or-restart chronyd.service
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.2.1":
    title: '2.2.1 | Ensure autofs services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        autofs
         allows automatic mounting of devices, typically including CD/DVDs and USB drives.
    remediation: |
        Run the following commands to stop                  autofs.service
         and remove                  autofs
         package:
        # systemctl stop autofs.service
        # dnf remove autofs
                       -OR- -IF-
         the                  autofs
         package is required as a dependency:
        Run the following commands to stop and mask                  autofs.service
        :
        # systemctl stop autofs.service
        # systemctl mask autofs.service
                       Impact: The use of portable hard drives is very common for workstation users. If your organization allows
        the use of portable storage or media on workstations and physical access controls to workstations is considered adequate
        there is little value add in turning off automounting.
        There may be packages that are dependent on the                    autofs
         package.  If the                    autofs
         package is removed, these dependent packages will be removed as well. Before removing the                    autofs
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    autofs.service
          leaving the                    autofs
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_2.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.2":
    title: '2.2.2 | Ensure avahi daemon services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        Avahi is a free zeroconf implementation, including a system for multicast DNS/DNSSD service discovery. Avahi allows
        programs to publish and discover services and hosts running on a local network with no specific configuration. For
        example, a user can plug a computer into a network and Avahi automatically finds printers to print to, files to look at
        and people to talk to, as well as network services running on the machine.
    remediation: |
        Run the following commands to stop                  avahi-daemon.socket
         and                  avahi-daemon.service
        , and remove the                  avahi
         package:
        # systemctl stop avahi-daemon.socket avahi-daemon.service
        # dnf remove avahi
                       -OR- -IF-
         the                  avahi
         package is required as a dependency:
        Run the following commands to stop and mask the                  avahi-daemon.socket
         and                  avahi-daemon.service
        :
        # systemctl stop avahi-daemon.socket avahi-daemon.service
        # systemctl mask avahi-daemon.socket avahi-daemon.service
                       Impact:
        There may be packages that are dependent on the                    avahi
         package.  If the                    avahi
         package is removed, these dependent packages will be removed as well. Before removing the                    avahi
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    avahi-daemon.socket
         and                    avahi-daemon.service
         leaving the                    avahi
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_2.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.3":
    title: '2.2.3 | Ensure dhcp server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The Dynamic Host Configuration Protocol DHCP is a service that allows machines to be dynamically assigned IP addresses.
        There are two versions of the DHCP protocol              DHCPv4
         and              DHCPv6
        . At startup the server may be started for one or the other via the              4
         or              6
         arguments.
    remediation: |
        Run the following commands to stop                  dhcpd.service
         and                  dhcpd6.service
         and remove                  dhcp-server
         package:
        # systemctl stop dhcpd.service dhcpd6.service
        # dnf remove dhcp-server
                       -OR- -IF-
         the                  dhcp-server
         package is required as a dependency:
        Run the following commands to stop and mask                  dhcpd.service
         and                  dhcpd6.service
        :
        # systemctl stop dhcpd.service dhcpd6.service
        # systemctl mask dhcpd.service dhcpd6.service
                       Impact:
        There may be packages that are dependent on the                    dhcp-server
         package.  If the                    dhcp-server
         package is removed, these dependent packages will be removed as well. Before removing the                    dhcp-
        server
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    dhcpd.service
         and                    dhcpd6.service
         leaving the                    dhcp-server
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.4":
    title: '2.2.4 | Ensure dns server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The Domain Name System DNS is a hierarchical naming system that maps names to IP addresses for computers, services and
        other resources connected to a network.
    remediation: |
        Run the following commands to stop                  named.service
         and remove                  bind
         package:
        # systemctl stop named.service
        # dnf remove bind
                       -OR- -IF-
         the                  bind
         package is required as a dependency:
        Run the following commands to stop and mask                  named.service
        :
        # systemctl stop named.service
        # systemctl mask named.service
                       Impact:
        There may be packages that are dependent on the                    bind
         package.  If the                    bind
         package is removed, these dependent packages will be removed as well. Before removing the                    bind
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    named.service
          leaving the                    bind
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.5":
    title: '2.2.5 | Ensure dnsmasq services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        dnsmasq
         is a lightweight tool that provides DNS caching, DNS forwarding and DHCP Dynamic Host Configuration Protocol services.
    remediation: |
        Run the following commands to stop                  dnsmasq.service
         and remove                  dnsmasq
         package:
        # systemctl stop dnsmasq.service
        # dnf remove dnsmasq
                       -OR- -IF-
         the                  dnsmasq
         package is required as a dependency:
        Run the following commands to stop and mask the                  dnsmasq.service
        :
        # systemctl stop dnsmasq.service
        # systemctl mask dnsmasq.service
                       Impact:
        There may be packages that are dependent on the                    dnsmasq
         package.  If the                    dnsmasq
         package is removed, these dependent packages will be removed as well. Before removing the                    dnsmasq
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    dnsmasq.service
          leaving the                    dnsmasq
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.6":
    title: '2.2.6 | Ensure samba file server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The Samba daemon allows system administrators to configure their Linux systems to share file systems and directories
        with Windows desktops. Samba will advertise the file systems and directories via the Server Message Block SMB protocol.
        Windows desktop users will be able to mount these directories and file systems as letter drives on their systems.
    remediation: |
        Run the following command to stop                  smb.service
         and remove                  samba
         package:
        # systemctl stop smb.service
        # dnf remove samba
                       -OR- -IF-
         the                  samba
         package is required as a dependency:
        Run the following commands to stop and mask the                  smb.service
        :
        # systemctl stop smb.service
        # systemctl mask smb.service
                       Impact:
        There may be packages that are dependent on the                    samba
         package.  If the                    samba
         package is removed, these dependent packages will be removed as well. Before removing the                    samba
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    smb.service
          leaving the                    samba
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.7":
    title: '2.2.7 | Ensure ftp server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        FTP File Transfer Protocol is a traditional and widely used standard tool for transferring files between a server and
        clients over a network, especially where no authentication is necessary permits anonymous users to connect to a server.
    remediation: |
        Run the following commands to stop                  vsftpd.service
         and remove                  vsftpd
         package:
        # systemctl stop vsftpd.service
        # dnf remove vsftpd
                       -OR- -IF-
         the                  vsftpd
         package is required as a dependency:
        Run the following commands to stop and mask the                  vsftpd.service
        :
        # systemctl stop vsftpd.service
        # systemctl mask vsftpd.service
                       Note:
         Other ftp server packages may exist. If not required and authorized by local site policy, they should also be removed.
        If the package is required for a dependency, the service should be stopped and masked.               Impact:
        There may be packages that are dependent on the                    vsftpd
         package.  If the                    vsftpd
         package is removed, these dependent packages will be removed as well. Before removing the                    vsftpd
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    vsftpd.service
          leaving the                    vsftpd
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.8":
    title: '2.2.8 | Ensure message access server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        dovecot
         and              cyrusimapd
         are open source IMAP and POP3 server packages for Linux based systems.
    remediation: |
        Run the following commands to stop                  dovecot.socket
        ,                  dovecot.service
        , and                  cyrus-imapd.service
        , and remove                  dovecot
         and                  cyrus-imapd
         packages:
        # systemctl stop dovecot.socket dovecot.service cyrus-imapd.service
        # dnf remove dovecot cyrus-imapd
                       -OR- -IF-
         a package is installed                  and
         is required for dependencies:
        Run the following commands to stop and mask                  dovecot.socket
        ,                  dovecot.service
        , and                  cyrus-imapd.service
        :
        # systemctl stop dovecot.socket dovecot.service cyrus-imapd.service
        # systemctl mask dovecot.socket dovecot.service cyrus-imapd.service
                       Impact:
        There may be packages that are dependent on                    dovecot
         and                    cyrus-imapd
         packages. If                    dovecot
         and                    cyrus-imapd
         packages are removed, these dependent packages will be removed as well. Before removing                    dovecot
         and                    cyrus-imapd
         packages, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask                    dovecot.socket
        ,                    dovecot.service
         and                    cyrus-imapd.service
         leaving                    dovecot
         and                    cyrus-imapd
         packages installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.8', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.9":
    title: '2.2.9 | Ensure network file system services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The Network File System NFS is one of the first and most widely distributed file systems in the UNIX environment. It
        provides the ability for systems to mount file systems of other servers through the network.
    remediation: |
        Run the following command to stop                  nfs-server.service
         and remove                  nfs-utils
         package:
        # systemctl stop nfs-server.service
        # dnf remove nfs-utils
                       -OR- -IF-
         the                  nfs-utils
         package is required as a dependency:
        Run the following commands to stop and mask the                  nfs-server.service
        :
        # systemctl stop nfs-server.service
        # systemctl mask nfs-server.service
                       Impact:
        Many of the                    libvirt
         packages used by Enterprise Linux virtualization are dependent on the                    nfs-utils
         package. If the                    nfs-utils
         package is removed, these dependent packages will be removed as well. Before removing the                    nfs-utils
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    nfs-server.service
          leaving the                    nfs-utils
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.9', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.10":
    title: '2.2.10 | Ensure nis server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The Network Information Service NIS, formerly known as Yellow Pages, is a clientserver directory service protocol used
        to distribute system configuration files. The NIS client               ypbind
          was used to bind a machine to an NIS server and receive the distributed configuration files.
    remediation: |
        Run the following commands to stop                  ypserv.service
         and remove                  ypserv
         package:
        # systemctl stop ypserv.service
        # dnf remove ypserv
                       -OR- -IF-
         the                  ypserv
         package is required as a dependency:
        Run the following commands to stop and mask                  ypserv.service
        :
        # systemctl stop ypserv.service
        # systemctl mask ypserv.service
                       Impact:
        There may be packages that are dependent on the                    ypserv
         package.  If the                    ypserv
         package is removed, these dependent packages will be removed as well. Before removing the                    ypserv
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    ypserv.service
         leaving the                    ypserv
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.10', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.12":
    title: '2.2.12 | Ensure rpcbind services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The              rpcbind
         utility maps RPC services to the ports on which they listen. RPC processes notify              rpcbind
         when they start, registering the ports they are listening on and the RPC program numbers they expect to serve. The
        client system then contacts              rpcbind
         on the server with a particular RPC program number. The              rpcbind.service
         redirects the client to the proper port number so it can communicate with the requested service.           Portmapper
        is an RPC service, which always listens on tcp and udp 111, and is used to map other RPC services such as nfs, nlockmgr,
        quotad, mountd, etc. to their corresponding port number on the server. When a remote host makes an RPC call to that
        server, it first consults with portmap to determine where the RPC server is listening.
    remediation: |
        Run the following commands to stop                  rpcbind.socket
         and                  rpcbind.service
        , and remove the                  rpcbind
         package:
        # systemctl stop rpcbind.socket rpcbind.service
        # dnf remove rpcbind
                       -OR- -IF-
         the                  rpcbind
         package is required as a dependency:
        Run the following commands to stop and mask the                  rpcbind.socket
         and                  rpcbind.service
        :
        # systemctl stop rpcbind.socket rpcbind.service
        # systemctl mask rpcbind.socket rpcbind.service
                       Impact:
        Many of the libvirt packages used by Enterprise Linux virtualization, and the                    nfs-utils
         package used for The Network File System (NFS), are dependent on the                    rpcbind
         package. If the                    rpcbind
         package is removed, these dependent packages will be removed as well. Before removing the                    rpcbind
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    rpcbind.socket
         and                    rpcbind.service
         leaving the                    rpcbind
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.12', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.13":
    title: '2.2.13 | Ensure rsync services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The              rsyncd.service
         can be used to synchronize files between systems over network links.
    remediation: |
        Run the following commands to stop                  rsyncd.socket
         and                  rsyncd.service
        , and remove the                  rsync-daemon
         package:
        # systemctl stop rsyncd.socket rsyncd.service
        # dnf remove rsync-daemon
                       -OR- -IF-
         the                  rsync-daemon
         package is required as a dependency:
        Run the following commands to stop and mask the                  rsyncd.socket
         and                  rsyncd.service
        :
        # systemctl stop rsyncd.socket rsyncd.service
        # systemctl mask rsyncd.socket rsyncd.service
                       Impact:
        There may be packages that are dependent on the                    rsync-daemon
         package.  If the                    rsync-daemon
         package is removed, these dependent packages will be removed as well. Before removing the                    rsync-
        daemon
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    rsyncd.socket
         and                    rsyncd.service
         leaving the                    rsync-daemon
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.13', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.14":
    title: '2.2.14 | Ensure snmp services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        Simple Network Management Protocol SNMP is a widely used protocol for monitoring the health and welfare of network
        equipment, computer equipment and devices like UPSs. NetSNMP is a suite of applications used to implement SNMPv1 RFC
        1157, SNMPv2 RFCs 19011908, and SNMPv3 RFCs 34113418 using both IPv4 and IPv6. Support for SNMPv2 classic a.k.a. SNMPv2
        historic  RFCs 14411452 was dropped with the 4.0 release of the UCDsnmp package. The Simple Network Management Protocol
        SNMP server is used to listen for SNMP commands from an SNMP management system, execute the commands or collect the
        information and then send results back to the requesting system.
    remediation: |
        Run the following commands to stop                  snmpd.service
         and remove                  net-snmp
         package:
        # systemctl stop snmpd.service
        # dnf remove net-snmp
                       -OR-
         If the package is required for dependencies:
        Run the following commands to stop and mask the                  snmpd.service
        :
        # systemctl stop snmpd.service
        # systemctl mask snmpd.service
                       Impact:
        There may be packages that are dependent on the                    net-snmp
         package. If the                    net-snmp
         package is removed, these packages will be removed as well.
        Before removing the                    net-snmp
         package, review any dependent packages to determine if they are required on the system. If a dependent package is
        required, stop and mask the                    snmpd.service
         leaving the                    net-snmp
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.14', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.15":
    title: '2.2.15 | Ensure telnet server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The              telnetserver
         package contains the              telnet
         daemon, which accepts connections from users from other systems via the              telnet
         protocol.
    remediation: |
        Run the following commands to stop                  telnet.socket
         and remove the                  telnet-server
         package:
        # systemctl stop telnet.socket
        # dnf remove telnet-server
                       -OR- -IF-
         a package is installed                  and
         is required for dependencies:
        Run the following commands to stop and mask                  telnet.socket
        :
        # systemctl stop telnet.socket
        # systemctl mask telnet.socket
                       Impact:
        There may be packages that are dependent on the                    telnet-server
         package.  If the                    telnet-server
         package is removed, these dependent packages will be removed as well. Before removing the                    telnet-
        server
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    telnet.socket
          leaving the                    telnet-server
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.15', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.16":
    title: '2.2.16 | Ensure tftp server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        Trivial File Transfer Protocol TFTP is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers
        allow connections from a TFTP Client for sending and receiving files.
    remediation: |
        Run the following commands to stop                  tftp.socket
         and                  tftp.service
        , and remove the                  tftp-server
         package:
        # systemctl stop tftp.socket tftp.service
        # dnf remove tftp-server
                       -OR- -IF-
         the                  tftp-server
         package is required as a dependency:
        Run the following commands to stop and mask                  tftp.socket
         and                  tftp.service
        :
        # systemctl stop tftp.socket tftp.service
        # systemctl mask tftp.socket tftp.service
                       Impact: TFTP is often used to provide files for network booting such as for PXE based installation of
        servers.
        There may be packages that are dependent on the                    tftp-server
         package.  If the                    tftp-server
         package is removed, these dependent packages will be removed as well. Before removing the                    tftp-
        server
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    tftp.socket
         and                    tftp.service
         leaving the                    tftp-server
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.16', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.17":
    title: '2.2.17 | Ensure web proxy server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        Squid is a standard proxy server used in many distributions and environments.
    remediation: |
        Run the following commands to stop                  squid.service
         and remove the                  squid
         package:
        # systemctl stop squid.service
        # dnf remove squid
                       -OR-
         If the                  squid
         package is required as a dependency:
        Run the following commands to stop and mask the                  squid.service
        :
        # systemctl stop squid.service
        # systemctl mask squid.service
                       Impact:
        There may be packages that are dependent on the                    squid
         package.  If the                    squid
         package is removed, these dependent packages will be removed as well. Before removing the                    squid
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask the                    squid.service
          leaving the                    squid
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.17', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.18":
    title: '2.2.18 | Ensure web server services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        Web servers provide the ability to host web site content.
    remediation: |
        Run the following commands to stop                  httpd.socket
        ,                  httpd.service
        , and                  nginx.service
        , and remove                  httpd
         and                  nginx
         packages:
        # systemctl stop httpd.socket httpd.service nginx.service
        # dnf remove httpd nginx
                       -OR- -IF-
         a package is installed                  and
         is required for dependencies:
        Run the following commands to stop and mask                  httpd.socket
        ,                  httpd.service
        , and                  nginx.service
        :
        # systemctl stop httpd.socket httpd.service nginx.service
        # systemctl mask httpd.socket httpd.service nginx.service
                       Note:
         Other web server packages may exist. If not required and authorized by local site policy, they should also be removed.
        If the package is required for a dependency, the service and socket should be stopped and masked.               Impact:
        Removal of web server packages will remove that ability for the server to host web services. -IF-
         the web server package is required for a dependency, any related service or socket should be stopped and masked.
        Note:
         If the remediation steps to mask a service are followed and that package is not installed on the system, the service
        and/or socket will still be masked. If the package is installed due to an approved requirement to host a web server, the
        associated service and/or socket would need to be unmasked before it could be enabled and/or started.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.18', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.19":
    title: '2.2.19 | Ensure xinetd services are not in use'
    section: 'Configure Special Purpose Services'
    description: |
        The X Window System provides a Graphical User Interface GUI where users can have multiple windows in which to run
        programs and various add on. The X Windows system is typically used on workstations where users login, but not on
        servers where users typically do not login.
    remediation: |
        Run the following commands to stop                  xinetd.service
        , and remove the                  xinetd
         package:
        # systemctl stop xinetd.service
        # dnf remove xinetd
                       -OR- -IF-
         the                  xinetd
         package is required as a dependency:
        Run the following commands to stop and mask the                  xinetd.service
        :
        # systemctl stop xinetd.service
        # systemctl mask xinetd.service
                       Impact:
        There may be packages that are dependent on the                    xinetd
         package. If the                    xinetd
         package is removed, these dependent packages will be removed as well. Before removing the                    xinetd
         package, review any dependent packages to determine if they are required on the system.                 -IF- a
        dependent package is required: stop and mask the avahi-daemon.socket and avahi-daemon.service leaving the avahi package
        installed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.19', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.2.21":
    title: '2.2.21 | Ensure mail transfer agents are configured for local-only mode - manual'
    section: 'Configure Special Purpose Services'
    description: |
        Mail Transfer Agents MTA, such as sendmail and Postfix, are used to listen for incoming mail and transfer the messages
        to the appropriate user or mail server. If the system is not intended to be a mail server, it is recommended that the
        MTA be configured to only process local mail.
    remediation: |
        Edit                  /etc/postfix/main.cf
         and add the following line to the RECEIVING MAIL section. If the line already exists, change it to look like the line
        below:               inet_interfaces = loopback-only

        Run the following command to restart                  postfix
        :               # systemctl restart postfix
         Note: This remediation is designed around the postfix mail server. Depending on your environment you may have an
        alternative MTA installed such as sendmail. If this is the case consult the documentation for your installed MTA to
        configure the recommended state.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2.21', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "2.2.22":
    title: '2.2.22 | Ensure only approved services are listening on a network interface - manual'
    section: 'Configure Special Purpose Services'
    description: |
        A network port is identified by its number, the associated IP address, and the type of the communication protocol such
        as TCP or UDP. A listening port is a network port on which an application or process listens on, acting as a
        communication endpoint. Each listening port can be open or closed filtered using a firewall. In general terms, an open
        port is a network port that accepts incoming packets from remote locations.
    remediation: |
        Run the following commands to stop the service and remove the package containing the service:
        # systemctl stop <service_name>.socket <service_name>.service
        # dnf remove <package_name>
                       -OR-
         If required packages have a dependency:               Run the following commands to stop and mask the service and
        socket:
        # systemctl stop <service_name>.socket <service_name>.service
        # systemctl mask <service_name>.socket <service_name>.service
                       Note:
         replace                  <service_name>
         with the appropriate service name.               Impact: There may be packages that are dependent on the service's
        package.  If the service's package is removed, these dependent packages will be removed as well. Before removing the
        service's package, review any dependent packages to determine if they are required on the system. -IF-
         a dependent package is required: stop and mask the                    <service_name>.socket
         and                    <service_name>.service
          leaving the service's package installed.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_2.2.22', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "2.3.1":
    title: '2.3.1 | Ensure ftp client is not installed'
    section: 'Configure Service Clients'
    description: |
        FTP File Transfer Protocol is a traditional and widely used standard tool for transferring files between a server and
        clients over a network, especially where no authentication is necessary permits anonymous users to connect to a server.
    remediation: |
        Run the following command to remove                  ftp
        :               # dnf remove ftp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.3.2":
    title: '2.3.2 | Ensure ldap client is not installed'
    section: 'Configure Service Clients'
    description: |
        The Lightweight Directory Access Protocol LDAP was introduced as a replacement for NIS/YP. It is a service that provides
        a method for looking up information from a central database.
    remediation: |
        Run the following command to remove the                  openldap-clients
         package:               # dnf remove openldap-clients
         Impact: Removing the LDAP client will prevent or inhibit using LDAP for authentication in your environment.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_2.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.3.3":
    title: '2.3.3 | Ensure nis client is not installed'
    section: 'Configure Service Clients'
    description: |
        The Network Information Service NIS, formerly known as Yellow Pages, is a clientserver directory service protocol used
        to distribute system configuration files. The NIS client               ypbind
          was used to bind a machine to an NIS server and receive the distributed configuration files.
    remediation: |
        Run the following command to remove the ypbind package: # dnf remove ypbind
         Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them
        can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to
        prevent accidental or intentional misuse.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.3.4":
    title: '2.3.4 | Ensure telnet client is not installed'
    section: 'Configure Service Clients'
    description: |
        The              telnet
         package contains the              telnet
         client, which allows users to start connections to other systems via the telnet protocol.
    remediation: |
        Run the following command to remove the                  telnet
         package:               # dnf remove telnet
         Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them
        can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to
        prevent accidental or intentional misuse.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "2.3.5":
    title: '2.3.5 | Ensure tftp client is not installed'
    section: 'Configure Service Clients'
    description: |
        Trivial File Transfer Protocol TFTP is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers
        allow connections from a TFTP Client for sending and receiving files.
    remediation: |
        Run the following command to remove                  tftp
        :               # dnf remove tftp
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "3.1.1":
    title: '3.1.1 | Ensure IPv6 status is identified - manual'
    section: 'Configure Network Devices'
    description: |
        Internet Protocol Version 6 IPv6 is the most recent version of Internet Protocol IP. Its designed to supply IP
        addressing and additional security to support the predicted growth of connected devices. IPv6 is based on 128bit
        addressing and can support 340 undecillion, which is 340 trillion3 addresses. Features of IPv6 Hierarchical addressing
        and routing infrastructure Stateful and Stateless configuration Support for quality of service QoS An ideal protocol for
        neighboring node interaction
    remediation: |
        Enable or disable IPv6 in accordance with system requirements and local site policy Impact: IETF RFC 4038 recommends
        that applications are built with an assumption of dual stack. When enabled, IPv6 will require additional configuration
        to reduce risk to the system.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_3.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.1.3":
    title: '3.1.3 | Ensure bluetooth services are not in use'
    section: 'Configure Network Devices'
    description: |
        Bluetooth is a shortrange wireless technology standard that is used for exchanging data between devices over short
        distances. It employs UHF radio waves in the ISM bands, from 2.402 GHz to 2.48 GHz. It is mainly used as an alternative
        to wire connections.
    remediation: |
        Run the following commands to stop                  bluetooth.service
        , and remove the                  bluez
         package:
        # systemctl stop bluetooth.service
        # dnf remove bluez
                       -OR- -IF-
         the                  bluez
         package is required as a dependency:
        Run the following commands to stop and mask                  bluetooth.service
        :
        # systemctl stop bluetooth.service
        # systemctl mask bluetooth.service
                       Note:
         A reboot may be required               Impact: Many personal electronic devices (PEDs) use Bluetooth technology. For
        example, you may be able to operate your computer with a wireless keyboard. Disabling Bluetooth will prevent these
        devices from connecting to the system.
        There may be packages that are dependent on the                    bluez
         package.  If the                    bluez
         package is removed, these dependent packages will be removed as well. Before removing the                    bluez
         package, review any dependent packages to determine if they are required on the system.                 -IF-
         a dependent package is required: stop and mask                    bluetooth.service
         leaving the                    bluez
         package installed.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "3.2.1":
    title: '3.2.1 | Ensure dccp kernel module is not available - manual'
    section: 'Configure Network Kernel Modules'
    description: |
        The Datagram Congestion Control Protocol DCCP is a transport layer protocol that supports streaming media and telephony.
        DCCP provides a way to gain access to congestion control, without having to do it at the application layer, but does not
        provide insequence delivery.
    remediation: |
        Run the following script to disable the                  dccp
         module:               -IF-
         the module is available in the running kernel:
        Create a file with                    install dccp /bin/false
         in the                    /etc/modprobe.d/
         directory
        Create a file with                    blacklist dccp
         in the                    /etc/modprobe.d/
         directory
        Unload                    dccp
         from the kernel                 -IF-
         available in ANY installed kernel:
        Create a file with                    blacklist dccp
         in the                    /etc/modprobe.d/
         directory                 -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:               No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="dccp" # set module name
           l_mtype="net" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == dccp:net'

  "3.2.2":
    title: '3.2.2 | Ensure tipc kernel module is not available - manual'
    section: 'Configure Network Kernel Modules'
    description: |
        The Transparent InterProcess Communication TIPC protocol is designed to provide communication between cluster nodes.
    remediation: |
        Run the following script to disable the                  tipc
         module:               -IF-
         the module is available in the running kernel:
        Create a file with                    install tipc /bin/false
         in the                    /etc/modprobe.d/
         directory
        Create a file with                    blacklist tipc
         in the                    /etc/modprobe.d/
         directory
        Unload                    tipc
         from the kernel                 -IF-
         available in ANY installed kernel:
        Create a file with                    blacklist tipc
         in the                    /etc/modprobe.d/
         directory                 -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:               No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="tipc" # set module name
           l_mtype="net" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == tipc:net'

  "3.2.3":
    title: '3.2.3 | Ensure rds kernel module is not available - manual'
    section: 'Configure Network Kernel Modules'
    description: |
        The Reliable Datagram Sockets RDS protocol is a transport layer protocol designed to provide lowlatency, highbandwidth
        communications between cluster nodes. It was developed by the Oracle Corporation.
    remediation: |
        Run the following script to disable the                  rds
         module:               -IF-
         the module is available in the running kernel:
        Create a file with                    install rds /bin/false
         in the                    /etc/modprobe.d/
         directory
        Create a file with                    blacklist rds
         in the                    /etc/modprobe.d/
         directory
        Unload                    rds
         from the kernel                 -IF-
         available in ANY installed kernel:
        Create a file with                    blacklist rds
         in the                    /etc/modprobe.d/
         directory                 -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:               No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="rds" # set module name
           l_mtype="net" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == rds:net'

  "3.2.4":
    title: '3.2.4 | Ensure sctp kernel module is not available - manual'
    section: 'Configure Network Kernel Modules'
    description: |
        The Stream Control Transmission Protocol SCTP is a transport layer protocol used to support message oriented
        communication, with several streams of messages in one connection. It serves a similar function as TCP and UDP,
        incorporating features of both. It is messageoriented like UDP, and ensures reliable insequence transport of messages
        with congestion control like TCP.
    remediation: |
        Run the following script to disable the                  sctp
         module:               -IF-
         the module is available in the running kernel:
        Create a file with                    install sctp /bin/false
         in the                    /etc/modprobe.d/
         directory
        Create a file with                    blacklist sctp
         in the                    /etc/modprobe.d/
         directory
        Unload                    sctp
         from the kernel                 -IF-
         available in ANY installed kernel:
        Create a file with                    blacklist sctp
         in the                    /etc/modprobe.d/
         directory                 -IF-
         the kernel module is not available on the system or pre-compiled into the kernel:               No remediation is
        necessary
        #!/usr/bin/env bash

        {
           l_mname="sctp" # set module name
           l_mtype="net" # set module type
           l_mpath="/lib/modules/**/kernel/$l_mtype"
           l_mpname="$(tr '-' '_' <<< "$l_mname")"
           l_mndir="$(tr '-' '/' <<< "$l_mname")"

           module_loadable_fix()
           {
              # If the module is currently loadable, add "install {MODULE_NAME} /bin/false" to a file in "/etc/modprobe.d"
              l_loadable="$(modprobe -n -v "$l_mname")"
              [ "$(wc -l <<< "$l_loadable")" -gt "1" ] && l_loadable="$(grep -P -- "(^\h*install|\b$l_mname)\b" <<<
        "$l_loadable")"
              if ! grep -Pq -- '^\h*install \/bin\/(true|false)' <<< "$l_loadable"; then
                 echo -e "\n - setting module: \"$l_mname\" to be not loadable"
                 echo -e "install $l_mname /bin/false" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           module_loaded_fix()
           {
              # If the module is currently loaded, unload the module
              if lsmod | grep "$l_mname" > /dev/null 2>&1; then
                 echo -e "\n - unloading module \"$l_mname\""
                 modprobe -r "$l_mname"
              fi
           }
           module_deny_fix()
           {
              # If the module isn't deny listed, denylist the module
              if ! modprobe --showconfig | grep -Pq -- "^\h*blacklist\h+$l_mpname\b"; then
                 echo -e "\n - deny listing \"$l_mname\""
                 echo -e "blacklist $l_mname" >> /etc/modprobe.d/"$l_mpname".conf
              fi
           }
           # Check if the module exists on the system
           for l_mdir in $l_mpath; do
              if [ -d "$l_mdir/$l_mndir" ] && [ -n "$(ls -A $l_mdir/$l_mndir)" ]; then
                 echo -e "\n - module: \"$l_mname\" exists in \"$l_mdir\"\n - checking if disabled..."
                 module_deny_fix
                 if [ "$l_mdir" = "/lib/modules/$(uname -r)/kernel/$l_mtype" ]; then
                    module_loadable_fix
                    module_loaded_fix
                 fi
              else
                 echo -e "\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\n"
              fi
           done
           echo -e "\n - remediation of module: \"$l_mname\" complete\n"
        }
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_3.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == sctp:net'

  "3.3.1":
    title: '3.3.1 | Ensure ip forwarding is disabled - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        The              net.ipv4.ipforward
         and              net.ipv6.conf.all.forwarding
         flags are used to tell the system whether it can forward packets or not.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.ip_forward = 0 Example:
        # printf "
        net.ipv4.ip_forward = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.ip_forward=0
           sysctl -w net.ipv4.route.flush=1
        }
                       -IF-
         IPv6 is enabled on the system:
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv6.conf.all.forwarding = 0 Example:
        # printf "
        net.ipv6.conf.all.forwarding = 0
        " >> /etc/sysctl.d/60-netipv6_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv6.conf.all.forwarding=0
           sysctl -w net.ipv6.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
        Impact: IP forwarding is required on systems configured to act as a router. If these parameters are disabled, the system
        will not be able to perform as a router. Many Cloud Service Provider (CSP) hosted systems require IP forwarding to be
        enabled. If the system is running on a CSP platform, this requirement should be reviewed before disabling IP forwarding.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.ip_forward=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.all.forwarding=0'

  "3.3.2":
    title: '3.3.2 | Ensure packet redirect sending is disabled - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router in a host
        only configuration, there is no need to send redirects.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0 Example:
        # printf "
        net.ipv4.conf.all.send_redirects = 0
        net.ipv4.conf.default.send_redirects = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.send_redirects=0
           sysctl -w net.ipv4.conf.default.send_redirects=0
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
        Impact: IP forwarding is required on systems configured to act as a router. If these parameters are disabled, the system
        will not be able to perform as a router.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.send_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.send_redirects=0'

  "3.3.3":
    title: '3.3.3 | Ensure bogus icmp responses are ignored - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        Setting              net.ipv4.icmpignoreboguserrorresponses
         to              1
         prevents the kernel from logging bogus responses RFC1122 noncompliant from broadcast reframes, keeping file systems
        from filling up with useless log messages.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.icmp_ignore_bogus_error_responses = 1 Example:
        # printf "
        net.ipv4.icmp_ignore_bogus_error_responses = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.icmp_ignore_bogus_error_responses=1'

  "3.3.4":
    title: '3.3.4 | Ensure broadcast icmp requests are ignored - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        Setting              net.ipv4.icmpechoignorebroadcasts
         to              1
         will cause the system to ignore all ICMP echo and timestamp requests to broadcast and multicast addresses.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.icmp_echo_ignore_broadcasts = 1 Example:
        # printf "
        net.ipv4.icmp_echo_ignore_broadcasts = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.icmp_echo_ignore_broadcasts=1'

  "3.3.5":
    title: '3.3.5 | Ensure icmp redirects are not accepted - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        ICMP redirect messages are packets that convey routing information and tell your host acting as a router to send packets
        via an alternate path. It is a way of allowing an outside routing device to update your system routing tables.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 Example:
        # printf "
        net.ipv4.conf.all.accept_redirects = 0
        net.ipv4.conf.default.accept_redirects = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.accept_redirects=0
           sysctl -w net.ipv4.conf.default.accept_redirects=0
           sysctl -w net.ipv4.route.flush=1
        }
                       -IF-
         IPv6 is enabled on the system:
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0 Example:
        # printf "
        net.ipv6.conf.all.accept_redirects = 0
        net.ipv6.conf.default.accept_redirects = 0
        " >> /etc/sysctl.d/60-netipv6_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv6.conf.all.accept_redirects=0
           sysctl -w net.ipv6.conf.default.accept_redirects=0
           sysctl -w net.ipv6.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.5', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.accept_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.accept_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.all.accept_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.default.accept_redirects=0'

  "3.3.6":
    title: '3.3.6 | Ensure secure icmp redirects are not accepted - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list.
        It is assumed that these gateways are known to your system, and that they are likely to be secure.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0 Example:
        # printf "
        net.ipv4.conf.all.secure_redirects = 0
        net.ipv4.conf.default.secure_redirects = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following commands to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.secure_redirects=0
           sysctl -w net.ipv4.conf.default.secure_redirects=0
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.6', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.secure_redirects=0'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.secure_redirects=0'

  "3.3.7":
    title: '3.3.7 | Ensure reverse path filtering is enabled - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        Setting              net.ipv4.conf.all.rpfilter
         and              net.ipv4.conf.default.rpfilter
         to              1
         forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid.
        Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding
        source packet came from, the packet is dropped and logged if              logmartians
         is set.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.rp_filter = 1 net.ipv4.conf.default.rp_filter = 1 Example:
        # printf "
        net.ipv4.conf.all.rp_filter = 1
        net.ipv4.conf.default.rp_filter = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following commands to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.rp_filter=1
           sysctl -w net.ipv4.conf.default.rp_filter=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
        Impact: If you are using asymmetrical routing on your system, you will not be able to enable this feature without
        breaking the routing.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.7', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.rp_filter=1'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.rp_filter=1'

  "3.3.8":
    title: '3.3.8 | Ensure source routed packets are not accepted - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In
        contrast, nonsource routed packets travel a path determined by routers in the network. In some cases, systems may not be
        routable or reachable from some locations e.g. private addresses vs. Internet routable, and so source routed packets
        would need to be used.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 Example:
        # printf "
        net.ipv4.conf.all.accept_source_route = 0
        net.ipv4.conf.default.accept_source_route = 0
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.accept_source_route=0
           sysctl -w net.ipv4.conf.default.accept_source_route=0
           sysctl -w net.ipv4.route.flush=1
        }
                       -IF-
         IPv6 is enabled on the system:
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0 Example:
        # printf "
        net.ipv6.conf.all.accept_source_route = 0
        net.ipv6.conf.default.accept_source_route = 0
        " >> /etc/sysctl.d/60-netipv6_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv6.conf.all.accept_source_route=0
           sysctl -w net.ipv6.conf.default.accept_source_route=0
           sysctl -w net.ipv6.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.8', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.accept_source_route=0'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.accept_source_route=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.all.accept_source_route=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.default.accept_source_route=0'

  "3.3.9":
    title: '3.3.9 | Ensure suspicious packets are logged - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        When enabled, this feature logs packets with unroutable source addresses to the kernel log.
    remediation: |
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1 Example:
        # printf "
        net.ipv4.conf.all.log_martians = 1
        net.ipv4.conf.default.log_martians = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.conf.all.log_martians=1
           sysctl -w net.ipv4.conf.default.log_martians=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.9', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.all.log_martians=1'
            - name: Undefined
              rule: 'should cmp == net.ipv4.conf.default.log_martians=1'

  "3.3.10":
    title: '3.3.10 | Ensure tcp syn cookies is enabled - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        When              tcpsyncookies
         is set, the kernel will handle TCP SYN packets normally until the halfopen connection queue is full, at which time, the
        SYN cookie functionality kicks in. SYN cookies work by not using the SYN queue at all. Instead, the kernel simply
        replies to the SYN with a SYNACK, but will include a specially crafted TCP sequence number that encodes the source and
        destination IP address and port number and the time the packet was sent. A legitimate connection would send the ACK
        packet of the three way handshake with the specially crafted sequence number. This allows the system to verify that it
        has received a valid response to a SYN cookie and allow the connection, even though there is no corresponding SYN in the
        queue.
    remediation: |
        Set the following parameter in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv4.tcp_syncookies = 1 Example:
        # printf "
        net.ipv4.tcp_syncookies = 1
        " >> /etc/sysctl.d/60-netipv4_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv4.tcp_syncookies=1
           sysctl -w net.ipv4.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.10', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv4.tcp_syncookies=1'

  "3.3.11":
    title: '3.3.11 | Ensure ipv6 router advertisements are not accepted - manual'
    section: 'Configure Network Kernel Parameters'
    description: |
        This setting disables the systems ability to accept IPv6 router advertisements.
    remediation: |
        -IF-
         IPv6 is enabled on the system:
        Set the following parameters in                  /etc/sysctl.conf
         or a file in                  /etc/sysctl.d/
         ending in                  .conf
        :               net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0 Example:
        # printf "
        net.ipv6.conf.all.accept_ra = 0
        net.ipv6.conf.default.accept_ra = 0
        " >> /etc/sysctl.d/60-netipv6_sysctl.conf
                       Run the following command to set the active kernel parameters:
        # {
           sysctl -w net.ipv6.conf.all.accept_ra=0
           sysctl -w net.ipv6.conf.default.accept_ra=0
           sysctl -w net.ipv6.route.flush=1
        }
                       Note:
         If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3.11', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.all.accept_ra=0'
            - name: Undefined
              rule: 'should cmp == net.ipv6.conf.default.accept_ra=0'

  "3.4.1.1":
    title: '3.4.1.1 | Ensure nftables is installed'
    section: 'Configure a firewall utility'
    description: |
        nftables provides a new inkernel packet classification framework that is based on a networkspecific Virtual Machine VM
        and a new nft userspace command line tool. nftables reuses the existing Netfilter subsystems such as the existing hook
        infrastructure, the connection tracking system, NAT, userspace queuing and logging subsystem.
    remediation: |
        Run the following command to install                    nftables
                                 # dnf install nftables
         Impact: Changing firewall settings while connected over the network can result in being locked out of the system.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.4.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "3.4.1.2":
    title: '3.4.1.2 | Ensure a single firewall configuration utility is in use'
    section: 'Configure a firewall utility'
    description: |
        FirewallD  Is a firewall service daemon that provides a dynamic customizable hostbased firewall with a DBus interface.
        Being dynamic, it enables creating, changing, and deleting the rules without the necessity to restart the firewall
        daemon each time the rules are changed NFTables  Includes the nft utility for configuration of the nftables subsystem of
        the Linux kernel Note
         firewalld with nftables backend does not support passing custom nftables rules to firewalld, using the
        direct
         option.
    remediation: |
        Run the following script to ensure that a single firewall utility is in use on the system:
        #!/usr/bin/env bash

        {
           l_output="" l_output2="" l_fwd_status="" l_nft_status="" l_fwutil_status=""
           # Determine FirewallD utility Status
           rpm -q firewalld > /dev/null 2>&1 && l_fwd_status="$(systemctl is-enabled firewalld.service):$(systemctl is-active
        firewalld.service)"
           # Determine NFTables utility Status
           rpm -q nftables > /dev/null 2>&1 && l_nft_status="$(systemctl is-enabled nftables.service):$(systemctl is-active
        nftables.service)"
           l_fwutil_status="$l_fwd_status:$l_nft_status"
           case $l_fwutil_status in
              enabled:active:masked:inactive|enabled:active:disabled:inactive)
                 echo -e "\n - FirewallD utility is in use, enabled and active\n - NFTables utility is correctly disabled or
        masked and inactive\n - no remediation required" ;;
              masked:inactive:enabled:active|disabled:inactive:enabled:active)
                 echo -e "\n - NFTables utility is in use, enabled and active\n - FirewallD utility is correctly disabled or
        masked and inactive\n - no remediation required" ;;
              enabled:active:enabled:active)
                 echo -e "\n - Both FirewallD and NFTables utilities are enabled and active\n - stopping and masking NFTables
        utility"
                 systemctl stop nftables && systemctl --now mask nftables ;;
              enabled:*:enabled:*)
                 echo -e "\n - Both FirewallD and NFTables utilities are enabled\n - remediating"
                 if [ "$(awk -F: '{print $2}' <<< "$l_fwutil_status")" = "active" ] && [ "$(awk -F: '{print $4}' <<<
        "$l_fwutil_status")" = "inactive" ]; then
                    echo " - masking NFTables utility"
                    systemctl stop nftables && systemctl --now mask nftables
                 elif [ "$(awk -F: '{print $4}' <<< "$l_fwutil_status")" = "active" ] && [ "$(awk -F: '{print $2}' <<<
        "$l_fwutil_status")" = "inactive" ]; then
                    echo " - masking FirewallD utility"
                    systemctl stop firewalld && systemctl --now mask firewalld
                 fi ;;
              *:active:*:active)
                 echo -e "\n - Both FirewallD and NFTables utilities are active\n - remediating"
                 if [ "$(awk -F: '{print $1}' <<< "$l_fwutil_status")" = "enabled" ] && [ "$(awk -F: '{print $3}' <<<
        "$l_fwutil_status")" != "enabled" ]; then
                    echo " - stopping and masking NFTables utility"
                    systemctl stop nftables && systemctl --now mask nftables
                 elif [ "$(awk -F: '{print $3}' <<< "$l_fwutil_status")" = "enabled" ] && [ "$(awk -F: '{print $1}' <<<
        "$l_fwutil_status")" != "enabled" ]; then
                    echo " - stopping and masking FirewallD utility"
                    systemctl stop firewalld && systemctl --now mask firewalld
                 fi ;;
              :enabled:active)
                 echo -e "\n - NFTables utility is in use, enabled, and active\n - FirewallD package is not installed\n - no
        remediation required" ;;
              :)
                 echo -e "\n - Neither FirewallD or NFTables is installed.\n - remediating\n - installing NFTables"
                 dnf -q install nftables ;;
              *:*:)
                 echo -e "\n - NFTables package is not installed on the system\n - remediating\n - installing NFTables"
                 dnf -q install nftables ;;
              *)
                 echo -e "\n - Unable to determine firewall state" ;;
           esac
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.4.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == active'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'should cmp == inactive'
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == active'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'should cmp == inactive'

  "3.4.2.1":
    title: '3.4.2.1 | Ensure nftables base chains exist - manual'
    section: 'Configure firewall rules'
    description: |
        Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an  entry
        point  for packets from the networking stack, a regular chain may be used as jump target and is used for better rule
        organization.
    remediation: |
        - IF not using FirewallD - Run the following command to create the base chains: # nft create chain inet <table name>
        <base chain name> { type filter hook <(input|forward|output)> priority 0 \; }
         Example:
        # nft create chain inet filter input { type filter hook input priority 0 \; }
        # nft create chain inet filter forward { type filter hook forward priority 0 \; }
        # nft create chain inet filter output { type filter hook output priority 0 \; }
                         Impact:
        If configuring over ssh,                      creating
         a                      base chain
         with a  policy of                      drop
         will cause loss of connectivity.                   Ensure that a rule allowing ssh has been added to the base chain
        prior to setting the base chain's policy to drop
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.4.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*\H+\h+\H+\h+hook\h+input\b(\h+.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*\H+\h+\H+\h+hook\h+forward\b(\h+.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*\H+\h+\H+\h+hook\h+output\b(\h+.*)?$'

  "3.4.2.2":
    title: '3.4.2.2 | Ensure host based firewall loopback traffic is configured - manual'
    section: 'Configure firewall rules'
    description: |
        Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback
        network
    remediation: |
        Run the following script to implement the loopback rules:
        #!/usr/bin/env bash

        {
           l_hbfw=""
           if systemctl is-enabled firewalld.service | grep -q 'enabled' && systemctl is-enabled nftables.service | grep -q
        'enabled'; then
              echo -e "\n - Error - Both FirewallD and NFTables are enabled\n - Please follow recommendation: \"Ensure a single
        firewall configuration utility is in use\""
           elif ! systemctl is-enabled firewalld.service | grep -q 'enabled' && ! systemctl is-enabled nftables.service | grep
        -q 'enabled'; then
              echo -e "\n - Error - Neither FirewallD or NFTables is enabled\n - Please follow recommendation: \"Ensure a single
        firewall configuration utility is in use\""
           else
              if systemctl is-enabled firewalld.service | grep -q 'enabled' && ! systemctl is-enabled nftables.service | grep -q
        'enabled'; then
                 echo -e "\n - FirewallD is in use on the system" && l_hbfw="fwd"
              elif ! systemctl is-enabled firewalld.service | grep -q 'enabled' && systemctl is-enabled nftables.service | grep
        -q 'enabled'; then
                 echo -e "\n - NFTables is in use on the system" && l_hbfw="nft"
              fi
              l_ipsaddr="$(nft list ruleset | awk '/filter_IN_public_deny|hook\s+input\s+/,/\}\s*(#.*)?$/' | grep -P --
        'ip\h+saddr')"
              if ! nft list ruleset | awk '/hook\s+input\s+/,/\}\s*(#.*)?$/' | grep -Pq -- '\H+\h+"lo"\h+accept'; then
                 echo -e "\n - Enabling input to accept for loopback address"
                 if [ "$l_hbfw" = "fwd" ]; then
                    firewall-cmd --permanent --zone=trusted --add-interface=lo
                    firewall-cmd --reload
                 elif [ "$l_hbfw" = "nft" ]; then
                    nft add rule inet filter input iif lo accept
                 fi
              fi
              if ! grep -Pq -- 'ip\h+saddr\h+127\.0\.0\.0\/8\h+(counter\h+packets\h+\d+\h+bytes\h+\d+\h+)?drop' <<< "$l_ipsaddr"
        && ! grep -Pq -- 'ip\h+daddr\h+\!\=\h+127\.0\.0\.1\h+ip\h+saddr\h+127\.0\.0\.1\h+drop' <<< "$l_ipsaddr"; then
                 echo -e "\n - Setting IPv4 network traffic from loopback address to drop"
                 if [ "$l_hbfw" = "fwd" ]; then
                    firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address="127.0.0.1" destination not
        address="127.0.0.1" drop'
                    firewall-cmd --permanent --zone=trusted --add-rich-rule='rule family=ipv4 source address="127.0.0.1"
        destination not address="127.0.0.1" drop'
                    firewall-cmd --reload
                 elif [ "$l_hbfw" = "nft" ]; then
                    nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop
                 fi
              fi
              if grep -Pq -- '^\h*0\h*$' /sys/module/ipv6/parameters/disable; then
                 l_ip6saddr="$(nft list ruleset | awk '/filter_IN_public_deny|hook input/,/}/' | grep 'ip6 saddr')"
                 if ! grep -Pq 'ip6\h+saddr\h+::1\h+(counter\h+packets\h+\d+\h+bytes\h+\d+\h+)?drop' <<< "$l_ip6saddr" && ! grep
        -Pq -- 'ip6\h+daddr\h+\!=\h+::1\h+ip6\h+saddr\h+::1\h+drop' <<< "$l_ip6saddr"; then
                    echo -e "\n - Setting IPv6 network traffic from loopback address to drop"
                    if [ "$l_hbfw" = "fwd" ]; then
                       firewall-cmd --permanent --add-rich-rule='rule family=ipv6 source address="::1" destination not
        address="::1" drop'
                       firewall-cmd --permanent --zone=trusted --add-rich-rule='rule family=ipv6 source address="::1"
        destination not address="::1" drop'
                       firewall-cmd --reload
                    elif [ "$l_hbfw" = "nft" ]; then
                       nft add rule inet filter input ip6 saddr ::1 counter drop
                    fi
                 fi
              fi
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.4.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.4.2.3":
    title: '3.4.2.3 | Ensure firewalld drops unnecessary services and ports - manual'
    section: 'Configure firewall rules'
    description: |
        Services and ports can be accepted or explicitly rejected or dropped by a zone. For every zone, you can set a default
        behavior that handles incoming traffic that is not further specified. Such behavior is defined by setting the target of
        the zone. There are three options  default, ACCEPT, REJECT, and DROP. ACCEPT  you accept all incoming packets except
        those disabled by a specific rule. REJECT  you disable all incoming packets except those that you have allowed in
        specific rules and the source machine is informed about the rejection. DROP  you disable all incoming packets except
        those that you have allowed in specific rules and no information sent to the source machine.
    remediation: |
        If Firewalld is in use on the system: Run the following command to remove an unnecessary service: # firewall-cmd
        --remove-service=<service>
         Example: # firewall-cmd --remove-service=cockpit
         Run the following command to remove an unnecessary port: # firewall-cmd --remove-port=<port-number>/<port-type>
         Example: # firewall-cmd --remove-port=25/tcp
         Run the following command to make new settings persistent: # firewall-cmd --runtime-to-permanent
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_3.4.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.4.2.4":
    title: '3.4.2.4 | Ensure nftables established connections are configured - manual'
    section: 'Configure firewall rules'
    description: |
        Configure the firewall rules for new outbound and established connections
    remediation: |
        If NFTables utility is in use on your system: Configure nftables in accordance with site policy. The following commands
        will implement a policy to allow all established connections:
        # systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol tcp ct state
        established accept
        # systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol udp ct state
        established accept
        # systemctl is-enabled nftables.service | grep -q 'enabled' && nft add rule inet filter input ip protocol icmp ct state
        established accept
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_3.4.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.4.2.5":
    title: '3.4.2.5 | Ensure nftables default deny firewall policy'
    section: 'Configure firewall rules'
    description: |
        Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.
    remediation: |
        If NFTables utility is in use on your system: Run the following command for the base chains with the input, forward, and
        output hooks to implement a default DROP policy: # nft chain <table family> <table name> <chain name> { policy drop \; }
         Example:
        # nft chain inet filter input { policy drop \; }
        # nft chain inet filter forward { policy drop \; }
                         Impact: If configuring nftables over ssh, creating a base chain with a policy of drop will cause loss
        of connectivity.
        Ensure that a rule allowing                      ssh
         has been added to the base chain prior to setting the base chain's policy to drop
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.4.2.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == input'
            - name: Undefined
              rule: 'should cmp == forward'
            - name: Undefined
              rule: 'Undefined'

  "4.1.1.1":
    title: '4.1.1.1 | Ensure cron daemon is enabled and active'
    section: 'Configure cron'
    description: |
        The                cron
         daemon is used to execute batch jobs on the system.
    remediation: |
        - IF -
         cron is installed on the system:
        Run the following commands to unmask, enable, and start                    crond
        :
        # systemctl unmask crond
        # systemctl --now enable crond
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == active'

  "4.1.1.2":
    title: '4.1.1.2 | Ensure permissions on etccrontab are configured'
    section: 'Configure cron'
    description: |
        The                /etc/crontab
         file is used by                cron
         to control its own jobs. The commands in this item make sure that root is the user and group owner of the file and that
        only the owner can access the file.
    remediation: |
        Run the following commands to set ownership and permissions on                    /etc/crontab
        :
        # chown root:root /etc/crontab
        # chmod og-rwx /etc/crontab
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.1.3":
    title: '4.1.1.3 | Ensure permissions on etccron.hourly are configured'
    section: 'Configure cron'
    description: |
        This directory contains system                cron
         jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the
        crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        Run the following commands to set ownership and permissions on the                    /etc/cron.hourly
         directory:
        # chown root:root /etc/cron.hourly/
        # chmod og-rwx /etc/cron.hourly/
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.1.4":
    title: '4.1.1.4 | Ensure permissions on etccron.daily are configured'
    section: 'Configure cron'
    description: |
        The                /etc/cron.daily
         directory contains system cron jobs that need to run on a daily basis. The files in this directory cannot be
        manipulated by the                crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        Run the following commands to set ownership and permissions on the                    /etc/cron.daily
         directory:
        # chown root:root /etc/cron.daily/
        # chmod og-rwx /etc/cron.daily/
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.1.5":
    title: '4.1.1.5 | Ensure permissions on etccron.weekly are configured'
    section: 'Configure cron'
    description: |
        The                /etc/cron.weekly
         directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be
        manipulated by the                crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        Run the following commands to set ownership and permissions on the                    /etc/cron.weekly
         directory:
        # chown root:root /etc/cron.weekly/
        # chmod og-rwx /etc/cron.weekly/
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.1.6":
    title: '4.1.1.6 | Ensure permissions on etccron.monthly are configured'
    section: 'Configure cron'
    description: |
        The                /etc/cron.monthly
         directory contains system cron jobs that need to run on a monthly basis. The files in this directory cannot be
        manipulated by the                crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        Run the following commands to set ownership and permissions on the                    /etc/cron.monthly
         directory:
        # chown root:root /etc/cron.monthly/
        # chmod og-rwx /etc/cron.monthly/
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.1.7":
    title: '4.1.1.7 | Ensure permissions on etccron.d are configured'
    section: 'Configure cron'
    description: |
        The                /etc/cron.d
         directory contains system                cron
         jobs that need to run in a similar manner to the hourly, daily weekly and monthly jobs from                /etc/crontab
        , but require more granular control as to when they run. The files in this directory cannot be manipulated by the
        crontab
         command, but are instead edited by system administrators using a text editor. The commands below restrict read/write
        and search access to user and group root, preventing regular users from accessing this directory.
    remediation: |
        Run the following commands to set ownership and permissions on the                    /etc/cron.d
         directory:
        # chown root:root /etc/cron.d/
        # chmod og-rwx /etc/cron.d/
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.1.8":
    title: '4.1.1.8 | Ensure crontab is restricted to authorized users'
    section: 'Configure cron'
    description: |
        crontab
         is the program used to install, deinstall, or list the tables used to drive the cron daemon. Each user can have their
        own crontab, and though these are files in                /var/spool/cron/crontabs
        , they are not intended to be edited directly.
        If the                /etc/cron.allow
         file exists, then you must be listed one user per line therein in order to be allowed to use this command. If the
        /etc/cron.allow
         file does not exist but the                /etc/cron.deny
         file does exist, then you must not be listed in the                /etc/cron.deny
         file in order to use this command.             If neither of these files exists, then depending on sitedependent
        configuration parameters, only the super user will be allowed to use this command, or all users will be able to use this
        command.
        If both files exist then                /etc/cron.allow
         takes precedence. Which means that                /etc/cron.deny
         is not considered and your user must be listed in                /etc/cron.allow
         in order to be able to use the crontab.             Regardless of the existence of any of these files, the root
        administrative user is always allowed to setup a crontab.
        The files                /etc/cron.allow
         and                /etc/cron.deny
        , if they exist, must be either worldreadable, or readable by group                crontab
        . If they are not, then cron will deny access to all users until the permissions are fixed.
        There is one file for each users crontab under the                /var/spool/cron/crontabs
         directory. Users are not allowed to edit the files under that directory directly to ensure that only users allowed by
        the system to run periodic tasks can add them, and only syntactically correct crontabs will be written there. This is
        enforced by having the directory writable only by the                crontab
         group and configuring crontab command with the setgid bid set for that specific group.             Note
        Even though a given user is not listed in                  cron.allow
        , cron jobs can still be run as that user
        The files                  /etc/cron.allow
         and                  /etc/cron.deny
        , if they exist, only controls administrative access to the crontab command for scheduling and modifying cron jobs
    remediation: |
        -IF-
         cron is installed on the system:                 Run the following commands to:
        Create                      /etc/cron.allow
         if it doesn't exist
        Change owner or user                      root

        Change group owner to group                      root

        Change mode to                      640
         or more restrictive
        # [ ! -e "/etc/cron.allow" ] && touch /etc/cron.allow
        # chown root:root /etc/cron.allow
        # chmod u-x,g-wx,o-rwx /etc/cron.allow
                         Run the following commands to: -IF- /etc/cron.deny
         exists:
        Change owner or user                      root

        Change group owner to group                      root

        Change mode to                      640
         or more restrictive
        # [ -e "/etc/cron.deny" ] && chown root:root /etc/cron.deny
        # [ -e "/etc/cron.deny" ] && chmod u-x,g-wx,o-rwx /etc/cron.deny
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.1.8', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.1.2.1":
    title: '4.1.2.1 | Ensure at is restricted to authorized users'
    section: 'Configure at'
    description: |
        at
         allows fairly complex time specifications, extending the POSIX.2 standard. It accepts times of the form HHMM to run a
        job at a specific time of day. If that time is already past, the next day is assumed. You may also specify midnight,
        noon, or teatime 4pm and you can have a timeofday suffixed with AM or PM for running in the morning or the evening. You
        can also say what day the job will be run, by giving a date in the form monthname day with an optional year, or giving a
        date of the form MMDDCCYY, MM/DD/CCYY,  DD.MM.CCYY or CCYYMMDD. The specification of a date must follow the
        specification of the time of day. You can also give times like now  count timeunits, where the timeunits can be minutes,
        hours, days, or weeks and you can tell at to run the job today by suffixing the time with today and to run the job
        tomorrow by suffixing the time with tomorrow.
        The                /etc/at.allow
         and                /etc/at.deny
         files determine which user can submit commands for later execution via at or batch. The format of the files is a list
        of usernames, one on each line. Whitespace is not permitted. If the file                /etc/at.allow
         exists, only usernames mentioned in it are allowed to use at. If                /etc/at.allow
         does not exist,                /etc/at.deny
         is checked, every username not mentioned in it is then allowed to use at. An empty                /etc/at.deny
         means that every user may use at. If neither file exists, only the superuser is allowed to use at.
    remediation: |
        -IF-
         at is installed on the system:                 Run the following script to: /etc/at.allow
        :
                             Create the file if it doesn't exist
        Change owner or user                          root

        If group                          daemon
         exists, change to group                          daemon
        , else change group to                          root

        Change mode to                          640
         or more restrictive
                                    -IF- /etc/at.deny
         exists:

        Change owner or user                          root

        If group                          daemon
         exists, change to group                          daemon
        , else change group to                          root

        Change mode to                          640
         or more restrictive

        #!/usr/bin/env bash

        {
           grep -Pq -- '^daemon\b' /etc/group && l_group="daemon" || l_group="root"
           [ ! -e "/etc/at.allow" ] && touch /etc/at.allow
           chown root:"$l_group" /etc/at.allow
           chmod u-x,g-wx,o-rwx /etc/at.allow
           [ -e "/etc/at.deny" ] && chown root:"$l_group" /etc/at.deny
           [ -e "/etc/at.deny" ] && chmod u-x,g-wx,o-rwx /etc/at.deny
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.1.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /etc/at.allow:0137'
            - name: Undefined
              rule: 'should cmp == /etc/at.allow:root'
            - name: Undefined
              rule: 'should cmp == /etc/at.allow:(root|daemon)'
            - name: Undefined
              rule: 'should cmp == /etc/at.deny:0137'
            - name: Undefined
              rule: 'should cmp == /etc/at.deny:root'
            - name: Undefined
              rule: 'should cmp == /etc/at.deny:(root|daemon)'

  "4.2.1":
    title: '4.2.1 | Ensure permissions on etcsshsshd config are configured'
    section: 'Configure SSH Server'
    description: |
        The file              /etc/ssh/sshdconfig
        , and files ending in              .conf
         in the              /etc/ssh/sshdconfig.d
         directory, contain configuration specifications for              sshd
        .
    remediation: |
        Run the following script to set ownership and permissions on                  /etc/ssh/sshd_config
         and files ending in                  .conf
         in the                  /etc/ssh/sshd_config.d
         directory:
        #!/usr/bin/env bash

        {
           chmod u-x,og-rwx /etc/ssh/sshd_config
           chown root:root /etc/ssh/sshd_config
           while IFS= read -r -d $'\0' l_file; do
              if [ -e "$l_file" ]; then
                 chmod u-x,og-rwx "$l_file"
                 chown root:root "$l_file"
              fi
           done < <(find /etc/ssh/sshd_config.d -type f -print0)
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.2.2":
    title: '4.2.2 | Ensure permissions on SSH private host key files are configured'
    section: 'Configure SSH Server'
    description: |
        An SSH private key is one of two files used in SSH public key authentication.  In this authentication method, the
        possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to
        authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key
        should be distributed.
    remediation: |
        Run the following script to set mode, ownership, and group on the private SSH host key files:
        #!/usr/bin/env bash

        {
           l_output="" l_output2=""
           l_skgn="$(grep -Po -- '^(ssh_keys|_?ssh)\b' /etc/group)" # Group designated to own openSSH keys
           l_skgid="$(awk -F: '($1 == "'"$l_skgn"'"){print $3}' /etc/group)" # Get gid of group
           if [ -n "$l_skgid" ]; then
              l_agroup="(root|$l_skgn)" && l_sgroup="$l_skgn" && l_mfix="u-x,g-wx,o-rwx"
           else
              l_agroup="root" && l_sgroup="root" && l_mfix="u-x,go-rwx"
           fi
           unset a_skarr && a_skarr=() # Clear and initialize array
           if [ -d /etc/ssh ]; then
              while IFS= read -r -d $'\0' l_file; do # Loop to populate array
                 if grep -Pq ':\h+OpenSSH\h+private\h+key\b' <<< "$(file "$l_file")"; then
                    a_skarr+=("$(stat -Lc '%n^%#a^%U^%G^%g' "$l_file")")
                 fi
              done < <(find -L /etc/ssh -xdev -type f -print0)
              while IFS="^" read -r l_file l_mode l_owner l_group l_gid; do
                 l_out2=""
                 [ "$l_gid" = "$l_skgid" ] && l_pmask="0137" || l_pmask="0177"
                 l_maxperm="$( printf '%o' $(( 0777 & ~$l_pmask )) )"
                 if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then
                    l_out2="$l_out2\n  - Mode: \"$l_mode\" should be mode: \"$l_maxperm\" or more restrictive\n   - Revoking
        excess permissions"
                    chmod "$l_mfix" "$l_file"
                 fi
                 if [ "$l_owner" != "root" ]; then
                    l_out2="$l_out2\n  - Owned by: \"$l_owner\" should be owned by \"root\"\n   - Changing ownership to
        \"root\""
                    chown root "$l_file"
                 fi
                 if [[ ! "$l_group" =~ $l_agroup ]]; then
                    l_out2="$l_out2\n  - Owned by group \"$l_group\" should be group owned by: \"${l_agroup//|/ or }\"\n   -
        Changing group ownership to \"$l_sgroup\""
                    chgrp "$l_sgroup" "$l_file"
                 fi
                 [ -n "$l_out2" ] && l_output2="$l_output2\n - File: \"$l_file\"$l_out2"
              done <<< "$(printf '%s\n' "${a_skarr[@]}")"
           else
              l_output="  - openSSH keys not found on the system"
           fi
           unset a_skarr
           if [ -z "$l_output2" ]; then
              echo -e "\n- No access changes required\n"
           else
              echo -e "\n- Remediation results:\n$l_output2\n"
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.2.3":
    title: '4.2.3 | Ensure permissions on SSH public host key files are configured'
    section: 'Configure SSH Server'
    description: |
        An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key
        is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public
        key that corresponds to a private key will be able to authenticate successfully.
    remediation: |
        Run the following script to set mode, ownership, and group on the public SSH host key files:
        #!/usr/bin/env bash

        {
           l_output="" l_output2=""
           l_skgn="$(grep -Po -- '^(ssh_keys|_?ssh)\b' /etc/group)" # Group designated to own openSSH keys
           l_skgid="$(awk -F: '($1 == "'"$l_skgn"'"){print $3}' /etc/group)" # Get gid of group
           l_mfix="u-x,go-wx"
           unset a_skarr && a_skarr=() # Clear and initialize array
           if [ -d /etc/ssh ]; then
              while IFS= read -r -d $'\0' l_file; do # Loop to populate array
                 if grep -Pq ':\h+OpenSSH\h+(\H+\h+)public\h+key\b' <<< "$(file "$l_file")"; then
                    a_skarr+=("$(stat -Lc '%n^%#a^%U^%G^%g' "$l_file")")
                 fi
              done < <(find -L /etc/ssh -xdev -type f -print0)
              while IFS="^" read -r l_file l_mode l_owner l_group l_gid; do
                 l_out2=""
                 l_pmask="0133"
                 l_maxperm="$( printf '%o' $(( 0777 & ~$l_pmask )) )"
                 if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then
                    l_out2="$l_out2\n  - Mode: \"$l_mode\" should be mode: \"$l_maxperm\" or more restrictive\n   - Revoking
        excess permissions"
                    chmod "$l_mfix" "$l_file"
                 fi
                 if [ "$l_owner" != "root" ]; then
                    l_out2="$l_out2\n  - Owned by: \"$l_owner\" should be owned by \"root\"\n   - Changing ownership to
        \"root\""
                    chown root "$l_file"
                 fi
                 if [[ ! "$l_group" =~ $l_agroup ]]; then
                    l_out2="$l_out2\n  - Owned by group \"$l_group\" should be group owned by: \"${l_agroup//|/ or }\"\n   -
        Changing group ownership to \"$l_sgroup\""
                    chgrp "$l_sgroup" "$l_file"
                 fi
                 [ -n "$l_out2" ] && l_output2="$l_output2\n - File: \"$l_file\"$l_out2"
              done <<< "$(printf '%s\n' "${a_skarr[@]}")"
           else
              l_output="  - openSSH keys not found on the system"
           fi
           unset a_skarr
           if [ -z "$l_output2" ]; then
              echo -e "\n- No access changes required\n"
           else
              echo -e "\n- Remediation results:\n$l_output2\n"
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.2.4":
    title: '4.2.4 | Ensure sshd access is configured'
    section: 'Configure SSH Server'
    description: |
        There are several options available to limit which users and group can access the system via SSH. It is recommended that
        at least one of the following options be leveraged AllowUsers


        The                    AllowUsers
         variable gives the system administrator the option of allowing specific users to                    ssh
         into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this
        variable. If a system administrator wants to restrict user access further by only allowing the allowed users to log in
        from a particular host, the entry can be specified in the form of userhost.
                           AllowGroups


        The                    AllowGroups
         variable gives the system administrator the option of allowing specific groups of users to                    ssh
         into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this
        variable.
                           DenyUsers


        The                    DenyUsers
         variable gives the system administrator the option of denying specific users to                    ssh
         into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this
        variable. If a system administrator wants to restrict user access further by specifically denying a users access from a
        particular host, the entry can be specified in the form of userhost.
                           DenyGroups


        The                    DenyGroups
         variable gives the system administrator the option of denying specific groups of users to                    ssh
         into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this
        variable.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set one or more of the parameter above any                  Include
         entries as follows:
        AllowUsers <userlist>
        -OR-
        AllowGroups <grouplist>
        -OR-
        DenyUsers <userlist>
        -OR-
        DenyGroups <grouplist>
                       Note:
         First occurrence of a option takes precedence,                  Match
         set statements withstanding. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in Include location. If the                  Include
         location is not the default,                  /etc/ssh/sshd_config.d/*.conf
        , the audit will need to be modified to account for the                  Include
         location used.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^(allowusers|allowgroups|denyusers|denygroups)\s+(\S+).*$'

  "4.2.5":
    title: '4.2.5 | Ensure sshd Banner is configured'
    section: 'Configure SSH Server'
    description: |
        The              Banner
         parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By
        default, no banner is displayed.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               Banner /etc/issue.net
         Note:
         First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled,
        used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == (?i)^\h*banner\h+\H+\b'

  "4.2.6":
    title: '4.2.6 | Ensure sshd Ciphers are configured'
    section: 'Configure SSH Server'
    description: |
        This variable limits the ciphers that SSH can use during communication. Note Some organizations may have stricter
        requirements for approved ciphers. Ensure that ciphers used are in compliance with site policy.
        The only strong ciphers currently FIPS 1402 compliant are
                       aes256ctr aes192ctr aes128ctr
    remediation: |
        Edit the /etc/ssh/sshd_config file and add/modify the                  Ciphers
         line to contain a comma separated list of the site unapproved (weak) Ciphers preceded with a                  -
         above any                  Include
         entries:               Example: Ciphers -3des-cbc,aes128-cbc,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se
         Note:
         First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is
        understood in your environment, the entry may be created in a file in Include location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*ciphers\h+([^#\n\r]+,)?(3des-cbc|aes128-cbc|aes192-cbc|aes256-cbc|arcfour|arcfour128|arcfour256|blowfish-cbc|cast128-cbc|rijndael-cbc@lysator.liu.se)\b'

  "4.2.7":
    title: '4.2.7 | Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured'
    section: 'Configure SSH Server'
    description: |
        Note
         To clarify, the two settings described below are only meant for idle connections from a protocol perspective and are
        not meant to check if the user is active or not. An idle user does not mean an idle connection. SSH does not and never
        had, intentionally, the capability to drop idle users. In SSH versions before              8.2p1
         there was a bug that caused these values to behave in such a manner that they were abused to disconnect idle users.
        This bug has been resolved in              8.2p1
         and thus it can no longer be abused disconnect idle users.
        The two options              ClientAliveInterval
         and              ClientAliveCountMax
         control the timeout of SSH sessions. Taken directly from              man 5 sshdconfig
                   ClientAliveInterval
         Sets a timeout interval in seconds after which if no data has been received from the client, sshd8 will send a message
        through the encrypted channel to request a response from the client. The default is 0, indicating that these messages
        will not be sent to the client.               ClientAliveCountMax
         Sets the number of client alive messages which may be sent without sshd8 receiving any messages back from the client.
        If this threshold is reached while client alive messages are being sent, sshd will disconnect the client, terminating
        the session.  It is important to note that the use of client alive messages is very different from TCPKeepAlive. The
        client alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive
        option enabled by TCPKeepAlive is spoofable. The client alive mechanism is valuable when the client or server depend on
        knowing when a connection has become unresponsive.
        The default value is 3. If ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default,
        unresponsive SSH clients will be disconnected after approximately 45 seconds. Setting a zero ClientAliveCountMax
        disables connection termination.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameters above any                  Include
         entries according to site policy.               Example:
        ClientAliveInterval 15
        ClientAliveCountMax 3
                       Note:
         First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled,
        used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^clientalivecountmax\h+[1-9][0-9]*m?\b'

  "4.2.8":
    title: '4.2.8 | Ensure sshd DisableForwarding is enabled'
    section: 'Configure SSH Server'
    description: |
        The              DisableForwarding
         parameter disables all forwarding features, including X11, sshagent1, TCP and StreamLocal. This option overrides all
        other forwardingrelated options and may simplify restricted configurations.           X11Forwarding provides the ability
        to tunnel X11 traffic through the connection to enable remote graphic connections. sshagent is a program to hold private
        keys used for public key authentication. Through use of environment variables the agent can be located and automatically
        used for authentication when logging in to other machines using ssh. SSH port forwarding is a mechanism in SSH for
        tunneling application ports from the client to the server, or servers to clients. It can be used for adding encryption
        to legacy applications, going through firewalls, and some system administrators and IT professionals use it for opening
        backdoors into the internal network from their home machines.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               DisableForwarding yes
         Note:
         First occurrence of a option takes precedence,                  Match
         set statements withstanding. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in                  Include
         location.               Impact: SSH tunnels are widely used in many corporate environments. In some environments the
        applications themselves may have very limited native support for security. By utilizing tunneling, compliance with SOX,
        HIPAA, PCI-DSS, and other standards can be achieved without having to modify the applications.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.8', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*disableforwarding\h+\"?yes\"?\b'

  "4.2.9":
    title: '4.2.9 | Ensure sshd HostbasedAuthentication is disabled'
    section: 'Configure SSH Server'
    description: |
        The              HostbasedAuthentication
         parameter specifies if authentication is allowed through trusted hosts via the user of              .rhosts
        , or              /etc/hosts.equiv
        , along with successful public key client host authentication.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               HostbasedAuthentication no
         Note:
         First occurrence of a option takes precedence,                  Match
         set statements withstanding. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in                  Include
         location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.9', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^hostbasedauthentication\s*no\s*$'

  "4.2.10":
    title: '4.2.10 | Ensure sshd IgnoreRhosts is enabled'
    section: 'Configure SSH Server'
    description: |
        The              IgnoreRhosts
         parameter specifies that              .rhosts
         and              .shosts
         files will not be used in              RhostsRSAAuthentication
         or              HostbasedAuthentication
        .
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any Include entries as follows:               IgnoreRhosts yes
         Note:
         First occurrence of a option takes precedence,                  Match
         set statements withstanding. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in                  Include
         location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.10', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*ignorerhosts\h+"?yes"?\b'

  "4.2.11":
    title: '4.2.11 | Ensure sshd KexAlgorithms is configured'
    section: 'Configure SSH Server'
    description: |
        Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use
        of a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages, each must be equipped to
        encrypt messages to be sent and decrypt messages received Notes Kex algorithms have a higher preference the earlier they
        appear in the list Some organizations may have stricter requirements for approved Key exchange algorithms Ensure that
        Key exchange algorithms used are in compliance with site policy
        The only Key Exchange Algorithms currently FIPS 1402 approved are
                       ecdhsha2nistp256 ecdhsha2nistp384 ecdhsha2nistp521 diffiehellmangroupexchangesha256
        diffiehellmangroup16sha512 diffiehellmangroup18sha512 diffiehellmangroup14sha256
    remediation: |
        Edit the /etc/ssh/sshd_config file and add/modify the                  KexAlgorithms
         line to contain a comma separated list of the site unapproved (weak) KexAlgorithms preceded with a                  -
         above any                  Include
         entries:               Example: KexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-
        group-exchange-sha1
         Note:
         First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is
        understood in your environment, the entry may be created in a file in Include location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.11', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == (?i)^\h*kexalgorithms\h+([^#\n\r]+,)?(diffie-hellman-group1-sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\b'

  "4.2.12":
    title: '4.2.12 | Ensure sshd LoginGraceTime is configured'
    section: 'Configure SSH Server'
    description: |
        The              LoginGraceTime
         parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is
        the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should
        be limited to appropriate organizational limits to ensure the service is available for needed access.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               LoginGraceTime 60
         Note:
         First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled,
        used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.12', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^logingracetime\h+\"?([1-9]|[1-5][0-9]|60|1m)\b'

  "4.2.13":
    title: '4.2.13 | Ensure sshd LogLevel is configured'
    section: 'Configure SSH Server'
    description: |
        LogLevel
         gives the verbosity level that is used when logging messages from sshd. The possible values are              QUIET
        ,              FATAL
        ,              ERROR
        ,              INFO
        ,              VERBOSE
        ,              DEBUG
        ,              DEBUG1
        ,              DEBUG2
        , and              DEBUG3
        . The default is INFO.               DEBUG
         and              DEBUG1
         are equivalent.              DEBUG2
         and              DEBUG3
         each specify higher levels of debugging output.           Note
         Logging with a DEBUG level violates the privacy of users and is not recommended.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:
        LogLevel VERBOSE

        -OR-

        LogLevel INFO
                       Note:
         First occurrence of a option takes precedence,                  Match
         set statements withstanding. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in                  Include
         location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.13', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*loglevel\h+\"?(VERBOSE|INFO)\"?\b'

  "4.2.14":
    title: '4.2.14 | Ensure sshd MACs are configured'
    section: 'Configure SSH Server'
    description: |
        This variable limits the types of MAC algorithms that SSH can use during communication. Notes Some organizations may
        have stricter requirements for approved MACs. Ensure that MACs used are in compliance with site policy.
        The only strong MACs currently FIPS 1402 approved are
                       HMACSHA1 HMACSHA2256 HMACSHA2384 HMACSHA2512
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file and add/modify the                  MACs
         line to contain a comma separated list of the site unapproved (weak) MACs preceded with a                  -
         above any                  Include
         entries:               Example: MACs -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac-64@openssh.com,hmac-
        md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-
        sha1-96-etm@openssh.com,umac-64-etm@openssh.com
         Note: First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence
        is understood in your environment, the entry may be created in a file in Include location. The default is handled
        system-wide by crypto-policies(7). Information about defaults, how to modify the defaults and how to customize existing
        policies with sub-policies are present in manual page update-crypto-policies(8)
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.14', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == (?i)^\h*macs\h+([^#\n\r]+,)?(hmac-md5|hmac-md5-96|hmac-ripemd160|hmac-sha1-96|umac-64@openssh\.com|hmac-md5-etm@openssh\.com|hmac-md5-96-etm@openssh\.com|hmac-ripemd160-etm@openssh\.com|hmac-sha1-96-etm@openssh\.com|umac-64-etm@openssh\.com)\b'

  "4.2.15":
    title: '4.2.15 | Ensure sshd MaxAuthTries is configured'
    section: 'Configure SSH Server'
    description: |
        The              MaxAuthTries
         parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure
        count reaches half the number, error messages will be written to the              syslog
         file detailing the login failure.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               MaxAuthTries 4
         Note:
         First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled,
        used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.15', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*maxauthtries\h+\"?[0-4]\b'

  "4.2.16":
    title: '4.2.16 | Ensure sshd MaxSessions is configured'
    section: 'Configure SSH Server'
    description: |
        The              MaxSessions
         parameter specifies the maximum number of open sessions permitted from a given connection.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               MaxSessions 10
         Note:
         First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled,
        used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.16', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^maxsessions\h+([1-9]|10)\b'

  "4.2.17":
    title: '4.2.17 | Ensure sshd MaxStartups is configured'
    section: 'Configure SSH Server'
    description: |
        The              MaxStartups
         parameter specifies the  maximum number of concurrent unauthenticated connections to the SSH daemon.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               MaxStartups 10:30:60
         Note:
         First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is
        understood in your environment, the entry may be created in a file in Include location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.17', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*maxstartups\h+\"?(10|[1-9])\:(30|[1-2][0-9]|[1-9])\:(60|[1-5][0-9]|[1-9])\b'

  "4.2.18":
    title: '4.2.18 | Ensure sshd PermitEmptyPasswords is disabled'
    section: 'Configure SSH Server'
    description: |
        The              PermitEmptyPasswords
         parameter specifies if the SSH server allows login to accounts with empty password strings.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               PermitEmptyPasswords no
         Note:
         First occurrence of a option takes precedence,                  Match
         set statements withstanding. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in                  Include
         location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.18', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*permitemptypasswords\h+\"?no\b'

  "4.2.19":
    title: '4.2.19 | Ensure sshd PermitRootLogin is disabled'
    section: 'Configure SSH Server'
    description: |
        The              PermitRootLogin
         parameter specifies if the root user can log in using SSH. The default is              prohibitpassword
        .
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               PermitRootLogin no
         Note:
         First occurrence of a option takes precedence,                  Match
         set statements withstanding. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in                  Include
         location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.19', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*permitrootlogin\h+"?no"?\b'

  "4.2.20":
    title: '4.2.20 | Ensure sshd PermitUserEnvironment is disabled'
    section: 'Configure SSH Server'
    description: |
        The              PermitUserEnvironment
         option allows users to present environment options to the SSH daemon.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any Include entries as follows:               PermitUserEnvironment no
         Note:
         First occurrence of a option takes precedence. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in                  Include
         location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.20', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*permituserenvironment\h+"?no"?\b'

  "4.2.21":
    title: '4.2.21 | Ensure sshd UsePAM is enabled'
    section: 'Configure SSH Server'
    description: |
        The              UsePAM
         directive enables the Pluggable Authentication Module PAM interface. If set to              yes
         this will enable PAM authentication using              ChallengeResponseAuthentication
         and              PasswordAuthentication
         directives in addition to PAM account and session module processing for all authentication types.
    remediation: |
        Edit the                  /etc/ssh/sshd_config
         file to set the parameter above any                  Include
         entries as follows:               UsePAM yes
         Note:
         First occurrence of a option takes precedence. If                  Include
         locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a
        file in                  Include
         location.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.21', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*usepam\h+"?yes"?\b'

  "4.2.22":
    title: '4.2.22 | Ensure sshd crypto policy is not set'
    section: 'Configure SSH Server'
    description: |
        Systemwide Crypto policy can be overridden or opted out of for openSSH
    remediation: |
        Run the following commands:
        # sed -ri "s/^\s*(CRYPTO_POLICY\s*=.*)$/# \1/" /etc/sysconfig/sshd

        # systemctl reload sshd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2.22', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.1":
    title: '4.3.1 | Ensure sudo is installed'
    section: 'Configure privilege escalation'
    description: |
        sudo
         allows a permitted user to execute a command as the superuser or another user, as specified by the security policy.
        The invoking users real not effective user ID is used to determine the user name with which to query the security
        policy.
    remediation: |
        Run the following command to install sudo # dnf install sudo
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.2":
    title: '4.3.2 | Ensure sudo commands use pty'
    section: 'Configure privilege escalation'
    description: |
        sudo
         can be configured to run only from a pseudo terminal              pseudopty
        .
    remediation: |
        Edit the file                  /etc/sudoers
         with                  visudo
         or a file in                  /etc/sudoers.d/
         with                  visudo -f
         <                 PATH_TO_FILE
        > and add the following line:               Defaults use_pty
         Note:
        sudo will read each file in                    /etc/sudoers.d
        , skipping file names that end in                    ~
         or contain a                    .
         character to avoid causing problems with package manager or editor temporary/backup files.
        Files are parsed in sorted lexical order. That is,                    /etc/sudoers.d/01_first
         will be parsed before                    /etc/sudoers.d/10_second
        .
        Be aware that because the sorting is lexical, not numeric,                    /etc/sudoers.d/1_whoops
         would be loaded after                    /etc/sudoers.d/10_second
        .                 Using a consistent number of leading zeroes in the file names can be used to avoid such problems.
        Impact: WARNING:
         Editing the                    sudo
         configuration incorrectly can cause                    sudo
         to stop functioning. Always use                    visudo
         to modify                    sudo
         configuration files.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.3":
    title: '4.3.3 | Ensure sudo log file exists'
    section: 'Configure privilege escalation'
    description: |
        The              Defaults logfile
         entry sets the path to the sudo log file. Setting a path turns on logging to a file negating this option turns it off.
        By default, sudo logs via syslog.
    remediation: |
        Edit the file                  /etc/sudoers
         or a file in                  /etc/sudoers.d/
         with visudo or visudo -f <PATH TO FILE> and add the following line:               Defaults  logfile="<PATH TO CUSTOM
        LOG FILE>"
         Example Defaults logfile="/var/log/sudo.log"
         Note:
        sudo will read each file in                    /etc/sudoers.d
        , skipping file names that end in                    ~
         or contain a                    .
         character to avoid causing problems with package manager or editor temporary/backup files.
        Files are parsed in sorted lexical order. That is,                    /etc/sudoers.d/01_first
         will be parsed before                    /etc/sudoers.d/10_second
        .
        Be aware that because the sorting is lexical, not numeric,                    /etc/sudoers.d/1_whoops
         would be loaded after                    /etc/sudoers.d/10_second
        .                 Using a consistent number of leading zeroes in the file names can be used to avoid such problems.
        Impact: WARNING:
         Editing the                    sudo
         configuration incorrectly can cause                    sudo
         to stop functioning. Always use                    visudo
         to modify                    sudo
         configuration files.
        Creation of additional log files can cause disk space exhaustion if not correctly managed. You should configure
        logrotate
         to manage the sudo log in accordance with your local policy.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.4":
    title: '4.3.4 | Ensure users must provide password for escalation'
    section: 'Configure privilege escalation'
    description: |
        The operating system must be configured so that users must provide a password for privilege escalation.
    remediation: |
        Based on the outcome of the audit procedure, use                  visudo -f <PATH TO FILE>
         to edit the relevant sudoers file.
        Remove any line with occurrences of                  NOPASSWD
         tags in the file.               Impact: This will prevent automated processes from being able to elevate privileges. To
        include Ansible and AWS builds
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_4.3.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.5":
    title: '4.3.5 | Ensure re-authentication for privilege escalation is not disabled globally'
    section: 'Configure privilege escalation'
    description: |
        The operating system must be configured so that users must reauthenticate for privilege escalation.
    remediation: |
        Configure the operating system to require users to reauthenticate for privilege escalation.
        Based on the outcome of the audit procedure, use                  visudo -f <PATH TO FILE>
         to edit the relevant sudoers file.
        Remove any occurrences of                  !authenticate
         tags in the file(s).
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.6":
    title: '4.3.6 | Ensure sudo authentication timeout is configured correctly'
    section: 'Configure privilege escalation'
    description: |
        sudo
         caches used credentials for a default of 5 minutes. This is for ease of use when there are multiple administrative
        tasks to perform. The timeout can be modified to suit local security policies.
    remediation: |
        If the currently configured timeout is larger than 15 minutes, edit the file listed in the audit section with
        visudo -f <PATH TO FILE>
         and modify the entry                  timestamp_timeout=
         to 15 minutes or less as per your site policy. The value is in minutes. This particular entry may appear on its own, or
        on the same line as                  env_reset
        . See the following two examples:               Defaults    env_reset, timestamp_timeout=15

        Defaults    timestamp_timeout=15
        Defaults    env_reset
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.3.7":
    title: '4.3.7 | Ensure access to the su command is restricted'
    section: 'Configure privilege escalation'
    description: |
        The              su
         command allows a user to run a command or shell as another user. The program has been superseded by              sudo
        , which allows for more granular control over privileged access. Normally, the              su
         command can be executed by any user. By uncommenting the              pamwheel.so
         statement in              /etc/pam.d/su
        , the              su
         command will only allow users in a specific groups to execute              su
        . This group should be empty to reinforce the use of              sudo
         for privileged access.
    remediation: |
        Create an empty group that will be specified for use of the                  su
         command.  The group should be named according to site policy.               Example: # groupadd sugroup

        Add the following line to the                  /etc/pam.d/su
         file, specifying the empty group:               auth required pam_wheel.so use_uid group=sugroup
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.1.1":
    title: '4.4.1.1 | Ensure latest version of pam is installed - manual'
    section: 'Configure PAM software packages'
    description: |
        Updated versions of PAM include additional functionality
    remediation: |
        - IF -
         the version of                    PAM
         on the system is less that version                    pam-1.3.1-25
        :
        Run the following command to update to the latest version of                    PAM
        :                 # dnf upgrade pam
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == pam-1.3.1-25'

  "4.4.1.2":
    title: '4.4.1.2 | Ensure latest version of authselect is installed - manual'
    section: 'Configure PAM software packages'
    description: |
        Authselect is a utility that simplifies the configuration of user authentication. Authselect offers readymade profiles
        that can be universally used with all modern identity management systems You can create and deploy a custom profile by
        customizing one of the default profiles, the sssd, winbind, or the nis profile. This is particularly useful if Modifying
        a readymade authselect profile is not enough for your needs. When you deploy a custom profile, the profile is applied to
        every user logging into the given host. This would be the recommended method, so that the existing profiles can remain
        unmodified.
        Updated versions of                authselect
         include additional functionality
    remediation: |
        Run the following command to install                    authselect
        :                 # dnf install authselect
         - IF -
         the version of                    authselect
         on the system is less that version                    authselect-1.2.6-1
        :
        Run the following command to update to the latest version of                    authselect
        :                 # dnf upgrade authselect
         Impact:
        If local site customizations have been made to an authselect default or custom profile created with the
        --symlink-pam
         option, these customizations may be over-written by updating authselect.                   WARNING: Do not use
        authselect if: your host is part of Linux Identity Management. Joining your host to an IdM domain with the ipa-client-
        install command automatically configures SSSD authentication on your host. Your host is part of Active Directory via
        SSSD. Calling the realm join command to join your host to an Active Directory domain automatically configures SSSD
        authentication on your host.
        It is                      not
         recommended to change the authselect profiles configured by ipa-client-install or realm join. If you need to modify
        them, display the current settings before making any modifications, so you can revert back to them if necessary
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == authselect-1.2.6-1'

  "4.4.2.1":
    title: '4.4.2.1 | Ensure active authselect profile includes pam modules - manual'
    section: 'Configure authselect'
    description: |
        A custom profile can be created by copying and customizing one of the default profiles. The default profiles include
        sssd, winbind, or the nis.  This profile can then be customized to follow site specific requirements. You can select a
        profile for the authselect utility for a specific host. The profile will be applied to every user logging into the host.
    remediation: |
        Perform the following to create a custom authselect profile, with the modules covered in this Benchmark correctly
        included in the custom profile template files Run the following command to create a custom authselect profile: #
        authselect create-profile <custom-profile name> <options>
         Example: # authselect create-profile custom-profile -b sssd
         Run the following command to select a custom authselect profile: # authselect select custom/<CUSTOM PROFILE NAME>
        {with-<OPTIONS>} {--force}
         Example: # authselect select custom/custom-profile --backup=PAM_CONFIG_BACKUP --force
         Note:
        The PAM and authselect packages must be versions                      pam-1.3.1-25
         and                      authselect-1.2.6-1
         or newer
        The example is based on a custom profile built (copied) from the the                      SSSD
         default authselect profile.
        The example does not include the                      symlink
         option for the                      PAM
         or                      Metadata
         files.  This is due to the fact that by linking the                      PAM
         files future updates to                      authselect
         may overwrite local site customizations to the custom profile
        The                      --backup=PAM_CONFIG_BACKUP
         option will create a backup of the current config. The backup will be stored at
        /var/lib/authselect/backups/PAM_CONFIG_BACKUP

        The                      --force
         option will force the overwrite of the existing files and automatically backup system files before writing any change
        unless the                      --nobackup
         option is set.

        On a new system where authselect has not been configured. In this case, the                          --force
         option will force the selected authselect profile to be active and overwrite the existing files with files generated
        from the selected authselect profile's templates
        On an existing system with a custom configuration. The                          --force
         option may be used, but                          ensure that you note the backup location included as your custom files
        will be overwritten.
         This will allow you to review the changes and add any necessary customizations to the template files for the authselect
        profile. After updating the templates, run the command                          authselect apply-changes
         to add these custom entries to the files in                          /etc/pam.d/

                                    - IF -
         you receive an error ending with a message similar to:
        [error] Refusing to activate profile unless those changes are removed or overwrite is requested.
        Some unexpected changes to the configuration were detected. Use 'select' command instead.

        This error is caused when the previous configuration was not created by authselect but by other tool or by manual
        changes and the                    --force
         option will be required to enable the authselect profile.                 Impact:
        If local site customizations have been made to the authselect template or files in                      /etc/pam.d
         these custom entries should be added to the newly created custom profile before it's applied to the system. Please note
        that the order within the pam stacks is important when adding these entries. Specifically for the password stack, the
        use_authtok
         option is important, and should appear on all modules except for the first entry.                   Example:
        password   requisite   pam_pwquality.so local_users_only #<-- Top of password stack, doesn't include use_authtok
        password   required    pam_pwhistory.so use_authtok #<-- subsequent entry in password stack, includes use_authtok
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.4.2.2":
    title: '4.4.2.2 | Ensure pam faillock module is enabled'
    section: 'Configure authselect'
    description: |
        The                pamfaillock.so
         module maintains a list of failed authentication attempts per user during a specified interval and locks the account in
        case there were more than the configured number of consecutive failed authentications this is defined by the
        deny
         parameter in the faillock configuration. It stores the failure records into peruser files in the tally directory.
    remediation: |
        Run the following script to verify the                    pam_faillock.so
         lines exist in the profile templates:
        #!/usr/bin/env bash

        {
           l_module_name="faillock"
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           grep -P -- "\bpam_$l_module_name\.so\b" "$l_pam_profile_path"/{password,system}-auth
        }
                         Example Output with a custom profile named "custom-profile":
        /etc/authselect/custom/custom-profile/password-auth:auth   required   pam_faillock.so preauth silent {include if "with-
        faillock"}
        /etc/authselect/custom/custom-profile/password-auth:auth   required   pam_faillock.so authfail {include if "with-
        faillock"}
        /etc/authselect/custom/custom-profile/password-auth:account   required   pam_faillock.so {include if "with-faillock"}

        /etc/authselect/custom/custom-profile/system-auth:auth   required   pam_faillock.so preauth silent {include if "with-
        faillock"}
        /etc/authselect/custom/custom-profile/system-auth:auth   required   pam_faillock.so authfail {include if "with-
        faillock"}
        /etc/authselect/custom/custom-profile/system-auth:account   required   pam_faillock.so  {include if "with-faillock"}
                         Note:
         The lines may not include                    {include if "with-faillock"}
                                 - IF -
         the lines shown above are not returned, refer to the Recommendation "Ensure active authselect profile includes pam
        modules" to update the authselect profile template files to include the                    pam_faillock
         entries before continuing this remediation.                 - IF -
         the lines include                    {include if "with-faillock"}
        , run the following command to enable the authselect                    with-faillock
         feature and update the files in                    /etc/pam.d
         to include                    pam_faillock.so
        :                 # authselect enable-feature with-faillock
         - IF -
         any of the                    pam_faillock
         lines exist without                    {include if "with-faillock"}
        , run the following command to update the files in                    /etc/pam.d
         to include                    pam_faillock.so
        :                 # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.2.3":
    title: '4.4.2.3 | Ensure pam pwquality module is enabled'
    section: 'Configure authselect'
    description: |
        The                pampwquality.so
         module performs password quality checking. This module can be plugged into the password stack of a given service to
        provide strengthchecking for passwords. The code was originally based on pamcracklib module and the module is backwards
        compatible with its options.             The action of this module is to prompt the user for a password and check its
        strength against a system dictionary and a set of rules for identifying poor choices. The first action is to prompt for
        a single password, check its strength and then, if it is considered strong, prompt for the password a second time to
        verify that it was typed correctly on the first occasion. All being well, the password is passed on to subsequent
        modules to be installed as the new authentication token.
    remediation: |
        Review the authselect profile templates:
        Run the following script to verify the                    pam_pwquality.so
         lines exist in the active profile templates:
        #!/usr/bin/env bash

        {
           l_module_name="pwquality"
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           grep -P -- "\bpam_$l_module_name\.so\b" "$l_pam_profile_path"/{password,system}-auth
        }
                         Example Output with a custom profile named "custom-profile":
        /etc/authselect/custom/custom-profile/password-auth:password   requisite   pam_pwquality.so local_users_only {include if
        "with-pwquality"}

        /etc/authselect/custom/custom-profile/system-auth:password   requisite   pam_pwquality.so local_users_only {include if
        "with-pwquality"}
                         Note:
         The lines may not include                    {include if "with-pwquality"}
                                 - IF -
         the lines shown above are not returned, refer to the Recommendation "Ensure active authselect profile includes pam
        modules" to update the authselect profile template files to include the                    pam_pwquality
         entries before continuing this remediation.                 - IF -
         any of the                    pam_pwquality
         lines include                    {include if "with-pwquality"}
        , run the following command to enable the authselect                    with-pwquality
         feature and update the files in                    /etc/pam.d
         to include `pam_pwquality:                 # authselect enable-feature with-pwquality
         - IF -
         any of the                    pam_pwquality
         lines exist without                    {include if "with-pwquality"}
        , run the following command to update the files in                    /etc/pam.d
         to include                    pam_pwquality.so
        :                 # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.2.4":
    title: '4.4.2.4 | Ensure pam pwhistory module is enabled'
    section: 'Configure authselect'
    description: |
        The                pamhistory.so
         module saves the last passwords for each user in order to force password change history and keep the user from
        alternating between the same password too frequently.
    remediation: |
        Run the following script to verify the                    pam_pwhistory.so
         lines exist in the profile templates:
        #!/usr/bin/env bash

        {
           l_module_name="pwhistory"
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           grep -P -- "\bpam_$l_module_name\.so\b" "$l_pam_profile_path"/{password,system}-auth
        }
                         Example Output with a custom profile named "custom-profile":
        /etc/authselect/custom/custom-profile/password-auth:password   required   pam_pwhistory.so use_authtok {include if
        "with-pwhistory"}

        /etc/authselect/custom/custom-profile/system-auth:password   required   pam_pwhistory.so use_authtok {include if "with-
        pwhistory"}
                         Note:
         The lines may not include                    {include if "with-pwhistory"}
                                 - IF -
         the lines shown above are not returned, refer to the Recommendation "Ensure active authselect profile includes pam
        modules" to update the authselect profile template files to include the                    pam_pwhistory
         entries before continuing this remediation.                 - IF -
         the lines include                    {include if "with-pwhistory"}
        , run the following command to enable the authselect                    with-pwhistory
         feature and update the files in                    /etc/pam.d
         to include                    pam_faillock.so
        :                 # authselect enable-feature with-pwhistory
         - IF -
         any of the                    pam_pwhistory
         lines exist without                    {include if "with-pwhistory"}
        , run the following command to update the files in                    /etc/pam.d
         to include                    pam_pwhistory.so
        :                 # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.2.5":
    title: '4.4.2.5 | Ensure pam unix module is enabled'
    section: 'Configure authselect'
    description: |
        The                pamunix.so
         module is the standard Unix authentication module. It uses standard calls from the systems libraries to retrieve and
        set account information as well as authentication. Usually this is obtained from the                /etc/passwd
         and the                /etc/shadow
         file as well if shadow is enabled.
    remediation: |
        Run the following script to verify the                    pam_unix.so
         lines exist in the profile templates:
        #!/usr/bin/env bash

        {
           l_module_name="unix"
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           grep -P -- "\bpam_$l_module_name\.so\b" "$l_pam_profile_path"/{password,system}-auth
        }
                         Example Output with a custom profile named "custom-profile":
        /etc/authselect/custom/custom-profile/password-auth:auth   sufficient   pam_unix.so {if not "without-nullok":nullok}
        /etc/authselect/custom/custom-profile/password-auth:account   required   pam_unix.so
        /etc/authselect/custom/custom-profile/password-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok remember=5
        /etc/authselect/custom/custom-profile/password-auth:session   required   pam_unix.so

        /etc/authselect/custom/custom-profile/system-auth:auth   sufficient   pam_unix.so {if not "without-nullok":nullok}
        /etc/authselect/custom/custom-profile/system-auth:account   required   pam_unix.so
        /etc/authselect/custom/custom-profile/system-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok
        /etc/authselect/custom/custom-profile/system-auth:session   required   pam_unix.so
                         - IF -
         the lines shown above are not returned, refer to the Recommendation "Ensure active authselect profile includes pam
        modules" to update the authselect profile template files to include the                    pam_unix
         entries before continuing this remediation.                 Note:
         Arguments following                    pam_unix.so
         may be different than the example output
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.2.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.1.1":
    title: '4.4.3.1.1 | Ensure password failed attempts lockout is configured'
    section: 'Configure pam_faillock module'
    description: |
        The                  denyn
         option will deny access if the number of consecutive authentication failures for this user during the recent interval
        exceeds
        .
    remediation: |
        Create or edit the following line in                      /etc/security/faillock.conf
         setting the                      deny
         option to                      5
         or less:                   deny = 5

        Run the following script to remove the                      deny
         argument from the                      pam_faillock.so
         module in the PAM files:
        #!/usr/bin/env bash
        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri 's/(^\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so.*)(\s+deny\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.1.2":
    title: '4.4.3.1.2 | Ensure password unlock time is configured'
    section: 'Configure pam_faillock module'
    description: |
        unlocktimen
          The access will be reenabled after
         seconds after the lock out. The value                  0
         has the same meaning as value never  the access will not be reenabled without resetting the faillock entries by the
        faillock8 command.               Note The default directory that pamfaillock uses is usually cleared on system boot so
        the access will be also reenabled after system reboot. If that is undesirable a different tally directory must be set
        with the dir option. It is usually undesirable to permanently lock out users as they can become easily a target of
        denial of service attack unless the usernames are random and kept secret to potential attackers.
        The maximum configurable value for                    unlocktime
         is                    604800
    remediation: |
        Set password unlock time to conform to site policy.                      unlock_time
         should be                      0
         (never), or                      900
         seconds or greater.
        Edit                      /etc/security/faillock.conf
         and update or add the following line:                   unlock_time = 900

        Run the following script to remove the                      unlock_time
         argument from the                      pam_faillock.so
         module in the PAM files:
        #!/usr/bin/env bash
        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri 's/(^\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so.*)(\s+unlock_time\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
        ``
                           Impact:
        Use of                        unlock_time=0
         may allow an attacker to cause denial of service to legitimate users. This will also require a systems administrator
        with elevated privileges to unlock the account.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.1.3":
    title: '4.4.3.1.3 | Ensure password failed attempts lockout includes root account'
    section: 'Configure pam_faillock module'
    description: |
        evendenyroot
          Root account can become locked as well as regular accounts               rootunlocktimen
          This option implies evendenyroot option. Allow access after n seconds to root account after the account is locked. In
        case the option is not specified the value is the same as of the unlocktime option.
    remediation: |
        Edit                      /etc/security/faillock.conf
        :
        Remove or update any line containing                        root_unlock_time
        ,                        -OR-
         set it to a value of                        60
         or more                     Update or add the following line: even_deny_root

        Run the following script to remove the                      even_deny_root
         and                      root_unlock_time
         arguments from the                      pam_faillock.so
         module in the PAM files:
        #!/usr/bin/env bash
        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri 's/(^\s*auth\s+(.*)\s+pam_faillock\.so.*)(\s+even_deny_root)(.*$)/\1\4/' "$l_authselect_file"
             sed -ri 's/(^\s*auth\s+(.*)\s+pam_faillock\.so.*)(\s+root_unlock_time\s*=\s*\S+)(.*$)/\1\4/' "$l_authselect_file"
           done
           authselect apply-changes
        }
        ``
                           Impact:
        Use of                        unlock_time=0
         or                        root_unlock_time=0
         may allow an attacker to cause denial of service to legitimate users.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_4.4.3.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.2.1":
    title: '4.4.3.2.1 | Ensure password number of changed characters is configured'
    section: 'Configure pam_pwquality module'
    description: |
        The                  pwquality
                                 difok
         option sets the number of characters in a password that must not be present in the old password.
    remediation: |
        Edit or add the following line in                      /etc/security/pwquality.conf
         to a value of                      2
         or more and meets local site policy:                   difok = 2

        Create or modify a file ending in                      .conf
         in the                      /etc/security/pwquality.conf.d/
         directory or the file                      /etc/security/pwquality.conf
         and add or modify the following line to set                      difok
         to                      2
         or more. Ensure setting conforms to local site policy:                   Example:
        # sed -ri 's/^\s*difok\s*=/# &/' /etc/security/pwquality.conf
        # printf '\n%s' "difok = 2" >> /etc/security/pwquality.conf.d/50-pwdifok.conf

        Run the following script to remove setting                      difok
         on the                      pam_pwquality.so
         module  in the PAM files:
        #!/usr/bin/env bash

        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+difok\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.2.2":
    title: '4.4.3.2.2 | Ensure password length is configured'
    section: 'Configure pam_pwquality module'
    description: |
        minlen
          Minimum acceptable size for the new password plus one if credits are not disabled which is the            default.
        Cannot be set to lower value than 6.
    remediation: |
        Create or modify a file ending in                      .conf
         in the                      /etc/security/pwquality.conf.d/
         directory or the file                      /etc/security/pwquality.conf
         and add or modify the following line to set password length of                      14
         or more characters. Ensure that password length conforms to local site policy:                   Example:
        # sed -ri 's/^\s*minlen\s*=/# &/' /etc/security/pwquality.conf
        # printf '\n%s' "minlen = 14" >> /etc/security/pwquality.conf.d/50-pwlength.conf

        Run the following script to remove setting                      minlen
         on the                      pam_pwquality.so
         module  in the PAM files:
        #!/usr/bin/env bash

        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri
        's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+minlen\s*=\s*[0-9]+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.2.3":
    title: '4.4.3.2.3 | Ensure password complexity is configured - manual'
    section: 'Configure pam_pwquality module'
    description: |
        Password complexity can be set through minclass
          The minimum number of classes of characters required in a new password. digits, uppercase, lowercase, others. e.g.
        minclass  4
         requires digits, uppercase, lower case, and special characters.                 dcredit
          The maximum credit for having digits in the new password. If less than                    0
         it is the minimum number of digits in the new password. e.g.                    dcredit  1
         requires at least one digit                 ucredit
          The maximum credit for having uppercase characters in the new password. If less than 0 it is the minimum number of
        uppercase characters in the new password. e.g.                    ucredit  1
         requires at least one uppercase character                 ocredit
          The maximum credit for having other characters in the new password.  If less than 0 it is the minimum number of other
        characters in the new password. e.g.                    ocredit  1
         requires at least one special character                 lcredit
          The maximum credit for having lowercase characters in the new password.  If less than 0 it is the minimum number of
        lowercase characters in the new password. e.g.                    lcredit  1
         requires at least one lowercase character
    remediation: |
        Create or modify a file ending in                      .conf
         in the                      /etc/security/pwquality.conf.d/
         directory or the file                      /etc/security/pwquality.conf
         and add or modify the following line to set:                   minclass = 4 --AND/OR-- dcredit = -_N_ ucredit = -_N_
        ocredit = -_N_ lcredit = -_N_ Example:
        # sed -ri 's/^\s*minclass\s*=/# &/' /etc/security/pwquality.conf
        # printf '\n%s' "minclass = 4" >> /etc/security/pwquality.conf.d/50-pwcomplexity.conf
                           --AND/OR--
        # sed -ri 's/^\s*[dulo]credit\s*=/# &/' /etc/security/pwquality.conf
        # printf '%s\n' "dcredit = -1" "ucredit = -1" "ocredit = -1" "lcredit = -1" >
        /etc/security/pwquality.conf.d/50-pwcomplexity.conf

        Run the following script to remove setting                      minclass
        ,                      dcredit
        ,                      ucredit
        ,                      lcredit
        , and                      ocredit
         on the                      pam_pwquality.so
         module in the PAM files
        #!/usr/bin/env bash

        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri
        's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+minclass\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
             sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+dcredit\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
             sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+ucredit\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
             sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+lcredit\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
             sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+ocredit\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_4.4.3.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.4.3.2.4":
    title: '4.4.3.2.4 | Ensure password same consecutive characters is configured'
    section: 'Configure pam_pwquality module'
    description: |
        The                  pwquality
                                 maxrepeat
         option sets the maximum number of allowed same consecutive characters in a new password.
    remediation: |
        Create or modify a file ending in                      .conf
         in the                      /etc/security/pwquality.conf.d/
         directory or the file                      /etc/security/pwquality.conf
         and add or modify the following line to set                      maxrepeat
         to                      3
         or less and not                      0
        . Ensure setting conforms to local site policy:                   Example:
        # sed -ri 's/^\s*maxrepeat\s*=/# &/' /etc/security/pwquality.conf
        # printf '\n%s' "maxrepeat = 3" >> /etc/security/pwquality.conf.d/50-pwrepeat.conf

        Run the following script to remove setting                      maxrepeat
         on the                      pam_pwquality.so
         module  in the PAM files:
        #!/usr/bin/env bash

        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri
        's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+maxrepeat\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.2.5":
    title: '4.4.3.2.5 | Ensure password maximum sequential characters is configured'
    section: 'Configure pam_pwquality module'
    description: |
        The                  pwquality
                                 maxsequence
         option sets the maximum length of monotonic character sequences in the new password. Examples of such sequence are
        12345
         or                  fedcb
        . The check is disabled if the value is                  0
        .               Note
         Most such passwords will not pass the simplicity check unless the sequence is only a minor part of the password.
    remediation: |
        Create or modify a file ending in                      .conf
         in the                      /etc/security/pwquality.conf.d/
         directory or the file                      /etc/security/pwquality.conf
         and add or modify the following line to set                      maxsequence
         to                      3
         or less and not                      0
        . Ensure setting conforms to local site policy:                   Example:
        # sed -ri 's/^\s*maxsequence\s*=/# &/' /etc/security/pwquality.conf
        # printf '\n%s' "maxsequence = 3" >> /etc/security/pwquality.conf.d/50-pwmaxsequence.conf

        Run the following script to remove setting                      maxsequence
         on the                      pam_pwquality.so
         module  in the PAM files:
        #!/usr/bin/env bash

        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri
        's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+maxsequence\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.2.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.2.6":
    title: '4.4.3.2.6 | Ensure password dictionary check is enabled'
    section: 'Configure pam_pwquality module'
    description: |
        The                  pwquality
                                 dictcheck
         option sets whether to check for the words from the                  cracklib
         dictionary.
    remediation: |
        Edit any file ending in                      .conf
         in the                      /etc/security/pwquality.conf.d/
         directory and/or the file                      /etc/security/pwquality.conf
         and comment out or remove any instance of                      dictcheck = 0
        :                   Example: # sed -ri 's/^\s*dictcheck\s*=/# &/' /etc/security/pwquality.conf
        /etc/security/pwquality.conf.d/*.conf

        Run the following script to remove setting                      dictcheck
         on the                      pam_pwquality.so
         module  in the PAM files:
        #!/usr/bin/env bash

        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri
        's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+dictcheck\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.2.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.2.7":
    title: '4.4.3.2.7 | Ensure password quality is enforced for the root user'
    section: 'Configure pam_pwquality module'
    description: |
        If the                  pwquality
                                 enforceforroot
         option is enabled, the module will return error on failed check even if the user changing the password is root.
        This option is off by default which means that just the message about the failed check is printed but root can change
        the password anyway. Note
         The root is not asked for an old password so the checks that compare the old and new password are not performed.
    remediation: |
        Edit or add the following line in a                      *.conf
         file in                      /etc/security/pwquality.conf.d
         or in                        /etc/security/pwquality.conf
        :                   Example: printf '\n%s\n' "enforce_for_root" >> /etc/security/pwquality.conf.d/50-pwroot.conf
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.2.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.3.1":
    title: '4.4.3.3.1 | Ensure password history remember is configured'
    section: 'Configure pam_pwhistory module'
    description: |
        The                  /etc/security/opasswd
         file stores the users old passwords and can be checked to ensure that users are not recycling recent passwords.
        rememberN                     N
         is the number of old passwords to remember
    remediation: |
        Edit or add the following line in                      /etc/security/pwhistory.conf
        :                   remember = 24

        Run the following script to remove the                      remember
         argument from the                      pam_pwhistory.so
         module in                      /etc/pam.d/system-auth
         and                      /etc/pam.d/password-auth
        :
        #!/usr/bin/env bash

        {
           for l_pam_file in system-auth password-auth; do
             l_authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
             sed -ri
        's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so.*)(\s+remember\s*=\s*\S+)(.*$)/\1\4/'
        "$l_authselect_file"
           done
           authselect apply-changes
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.3.2":
    title: '4.4.3.3.2 | Ensure password history is enforced for the root user'
    section: 'Configure pam_pwhistory module'
    description: |
        If the                  pwhistory
                                 enforceforroot
         option is enabled, the module will enforce password history for the root user as well
    remediation: |
        Edit or add the following line in                      /etc/security/pwhistory.conf
        :                   enforce_for_root
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.3.3":
    title: '4.4.3.3.3 | Ensure pam pwhistory includes use authtok'
    section: 'Configure pam_pwhistory module'
    description: |
        useauthtok
          When password changing enforce the module to set the new password to the one provided by a previously stacked password
        module
    remediation: |
        Run the following script to verify the active authselect profile includes                      use_authtok
         on the password stack's pam_pwhistory.so module lines:
        #!/usr/bin/env bash

        {
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           grep -P -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?use_authtok\b'
        "$l_pam_profile_path"/{password,system}-auth
        }
                           Example output:
        /etc/authselect/custom/custom-profile/password-auth:password   required   pam_pwhistory.so use_authtok

        /etc/authselect/custom/custom-profile/system-auth:password   required   pam_pwhistory.so use_authtok
                           - IF -
         the output does not include                      use_authtok
        , run the following script:
        #!/usr/bin/env bash

        {
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           for l_authselect_file in "$l_pam_profile_path"/password-auth "$l_pam_profile_path"/system-auth; do
              if  grep -Pq '^\h*password\h+([^#\n\r]+)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?use_authtok\b' "$l_authselect_file";
        then
                 echo "- \"use_authtok\" is already set"
              else
                 echo "- \"use_authtok\" is not set. Updating template"
                 sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so\s+.*)$/& use_authtok/g'
        "$l_authselect_file"
              fi
           done
        }

        Run the following command to update the                      password-auth
         and                      system-auth
         files in                      /etc/pam.d
         to include the                      use_authtok
         argument on the password stack's                      pam_pwhistory.so
         lines:                   # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.3.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.4.1":
    title: '4.4.3.4.1 | Ensure pam unix does not include nullok'
    section: 'Configure pam_unix module'
    description: |
        The                  nullok
         argument overrides the default action of                  pamunix.so
         to not permit the user access to a service if their official password is blank.
    remediation: |
        Run the following script to verify that the active authselect profile's                      system-auth
         and                      password-auth
         files include                      {if not "without-nullok":nullok}
                                       - OR -
         don't include the                      nullok
         option on the                      pam_unix.so
         module:
        {
           l_module_name="unix"
           l_profile_name="$(head -1 /etc/authselect/authselect.conf)"
           if [[ ! "$l_profile_name" =~ ^custom\/ ]]; then
              echo " - Follow Recommendation \"Ensure custom authselect profile is used\" and then return to this
        Recommendation"
           else
              grep -P -- "\bpam_$l_module_name\.so\b" /etc/authselect/$l_profile_name/{password,system}-auth
           fi
        }
                           Example output with a custom profile named "custom-profile":
        /etc/authselect/custom/custom-profile/password-auth:auth   sufficient   pam_unix.so {if not "without-nullok":nullok}
        /etc/authselect/custom/custom-profile/password-auth:account   required   pam_unix.so
        /etc/authselect/custom/custom-profile/password-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok
        /etc/authselect/custom/custom-profile/password-auth:session   required   pam_unix.so

        /etc/authselect/custom/custom-profile/system-auth:auth   sufficient   pam_unix.so {if not "without-nullok":nullok}
        /etc/authselect/custom/custom-profile/system-auth:account   required   pam_unix.so
        /etc/authselect/custom/custom-profile/system-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok
        /etc/authselect/custom/custom-profile/system-auth:session   required   pam_unix.so
                           - IF -
         any line is returned with                      nullok
         that doesn't also include                      {if not "without-nullok":nullok}
        , run the following script:
        #!/usr/bin/env bash

        {
           for l_pam_file in system-auth password-auth; do
              l_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$l_pam_file"
              sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)(nullok)(\s*.*)$/\1\2\4/g' $l_file
           done
        }
                           - IF -
         any line is returned with                      {if not "without-nullok":nullok}
        , run the following command to enable the authselect                      without-nullok
         feature:                   # authselect enable-feature without-nullok

        Run the following command to update the files in                      /etc/pam.d
         to include                      pam_unix.so
         without the                      nullok
         argument:                   # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.4.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.4.2":
    title: '4.4.3.4.2 | Ensure pam unix does not include remember'
    section: 'Configure pam_unix module'
    description: |
        The                  remembern
         argument saves the last n passwords for each user in                  /etc/security/opasswd
         in order to force password change history and keep the user from alternating between the same password too frequently.
        The MD5 password hash algorithm is used for storing the old passwords. Instead of this option the
        pampwhistory
         module should be used. The                  pampwhistory
         module saves the last n passwords for each user in                  /etc/security/opasswd
         using the password hash algorithm set on the                  pamunix
         module. This allows for the                  sha512
         hash algorithm to be used.
    remediation: |
        Run the following script to verify the active authselect profile doesn't include the                      remember
         argument on the                      pam_unix.so
         module lines:
        #!/usr/bin/env bash

        {
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           grep -P -- '^\h*password\h+([^#\n\r]+\h+)pam_unix\.so\b' "$l_pam_profile_path"/{password,system}-auth
        }
                           Output should be similar to:
        /etc/authselect/custom/custom-profile/password-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok

        /etc/authselect/custom/custom-profile/system-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok
                           - IF -
         any line includes                      remember=
        , run the following script to remove the                      remember=
         from the                      pam_unix.so
         lines in the active authselect profile                      password-auth
         and system-auth` templates:
        #!/usr/bin/env bash

        {
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           for l_authselect_file in "$l_pam_profile_path"/password-auth "$l_pam_profile_path"/system-auth; do
              sed -ri
        's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)(remember=[1-9][0-9]*)(\s*.*)$/\1\4/g'
        "$l_authselect_file"
           done
        }

        Run the following command to update the                      password-auth
         and system-auth                     files in
        /etc/pam.d                      to include pam_unix.so without the remember
         argument:                   # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.4.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.4.3":
    title: '4.4.3.4.3 | Ensure pam unix includes a strong password hashing algorithm'
    section: 'Configure pam_unix module'
    description: |
        A cryptographic hash function converts an arbitrarylength input into a fixed length output. Password hashing performs a
        oneway transformation of a password, turning the password into another string, called the hashed password.
    remediation: |
        Note:
        If                        yescrypt
         becomes available in a future release, this would also be acceptable. It is highly recommended that the chosen hashing
        algorithm is consistent across                        /etc/libuser.conf
        ,                        /etc/login.defs
        ,                        /etc/pam.d/password-auth
        , and                        /etc/pam.d/system-auth
        .
        This only effects local users and passwords created after updating the files to use                        sha512
         or                        yescrypt
        . If it is determined that the password algorithm being used is not                        sha512
         or                        yescrypt
        , once it is changed, it is recommended that all user ID's be immediately expired and forced to change their passwords
        on next login.                     Run the following script to verify the active authselect profile includes a strong
        password hashing algorithm on the password stack's pam_unix.so module lines:
        #!/usr/bin/env bash

        {
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           grep -P -- '^\h*password\h+(requisite|required|sufficient)\h+pam_unix\.so\h+([^#\n\r]+\h+)?(sha512|yescrypt)\b'
        "$l_pam_profile_path"/{password,system}-auth
        }
                           Example output:
        /etc/authselect/custom/custom-profile/password-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok

        /etc/authselect/custom/custom-profile/system-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok
                           - IF -
         the output does not include either                      sha512
                                       - OR -
                                       yescrypt
        , or includes a different hashing algorithm, run the following script:
        #!/usr/bin/env bash

        {
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           for l_authselect_file in "$l_pam_profile_path"/password-auth "$l_pam_profile_path"/system-auth; do
              if grep -Pq '^\h*password\h+()\h+pam_unix\.so\h+([^#\n\r]+\h+)?(sha512|yescrypt)\b' "$l_authselect_file"; then
                 echo "- A strong password hashing algorithm is correctly set"
              elif grep -Pq '^\h*password\h+()\h+pam_unix\.so\h+([^#\n\r]+\h+)?(md5|bigcrypt|sha256|blowfish)\b'
        "$l_authselect_file"; then
                 echo "- A weak password hashing algorithm is set, updating to \"sha512\""
                 sed -ri
        's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)(md5|bigcrypt|sha256|blowfish)(\s*.*)$/\1\4
        sha512/g' "$l_authselect_file"
              else
                 echo "No password hashing algorithm is set, updating to \"sha512\""
                 sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)$/& sha512/g'
        "$l_authselect_file"
              fi
           done
        }

        Run the following command to update the                      password-auth
         and                      system-auth
         files in                      /etc/pam.d
         to include                      pam_unix.so
         with a strong password hashing algorithm argument:                   # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.4.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.4.3.4.4":
    title: '4.4.3.4.4 | Ensure pam unix includes use authtok'
    section: 'Configure pam_unix module'
    description: |
        useauthtok
          When password changing enforce the module to set the new password to the one provided by a previously stacked password
        module
    remediation: |
        Run the following script to verify the active authselect profile includes                      use_authtok
         on the password stack's pam_unix.so module lines:
        #!/usr/bin/env bash

        {
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           grep -P -- '^\h*password\h+(requisite|required|sufficient)\h+pam_unix\.so\h+([^#\n\r]+\h+)?use_authtok\b'
        "$l_pam_profile_path"/{password,system}-auth
        }
                           Example output:
        /etc/authselect/custom/custom-profile/password-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok

        /etc/authselect/custom/custom-profile/system-auth:password   sufficient   pam_unix.so sha512 shadow {if not "without-
        nullok":nullok} use_authtok
                           - IF -
         the output does not include                      use_authtok
        , run the following script:
        #!/usr/bin/env bash

        {
           l_pam_profile="$(head -1 /etc/authselect/authselect.conf)"
           if grep -Pq -- '^custom\/' <<< "$l_pam_profile"; then
              l_pam_profile_path="/etc/authselect/$l_pam_profile"
           else
              l_pam_profile_path="/usr/share/authselect/default/$l_pam_profile"
           fi
           for l_authselect_file in "$l_pam_profile_path"/password-auth "$l_pam_profile_path"/system-auth; do
              if  grep -Pq '^\h*password\h+([^#\n\r]+)\h+pam_unix\.so\h+([^#\n\r]+\h+)?use_authtok\b' "$l_authselect_file"; then
                 echo "- \"use_authtok\" is already set"
              else
                 echo "- \"use_authtok\" is not set. Updating template"
                 sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)$/& use_authtok/g'
        "$l_authselect_file"
              fi
           done
        }

        Run the following command to update the                      password-auth
         and                      system-auth
         files in                      /etc/pam.d
         to include the                      use_authtok
         argument on the password stack's                      pam_unix.so
         lines:                   # authselect apply-changes
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.4.3.4.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.5.1.1":
    title: '4.5.1.1 | Ensure strong password hashing algorithm is configured'
    section: 'Configure shadow password suite parameters'
    description: |
        A cryptographic hash function converts an arbitrarylength input into a fixed length output. Password hashing performs a
        oneway transformation of a password, turning the password into another string, called the hashed password.
    remediation: |
        Note:
         If                    yescrypt
         becomes available in a future release, this would also be acceptable. It is highly recommended that the chosen hashing
        algorithm is consistent across                    /etc/libuser.conf
        ,                    /etc/login.defs
        ,                    /etc/pam.d/password-auth
        , and                    /etc/pam.d/system-auth
        .                 Set password hashing algorithm to sha512.
        Edit                    /etc/libuser.conf
         and edit or add the following line:                 crypt_style = sha512

        Edit                    /etc/login.defs
         and edit or add the following line:                 ENCRYPT_METHOD SHA512
         Note:
         This only effects local users and passwords created after updating the files to use                    sha512
         or                    yescrypt
        . If it is determined that the password algorithm being used is not                    sha512
         or                    yescrypt
        , once it is changed, it is recommended that all group passwords be updated to use the stronger hashing algorithm.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.5.1.2":
    title: '4.5.1.2 | Ensure password expiration is 365 days or less'
    section: 'Configure shadow password suite parameters'
    description: |
        The                PASSMAXDAYS
         parameter in                /etc/login.defs
         allows an administrator to force passwords to expire once they reach a defined age.  It is recommended that the
        PASSMAXDAYS
         parameter be set to less than or equal to 365 days.
    remediation: |
        Set the                    PASS_MAX_DAYS
         parameter to conform to site policy in                    /etc/login.defs
         :                 PASS_MAX_DAYS 365
         Modify user parameters for all users with a password set to match: # chage --maxdays 365 <user>
         Impact: The password expiration must be greater than the minimum days between password changes or users will be unable
        to change their password
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "4.5.1.3":
    title: '4.5.1.3 | Ensure password expiration warning days is 7 or more'
    section: 'Configure shadow password suite parameters'
    description: |
        The                PASSWARNAGE
         parameter in                /etc/login.defs
          allows an administrator to notify users that their password will expire in a defined number of days. It is recommended
        that the                PASSWARNAGE
         parameter be set to 7 or more days.
    remediation: |
        Set the                    PASS_WARN_AGE
          parameter to 7 in                    /etc/login.defs
         :                 PASS_WARN_AGE 7
         Modify user parameters for all users with a password set to match: # chage --warndays 7 <user>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "4.5.1.4":
    title: '4.5.1.4 | Ensure inactive password lock is 30 days or less'
    section: 'Configure shadow password suite parameters'
    description: |
        User accounts that have been inactive for over a given period of time can be automatically disabled. It is recommended
        that accounts that are inactive for 30 days after password expiration be disabled.
    remediation: |
        Run the following command to set the default password inactivity period to 30 days: # useradd -D -f 30
         Modify user parameters for all users with a password set to match: # chage --inactive 30 <user>
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "4.5.1.5":
    title: '4.5.1.5 | Ensure all users last password change date is in the past - manual'
    section: 'Configure shadow password suite parameters'
    description: |
        All users should have a password change date in the past.
    remediation: |
        Investigate any users with a password change date in the future and correct them.  Locking the account, expiring the
        password, or resetting the password manually may be appropriate.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.1.5', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.5.2.1":
    title: '4.5.2.1 | Ensure default group for the root account is GID 0 - manual'
    section: 'Configure root and system accounts and environment'
    description: |
        The                usermod
         command can be used to specify which group the                root
         account belongs to. This affects permissions of files that are created by the                root
         account.
    remediation: |
        Run the following command to set the                    root
         user's default group ID to                    0
        :                 # usermod -g 0 root
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == root:0'

  "4.5.2.2":
    title: '4.5.2.2 | Ensure root user umask is configured'
    section: 'Configure root and system accounts and environment'
    description: |
        The user filecreation mode mask                umask
         is used to determine the file permission for newly created directories and files. In Linux, the default permissions for
        any newly created directory is 0777                rwxrwxrwx
        , and for any newly created file it is 0666                rwrwrw
        . The                umask
         modifies the default Linux permissions by restricting masking these permissions. The                umask
         is not simply subtracted, but is processed bitwise. Bits set in the                umask
         are cleared in the resulting file mode.             umask
         can be set with either                Octal
         or                Symbolic
         values             Octal
         Numeric Value  Represented by either three or four digits. ie                  umask 0027
         or                  umask 027
        .  If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting
        permissions for user, group, and world/other respectively.               Symbolic
         Value  Represented by a comma separated list for User                  u
        , group                  g
        , and world/other                  o
        .  The permissions listed are not masked by                  umask
        . ie a                  umask
         set by                  umask urwx,grx,o
         is the                  Symbolic
         equivalent of the                  Octal
                                 umask 027
        .  This                  umask
         would set a newly created directory with file mode                  drwxrx
         and a newly created file with file mode                  rwr
        .               root user Shell Configuration Files /root/.bashprofile
          Is executed to configure the root users shell before the initial command prompt.                  Is only read by
        login shells.
                              /root/.bashrc
          Is executed for interactive shells.                  only read by a shell thats both interactive and nonlogin
                              umask
         is set by order of precedence. If                umask
         is set in multiple locations, this order of precedence will determine the systems default                umask
        .             Order of precedence /root/.bashprofile /root/.bashrc The system default umask
    remediation: |
        Edit                    /root/.bash_profile
         and                    /root/.bashrc
         and remove, comment out, or update any line with                    umask
         to be                    0027
         or more restrictive.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.5.2.3":
    title: '4.5.2.3 | Ensure system accounts are secured - manual'
    section: 'Configure root and system accounts and environment'
    description: |
        There are a number of accounts provided with most distributions that are used to manage applications and are not
        intended to provide an interactive shell. Furthermore, a user may add special accounts that are not intended to provide
        an interactive shell.
    remediation: |
        System accounts
        Set the shell for any accounts returned by the audit to                    nologin
        :                 # usermod -s $(command -v nologin) <user>
         Disabled accounts Lock any non root accounts returned by the audit: # usermod -L <user>
         Large scale changes
        The following command will set all system accounts to                    nologin
        :                 # awk -F: '($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && ($3<'"$(awk '/^\s*UID_MIN/{print $2}'
        /etc/login.defs)"' || $3 == 65534)) { print $1 }' /etc/passwd | while read user; do usermod -s $(command -v nologin)
        $user >/dev/null; done

        The following command will automatically lock all accounts that have their shell set to                    nologin
        :                 # awk -F: '/nologin/ {print $1}' /etc/passwd | while read user; do usermod -L $user; done
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.5.2.4":
    title: '4.5.2.4 | Ensure root password is set'
    section: 'Configure root and system accounts and environment'
    description: |
        There are a number of methods to access the root account directly. Without a password set any user would be able to gain
        access and thus control over the entire system.
    remediation: |
        Set the                    root
         password with:                 # passwd root
         Impact: If there are any automated processes that relies on access to the root account without authentication, they
        will fail after remediation.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "4.5.3.1":
    title: '4.5.3.1 | Ensure nologin is not listed in etcshells'
    section: 'Configure user default environment'
    description: |
        /etc/shells
         is a text file which contains the full pathnames of valid login shells. This file is consulted by                chsh
         and available to be queried by other programs.             Be aware that there are programs which consult this file to
        find out if a user is a normal user for example, FTP daemons traditionally disallow access to users with shells not
        included in this file.
    remediation: |
        Edit                    /etc/shells
         and remove any lines that include                    nologin
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_4.5.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "4.5.3.2":
    title: '4.5.3.2 | Ensure default user shell timeout is configured - manual'
    section: 'Configure user default environment'
    description: |
        TMOUT
         is an environmental setting that determines the timeout of a shell in seconds.
        TMOUT                 n
          Sets the shell timeout to                  n
         seconds.  A setting of                  TMOUT0
         disables timeout.               readonly TMOUT Sets the TMOUT environmental variable as readonly, preventing unwanted
        modification during runtime. export TMOUT  exports the TMOUT variable System Wide Shell Configuration Files /etc/profile
          used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in
        the                  .bashprofile
        , however this file is used to set an initial PATH or PS1 for all shell users of the system.
        is only executed for interactive                    login
         shells, or shells executed with the login parameter.
                              /etc/profile.d
                           /etc/profile
         will execute the scripts within                  /etc/profile.d/.sh
        . It is recommended to place your configuration in a shell script within                  /etc/profile.d
         to set your own system wide environmental variables.               /etc/bashrc
          System wide version of                  .bashrc
        .  In Fedora derived distributions,                  /etc/bashrc
         also invokes /etc/profile.d/.sh if                  nonlogin
         shell, but redirects output to                  /dev/null
         if                  noninteractive.

        Is only executed for                    interactive
         shells or if                    BASHENV
         is set to                    /etc/bashrc
        .
    remediation: |
        Review                    /etc/bashrc
        ,                    /etc/profile
        , and all files ending in                    *.sh
         in the                    /etc/profile.d/
         directory and remove or edit all                    TMOUT=_n_
         entries to follow local site policy.                     TMOUT
         should not exceed 900 or be equal to                    0
        .
        Configure                    TMOUT
         in                    one
         of the following files:
        A file in the                      /etc/profile.d/
         directory ending in                      .sh
                                    /etc/profile /etc/bashrc TMOUT
         configuration examples:                   As multiple lines:
        TMOUT=900
        readonly TMOUT
        export TMOUT
                         As a single line: readonly TMOUT=900 ; export TMOUT
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.5.3.3":
    title: '4.5.3.3 | Ensure default user umask is configured - manual'
    section: 'Configure user default environment'
    description: |
        The user filecreation mode mask                umask
         is used to determine the file permission for newly created directories and files. In Linux, the default permissions for
        any newly created directory is 0777                rwxrwxrwx
        , and for any newly created file it is 0666                rwrwrw
        . The                umask
         modifies the default Linux permissions by restricting masking these permissions. The                umask
         is not simply subtracted, but is processed bitwise. Bits set in the                umask
         are cleared in the resulting file mode.             umask
         can be set with either                Octal
         or                Symbolic
         values             Octal
         Numeric Value  Represented by either three or four digits. ie                  umask 0027
         or                  umask 027
        .  If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting
        permissions for user, group, and world/other respectively.               Symbolic
         Value  Represented by a comma separated list for User                  u
        , group                  g
        , and world/other                  o
        .  The permissions listed are not masked by                  umask
        . ie a                  umask
         set by                  umask urwx,grx,o
         is the                  Symbolic
         equivalent of the                  Octal
                                 umask 027
        .  This                  umask
         would set a newly created directory with file mode                  drwxrx
         and a newly created file with file mode                  rwr
        .
        The default                umask
         can be set to use the                pamumask
         module or in a                System Wide Shell Configuration File
        . The user creating the directories or files has the discretion of changing the permissions via the chmod command, or
        choosing a different default                umask
         by adding the                umask
         command into a                User Shell Configuration File
        ,                 .bashprofile
         or                .bashrc
        , in their home directory.             Setting the default umask
        pamumask module

        will set the umask according to the system default in                      /etc/login.defs
         and user settings, solving the problem of different                      umask
         settings with different shells, display managers, remote sessions etc.                   umaskmask
         value in the                      /etc/login.defs
         file is interpreted as Octal
        Setting                      USERGROUPSENAB
         to yes in                      /etc/login.defs
         default

        will enable setting of the                          umask
         group bits to be the same as owner bits. examples 022  002, 077  007 for nonroot users, if the
        uid
         is the same as                          gid
        , and                          username
         is the same as the                          primary group name
                                          userdel will remove the users group if it contains no more members, and useradd will
        create by default a group with the name of the user

                              System Wide Shell Configuration File

                         /etc/profile
          used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in
        the                      .bashprofile
        , however this file is used to set an initial PATH or PS1 for all shell users of the system.
        is only executed for interactive                        login
         shells, or shells executed with the login parameter.
                                    /etc/profile.d
                               /etc/profile
         will execute the scripts within                      /etc/profile.d/.sh
        . It is recommended to place your configuration in a shell script within                      /etc/profile.d
         to set your own system wide environmental variables.                   /etc/bashrc
          System wide version of                      .bashrc
        .  In Fedora derived distributions,                      etc/bashrc
         also invokes /etc/profile.d/.sh if                      nonlogin
         shell, but redirects output to                      /dev/null
         if                      noninteractive.

        Is only executed for                        interactive
         shells or if                        BASHENV
         is set to                        /etc/bashrc
        .

                              User Shell Configuration Files /.bashprofile
          Is executed to configure your shell before the initial command prompt.                  Is only read by login shells.
                              /.bashrc
          Is executed for interactive shells.                  only read by a shell thats both interactive and nonlogin
                              umask
         is set by order of precedence. If                umask
         is set in multiple locations, this order of precedence will determine the systems default                umask
        .             Order of precedence
        A file in                  /etc/profile.d/
         ending in                  .sh
          This will override any other systemwide                  umask
         setting
        In the file                  /etc/profile

        On the                  pamumask.so
         module in                  /etc/pam.d/postlogin

        In the file                  /etc/login.defs

        In the file                  /etc/default/login
    remediation: |
        Run the following script and perform the instructions in the output:
        #!/usr/bin/env bash

        {
           l_output="" l_output2="" l_out=""
           file_umask_chk()
           {
              if grep -Psiq -- '^\h*umask\h+(0?[0-7][2-7]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\h*#.*)?$' "$l_file"; then
                 l_out="$l_out\n - umask is set correctly in \"$l_file\""
              elif grep -Psiq --
        '^\h*umask\h+(([0-7][0-7][01][0-7]\b|[0-7][0-7][0-7][0-6]\b)|([0-7][01][0-7]\b|[0-7][0-7][0-6]\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\b)))'
        "$l_file"; then
                 l_output2="$l_output2\n   - \"$l_file\""
              fi
           }
           while IFS= read -r -d $'\0' l_file; do
              file_umask_chk
           done < <(find /etc/profile.d/ -type f -name '*.sh' -print0)
           [ -n "$l_out" ] && l_output="$l_out"
           l_file="/etc/profile" && file_umask_chk
           l_file="/etc/bashrc" && file_umask_chk
           l_file="/etc/bash.bashrc" && file_umask_chk
           l_file="/etc/pam.d/postlogin"
           if grep -Psiq
        '^\h*session\h+[^#\n\r]+\h+pam_umask\.so\h+([^#\n\r]+\h+)?umask=(([0-7][0-7][01][0-7]\b|[0-7][0-7][0-7][0-6]\b)|([0-7][01][0-7]\b))'
        "$l_file"; then
              l_output2="$l_output2\n   - \"$l_file\""
           fi
           l_file="/etc/login.defs" && file_umask_chk
           l_file="/etc/default/login" && file_umask_chk
           if [ -z "$l_output2" ]; then
              echo -e " - No files contain a UMASK that is not restrictive enough\n   No UMASK updates required to existing
        files"
           else
              echo -e "\n - UMASK is not restrictive enough in the following file(s):$l_output2\n\n- Remediation Procedure:\n -
        Update these files and comment out the UMASK line\n   or update umask to be \"0027\" or more restrictive"
           fi
           if [ -n "$l_output" ]; then
              echo -e "$l_output"
           else
              echo -e " - Configure UMASK in a file in the \"/etc/profile.d/\" directory ending in \".sh\"\n\n   Example Command
        (Hash to represent being run at a root prompt):\n\n# printf '%s\\\n' \"umask 027\" >
        /etc/profile.d/50-systemwide_umask.sh\n"
           fi
        }
                         Note: This method only applies to bash and shell. If other shells are supported on the system, it is
        recommended that their configuration files also are checked
        If the                      pam_umask.so
         module is going to be used to set                      umask
        , ensure that it's not being overridden by another setting. Refer to the PAM_UMASK(8) man page for more information
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.5.3.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.1.1":
    title: '5.1.1.1 | Ensure rsyslog is installed'
    section: 'Configure rsyslog'
    description: |
        The                rsyslog
         software is recommended in environments where                journald
         does not meet operation requirements.
    remediation: |
        Run the following command to install                    rsyslog
        :                 # dnf install rsyslog
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.1.2":
    title: '5.1.1.2 | Ensure rsyslog service is enabled'
    section: 'Configure rsyslog'
    description: |
        Once the                rsyslog
          package is installed, ensure that the service is enabled.
    remediation: |
        Run the following command to enable                    rsyslog
        :                 # systemctl --now enable rsyslog
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'

  "5.1.1.3":
    title: '5.1.1.3 | Ensure journald is configured to send logs to rsyslog'
    section: 'Configure rsyslog'
    description: |
        Data from                systemdjournald
         may be stored in volatile memory or persisted locally on the server.  Utilities exist to accept remote export of
        systemdjournald
         logs, however, use of the                rsyslog
         service provides a consistent means of log collection and export.
    remediation: |
        Create or edit the file                    /etc/systemd/journald.conf
        , or a file in the                    /etc/systemd/journald.conf.d/
         directory ending in                    .conf
         and add or edit the line                    ForwardToSyslog=yes
        :                 Example: # printf '%s\n' "ForwardToSyslog=yes" > /etc/systemd/journald.conf.d/50-journald_forward.conf

        Restart the                    systemd-journald
         service:                 # systemctl restart systemd-journald.service
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ForwardToSyslog=yes:/etc/systemd/journald.conf'
            - name: Undefined
              rule: 'should cmp == loaded'
            - name: Undefined
              rule: 'should cmp == active'
            - name: Undefined
              rule: 'should cmp == loaded'
            - name: Undefined
              rule: 'should cmp == active'

  "5.1.1.4":
    title: '5.1.1.4 | Ensure rsyslog default file permissions are configured'
    section: 'Configure rsyslog'
    description: |
        RSyslog will create logfiles that do not already exist on the system. This setting controls what permissions will be
        applied to these newly created files.
    remediation: |
        Edit either                    /etc/rsyslog.conf
         or a dedicated                    .conf
         file in                    /etc/rsyslog.d/
         and set                    $FileCreateMode
         to                    0640
         or more restrictive:                 $FileCreateMode 0640
         Restart the service: # systemctl restart rsyslog
         Impact:
        The systems global                      umask
         could override, but only making the file permissions stricter, what is configured in RSyslog with the
        FileCreateMode
         directive. RSyslog  also has its own                      $umask
         directive that can alter the intended file creation mode. In addition, consideration should be given to how
        FileCreateMode
         is used.
        Thus it is critical to ensure that the intended file creation mode is not overridden with less restrictive settings in
        /etc/rsyslog.conf
        ,                      /etc/rsyslog.d/*conf
         files and that                      FileCreateMode
         is set before any file is created.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.1.5":
    title: '5.1.1.5 | Ensure logging is configured - manual'
    section: 'Configure rsyslog'
    description: |
        The                /etc/rsyslog.conf
         and                /etc/rsyslog.d/.conf
         files specifies rules for logging and which files are to be used to log certain classes of messages.
    remediation: |
        Edit the following lines in the                    /etc/rsyslog.conf
         and                    /etc/rsyslog.d/*.conf
         files as appropriate for your environment.                 Note:
         The below configuration is shown for example purposes only. Due care should be given to how the organization wish to
        store log data.
        *.emerg                                  :omusrmsg:*
        auth,authpriv.*                          /var/log/secure
        mail.*                                  -/var/log/mail
        mail.info                               -/var/log/mail.info
        mail.warning                            -/var/log/mail.warn
        mail.err                                 /var/log/mail.err
        cron.*                                   /var/log/cron
        *.=warning;*.=err                       -/var/log/warn
        *.crit                                   /var/log/warn
        *.*;mail.none;news.none                 -/var/log/messages
        local0,local1.*                         -/var/log/localmessages
        local2,local3.*                         -/var/log/localmessages
        local4,local5.*                         -/var/log/localmessages
        local6,local7.*                         -/var/log/localmessages

        Run the following command to reload the                    rsyslogd
         configuration:                 # systemctl restart rsyslog
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.5', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.1.6":
    title: '5.1.1.6 | Ensure rsyslog is configured to send logs to a remote log host'
    section: 'Configure rsyslog'
    description: |
        RSyslog supports the ability to send log events it gathers to a remote log host or to receive messages from remote
        hosts, thus enabling centralized log management.
    remediation: |
        Edit the                    /etc/rsyslog.conf
         and                    /etc/rsyslog.d/*.conf
         files and add the following line (where                    loghost.example.com
         is the name of your central log host). The                    target
         directive may either be a fully qualified domain name or an IP address.
        *.* action(type="omfwd" target="192.168.2.100" port="514" protocol="tcp"
                   action.resumeRetryCount="100"
                   queue.type="LinkedList" queue.size="1000")

        Run the following command to reload the                    rsyslogd
         configuration:                 # systemctl restart rsyslog
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.1.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.1.7":
    title: '5.1.1.7 | Ensure rsyslog is not configured to receive logs from a remote client'
    section: 'Configure rsyslog'
    description: |
        RSyslog supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not
        receive data from other hosts.
    remediation: |
        Should there be any active log server configuration found in the auditing section, modify those files and remove the
        specific lines highlighted by the audit. Ensure none of the following entries are present in any of
        /etc/rsyslog.conf
         or                    /etc/rsyslog.d/*.conf
        .                 New format
        module(load="imtcp")
        input(type="imtcp" port="514")

        -                   OR
        -                 Old format
        $ModLoad imtcp
        $InputTCPServerRun
                         Restart the service: # systemctl restart rsyslog
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.1.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.1.1":
    title: '5.1.2.1.1 | Ensure systemd-journal-remote is installed'
    section: 'Ensure journald is configured to send logs to a remote log host'
    description: |
        Journald via                  systemdjournalremote
         supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus
        enabling centralized log management.
    remediation: |
        Run the following command to install                      systemd-journal-remote
        :                   # dnf install systemd-journal-remote
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.1.2":
    title: '5.1.2.1.2 | Ensure systemd-journal-remote is configured - manual'
    section: 'Ensure journald is configured to send logs to a remote log host'
    description: |
        Journald via                  systemdjournalremote
         supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus
        enabling centralized log management.
    remediation: |
        Edit the                      /etc/systemd/journal-upload.conf
         file and ensure the following lines are set per your environment:
        URL=192.168.50.42
        ServerKeyFile=/etc/ssl/private/journal-upload.pem
        ServerCertificateFile=/etc/ssl/certs/journal-upload.pem
        TrustedCertificateFile=/etc/ssl/ca/trusted.pem
                           Restart the service: # systemctl restart systemd-journal-upload
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.2.1.3":
    title: '5.1.2.1.3 | Ensure systemd-journal-remote is enabled'
    section: 'Ensure journald is configured to send logs to a remote log host'
    description: |
        Journald via                  systemdjournalremote
         supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus
        enabling centralized log management.
    remediation: |
        Run the following command to enable                      systemd-journal-remote
        :                   # systemctl --now enable systemd-journal-upload.service
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'

  "5.1.2.1.4":
    title: '5.1.2.1.4 | Ensure journald is not configured to receive logs from a remote client'
    section: 'Ensure journald is configured to send logs to a remote log host'
    description: |
        Journald supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not
        receive data from other hosts. NOTE
        The same package,                    systemdjournalremote
        , is used for both sending logs to remote hosts and receiving incoming logs.
        With regards to receiving logs, there are two services                    systemdjournalremote.socket
         and                    systemdjournalremote.service
        .
    remediation: |
        Run the following command to disable                      systemd-journal-remote.socket
        :                   # systemctl --now mask systemd-journal-remote.socket
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.2.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "5.1.2.2":
    title: '5.1.2.2 | Ensure journald service is enabled'
    section: 'Configure journald'
    description: |
        Ensure that the                systemdjournald
         service is enabled to allow capturing of logging events.
    remediation: |
        By default the                    systemd-journald
         service does not have an                    [Install]
         section and thus cannot be enabled / disabled. It is meant to be referenced as                    Requires
         or                    Wants
         by other unit files. As such, if the status of                    systemd-journald
         is not                    static
        , investigate why.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == static'

  "5.1.2.3":
    title: '5.1.2.3 | Ensure journald is configured to compress large log files'
    section: 'Configure journald'
    description: |
        The journald system includes the capability of compressing overly large files to avoid filling up the system with logs
        or making the logs unmanageably large.
    remediation: |
        Edit the                    /etc/systemd/journald.conf
         file and add the following line:                 Compress=yes
         Restart the service: # systemctl restart systemd-journald.service
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.4":
    title: '5.1.2.4 | Ensure journald is configured to write logfiles to persistent disk'
    section: 'Configure journald'
    description: |
        Data from journald may be stored in volatile memory or persisted locally on the server.  Logs in memory will be lost
        upon a system reboot.  By persisting logs to local disk on the server they are protected from loss due to a reboot.
    remediation: |
        Edit the                    /etc/systemd/journald.conf
         file and add the following line:                 Storage=persistent
         Restart the service: # systemctl restart systemd-journald.service
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.5":
    title: '5.1.2.5 | Ensure journald is not configured to send logs to rsyslog'
    section: 'Configure journald'
    description: |
        Data from                journald
         should be kept in the confines of the service and not forwarded on to other services.
    remediation: |
        Edit the                    /etc/systemd/journald.conf
         file and ensure that                    ForwardToSyslog=yes
         is removed.                 Restart the service: # systemctl restart systemd-journald.service
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.1.2.6":
    title: '5.1.2.6 | Ensure journald log rotation is configured per site policy - manual'
    section: 'Configure journald'
    description: |
        Journald includes the capability of rotating log files regularly to avoid filling up the system with logs or making the
        logs unmanageably large. The file                /etc/systemd/journald.conf
         is the configuration file used to specify how logs generated by Journald should be rotated.
    remediation: |
        Review                    /etc/systemd/journald.conf
         and verify logs are rotated according to site policy. The settings should be carefully understood as there are specific
        edge cases and prioritization of parameters.                 The specific parameters for log rotation are:
        SystemMaxUse=
        SystemKeepFree=
        RuntimeMaxUse=
        RuntimeKeepFree=
        MaxFileSec=
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.2.6', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.3":
    title: '5.1.3 | Ensure logrotate is configured - manual'
    section: 'Configure Logging'
    description: |
        The system includes the capability of rotating log files regularly to avoid filling up the system with logs or making
        the logs unmanageably large. The file              /etc/logrotate.d/syslog
         is the configuration file used to rotate log files created by              syslog
         or              rsyslog
        .
    remediation: |
        Edit                  /etc/logrotate.conf
         and                  /etc/logrotate.d/*
         to ensure logs are rotated according to site policy.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_5.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.1.4":
    title: '5.1.4 | Ensure all logfiles have appropriate access configured - manual'
    section: 'Configure Logging'
    description: |
        Log files stored in              /var/log/
         contain logged information from many services on the system and potentially from other logged hosts as well.
    remediation: |
        Run the following script to update permissions and ownership on files in                  /var/log
        .               Although the script is not destructive, ensure that the output is captured in the event that the
        remediation causes issues.
        #!/usr/bin/env bash

        {
           l_op2="" l_output2=""
           l_uidmin="$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"
           file_test_fix()
           {
              l_op2=""
              l_fuser="root"
              l_fgroup="root"
              if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then
                 l_op2="$l_op2\n  - Mode: \"$l_mode\" should be \"$maxperm\" or more restrictive\n   - Removing excess
        permissions"
                 chmod "$l_rperms" "$l_fname"
              fi
              if [[ ! "$l_user" =~ $l_auser ]]; then
                 l_op2="$l_op2\n  - Owned by: \"$l_user\" and should be owned by \"${l_auser//|/ or }\"\n   - Changing ownership
        to: \"$l_fuser\""
                 chown "$l_fuser" "$l_fname"
              fi
              if [[ ! "$l_group" =~ $l_agroup ]]; then
                 l_op2="$l_op2\n  - Group owned by: \"$l_group\" and should be group owned by \"${l_agroup//|/ or }\"\n   -
        Changing group ownership to: \"$l_fgroup\""
                 chgrp "$l_fgroup" "$l_fname"
              fi
              [ -n "$l_op2" ] && l_output2="$l_output2\n - File: \"$l_fname\" is:$l_op2\n"
           }
           unset a_file && a_file=() # clear and initialize array
           # Loop to create array with stat of files that could possibly fail one of the audits
           while IFS= read -r -d $'\0' l_file; do
              [ -e "$l_file" ] && a_file+=("$(stat -Lc '%n^%#a^%U^%u^%G^%g' "$l_file")")
           done < <(find -L /var/log -type f \( -perm /0137 -o ! -user root -o ! -group root \) -print0)
           while IFS="^" read -r l_fname l_mode l_user l_uid l_group l_gid; do
              l_bname="$(basename "$l_fname")"
              case "$l_bname" in
                 lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp-* | README)
                    perm_mask='0113'
                    maxperm="$( printf '%o' $(( 0777 & ~$perm_mask)) )"
                    l_rperms="ug-x,o-wx"
                    l_auser="root"
                    l_agroup="(root|utmp)"
                    file_test_fix
                    ;;
                 secure | auth.log | syslog | messages)
                    perm_mask='0137'
                    maxperm="$( printf '%o' $(( 0777 & ~$perm_mask)) )"
                    l_rperms="u-x,g-wx,o-rwx"
                    l_auser="(root|syslog)"
                    l_agroup="(root|adm)"
                    file_test_fix
                    ;;
                 SSSD | sssd)
                    perm_mask='0117'
                    maxperm="$( printf '%o' $(( 0777 & ~$perm_mask)) )"
                    l_rperms="ug-x,o-rwx"
                    l_auser="(root|SSSD)"
                    l_agroup="(root|SSSD)"
                    file_test_fix
                    ;;
                 gdm | gdm3)
                    perm_mask='0117'
                    l_rperms="ug-x,o-rwx"
                    maxperm="$( printf '%o' $(( 0777 & ~$perm_mask)) )"
                    l_auser="root"
                    l_agroup="(root|gdm|gdm3)"
                    file_test_fix
                    ;;
                 *.journal | *.journal~)
                    perm_mask='0137'
                    maxperm="$( printf '%o' $(( 0777 & ~$perm_mask)) )"
                    l_rperms="u-x,g-wx,o-rwx"
                    l_auser="root"
                    l_agroup="(root|systemd-journal)"
                    file_test_fix
                    ;;
                 *)
                    perm_mask='0137'
                    maxperm="$( printf '%o' $(( 0777 & ~$perm_mask)) )"
                    l_rperms="u-x,g-wx,o-rwx"
                    l_auser="(root|syslog)"
                    l_agroup="(root|adm)"
                    if [ "$l_uid" -lt "$l_uidmin" ] && [ -z "$(awk -v grp="$l_group" -F: '$1==grp {print $4}' /etc/group)" ];
        then
                       if [[ ! "$l_user" =~ $l_auser ]]; then
                          l_auser="(root|syslog|$l_user)"
                       fi
                       if [[ ! "$l_group" =~ $l_agroup ]]; then
                          l_tst=""
                          while l_out3="" read -r l_duid; do
                             [ "$l_duid" -ge "$l_uidmin" ] && l_tst=failed
                          done <<< "$(awk -F: '$4=='"$l_gid"' {print $3}' /etc/passwd)"
                          [ "$l_tst" != "failed" ] && l_agroup="(root|adm|$l_group)"
                       fi
                    fi
                    file_test_fix
                    ;;
              esac
           done <<< "$(printf '%s\n' "${a_file[@]}")"
           unset a_file # Clear array
           # If all files passed, then we report no changes
           if [ -z "$l_output2" ]; then
              echo -e "- All files in \"/var/log/\" have appropriate permissions and ownership\n  - No changes required\n"
           else
              # print report of changes
              echo -e "\n$l_output2"
           fi
        }
                       Note:
         You may also need to change the configuration for your logging software or services for any logs that had incorrect
        permissions.               If there are services that log to other locations, ensure that those log files have the
        appropriate access configured.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.1.1":
    title: '5.2.1.1 | Ensure audit is installed'
    section: 'Ensure auditing is enabled'
    description: |
        auditd
         is the userspace component to the Linux Auditing System. Its responsible for writing audit records to the disk.
    remediation: |
        Run the following command to install                    audit
        :                 # dnf install audit
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.1.2":
    title: '5.2.1.2 | Ensure auditing for processes that start prior to auditd is enabled - manual'
    section: 'Ensure auditing is enabled'
    description: |
        Configure                grub2
         so that processes that are capable of being audited can be audited even if they start up prior to                auditd
         startup.
    remediation: |
        Run the following command to update the                    grub2
         configuration with                    audit=1
        :                 # grubby --update-kernel ALL --args 'audit=1'
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == audit=1'

  "5.2.1.3":
    title: '5.2.1.3 | Ensure audit backlog limit is sufficient - manual'
    section: 'Ensure auditing is enabled'
    description: |
        The backlog limit has a default setting of 64
    remediation: |
        Run the following command to add                    audit_backlog_limit=<BACKLOG SIZE>
         to GRUB_CMDLINE_LINUX:                 # grubby --update-kernel ALL --args 'audit_backlog_limit=<BACKLOG SIZE>'
         Example: # grubby --update-kernel ALL --args 'audit_backlog_limit=8192'
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == audit_backlog_limit=\d+'

  "5.2.1.4":
    title: '5.2.1.4 | Ensure auditd service is enabled'
    section: 'Ensure auditing is enabled'
    description: |
        Turn on the                auditd
         daemon to record system events.
    remediation: |
        Run the following command to enable                    auditd
        :                 # systemctl --now enable auditd
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'

  "5.2.2.1":
    title: '5.2.2.1 | Ensure audit log storage size is configured'
    section: 'Configure Data Retention'
    description: |
        Configure the maximum size of the audit log file. Once the log reaches the maximum size, it will be rotated and a new
        log file will be started.
    remediation: |
        Set the following parameter in                    /etc/audit/auditd.conf
          in accordance with site policy:                 max_log_file = <MB>
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.2.2":
    title: '5.2.2.2 | Ensure audit logs are not automatically deleted'
    section: 'Configure Data Retention'
    description: |
        The                maxlogfileaction
          setting determines how to handle the audit log file reaching the max file size. A value of                keeplogs
          will rotate the logs but never delete old logs.
    remediation: |
        Set the following parameter in                    /etc/audit/auditd.conf:
                                 max_log_file_action = keep_logs
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.2.3":
    title: '5.2.2.3 | Ensure system is disabled when audit logs are full'
    section: 'Configure Data Retention'
    description: |
        The                auditd
         daemon can be configured to halt the system or put the system in single user mode, if no free space is available or an
        error is detected on the partition that holds the audit log files.
        The                diskfullaction
         parameter tells the system what action to take when no free space is available on the partition that holds the audit
        log files. Valid values are                ignore
        ,                syslog
        ,                rotate
        ,                exec
        ,                suspend
        ,                single
        , and                halt
        .             ignore
        , the audit daemon will issue a syslog message but no other action is taken               syslog
        , the audit daemon will issue a warning to syslog               rotate
        , the audit daemon will rotate logs, losing the oldest to free up space               exec
        ,   /pathtoscript will execute the script. You cannot pass parameters to the script. The script is also responsible for
        telling the auditd daemon to resume logging once its completed its action               suspend
        , the audit daemon will stop writing records to the disk               single
        , the audit daemon will put the computer system in single user mode               halt
        , the audit daemon will shut down the system
        The                diskerroraction
         parameter tells the system what action to take when an error is detected on the partition that holds the audit log
        files. Valid values are                ignore
        ,                syslog
        ,                exec
        ,                suspend
        ,                single
        , and                halt
        .             ignore
        , the audit daemon will not take any action               syslog
        , the audit daemon will issue no more than 5 consecutive warnings to syslog               exec
        ,   /pathtoscript will execute the script. You cannot pass parameters to the script               suspend
        , the audit daemon will stop writing records to the disk               single
        , the audit daemon will put the computer system in single user mode               halt
        , the audit daemon will shut down the system
    remediation: |
        Set one of the following parameters in                    /etc/audit/auditd.conf
         depending on your local security policies.
        disk_full_action = <halt|single>
        disk_error_action = <syslog|single|halt>
                         Example:
        disk_full_action = halt
        disk_error_action = halt
                         Impact: -IF-
        The                        disk_full_action
         parameter is set to                        halt
         the                        auditd
         daemon will shutdown the system when the disk partition containing the audit logs becomes full.
        The                        disk_full_action
         parameter is set to                        single
         the                        auditd
         daemon will put the computer system in single user mode when the disk partition containing the audit logs becomes full.
        -IF-
        The                        disk_error_action
         parameter is set to                        halt
         the                        auditd
         daemon will shutdown the system when an error is detected on the partition that holds the audit log files.
        The                        disk_error_action
         parameter is set to                        single
         the                        auditd
         daemon will put the computer system in single user mode when an error is detected on the partition that holds the audit
        log files.
        The                        disk_error_action
         parameter is set to                        syslog
         the                        auditd
         daemon will issue no more than 5 consecutive warnings to syslog when an error is detected on the partition that holds
        the audit log files.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.2.4":
    title: '5.2.2.4 | Ensure system warns when audit logs are low on space'
    section: 'Configure Data Retention'
    description: |
        The                auditd
         daemon can be configured to halt the system, put the system in single user mode or send a warning message, if the
        partition that holds the audit log files is low on space.
        The                spaceleftaction
         parameter tells the system what action to take when the system has detected that it is starting to get low on disk
        space. Valid values are                ignore
        ,                syslog
        ,                rotate
        ,                email
        ,                exec
        ,                suspend
        ,                single
        , and                halt
        .             ignore
        , the audit daemon does nothing               syslog
        , the audit daemon will issue a warning to syslog               rotate
        , the audit daemon will rotate logs, losing the oldest to free up space               email
        , the audit daemon will send a warning to the email account specified in                  actionmailacct
         as well as sending the message to syslog               exec
        ,   /pathtoscript will execute the script. You cannot pass parameters to the script. The script is also responsible for
        telling the auditd daemon to resume logging once its completed its action               suspend
        , the audit daemon will stop writing records to the disk               single
        , the audit daemon will put the computer system in single user mode               halt
        , the audit daemon will shut down the system
        The                adminspaceleftaction
         parameter tells the system what action to take when the system has detected that it is  low on disk space. Valid values
        are                ignore
        ,                syslog
        ,                rotate
        ,                email
        ,                exec
        ,                suspend
        ,                single
        , and                halt
        .             ignore
        , the audit daemon does nothing               syslog
        , the audit daemon will issue a warning to syslog               rotate
        , the audit daemon will rotate logs, losing the oldest to free up space               email
        , the audit daemon will send a warning to the email account specified in                  actionmailacct
         as well as sending the message to syslog               exec
        ,   /pathtoscript will execute the script. You cannot pass parameters to the script. The script is also responsible for
        telling the auditd daemon to resume logging once its completed its action               suspend
        , the audit daemon will stop writing records to the disk               single
        , the audit daemon will put the computer system in single user mode               halt
        , the audit daemon will shut down the system
    remediation: |
        Set the                    space_left_action
         parameter in                    /etc/audit/auditd.conf
         to                    email
        ,                    exec
        ,                    single
        , or                    halt
        :                 Example: space_left_action = email

        Set the                    admin_space_left_action
         parameter in                    /etc/audit/auditd.conf
         to                    single
         or                    halt
        :                 Example: admin_space_left_action = single
         Note:
         A Mail Transfer Agent (MTA) must be installed and configured properly to set                    space_left_action =
        email
                                 Impact:
        If the                      admin_space_left_action
         is set to                      single
         the audit daemon will put the computer system in single user mode.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.3.1":
    title: '5.2.3.1 | Ensure changes to system administration scope sudoers is collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor scope changes for system administrators. If the system has been properly configured to force system
        administrators to log in as themselves first and then use the                sudo
         command to execute privileged commands, it is possible to monitor changes in scope. The file
        /etc/sudoers
        , or files in                /etc/sudoers.d
        , will be written to when the files or related attributes have changed. The audit records will be tagged with the
        identifier scope.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor scope changes for system administrators.                 Example:
        # printf "
        -w /etc/sudoers -p wa -k scope
        -w /etc/sudoers.d -p wa -k scope
        " >> /etc/audit/rules.d/50-scope.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/sudoers\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/sudoers.d\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.2":
    title: '5.2.3.2 | Ensure actions as another user are always logged - manual'
    section: 'Configure auditd rules'
    description: |
        sudo
         provides users with temporary elevated privileges to perform operations, either as the superuser or another user.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor elevated privileges.                 64 Bit systems Example:
        # printf "
        -a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k user_emulation
        -a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k user_emulation
        " >> /etc/audit/rules.d/50-user_emulation.rules
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:always,exit|exit,always)\h+-F\h*arch=b32\h*(?!(?:\2\3))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?!(?:\1\3))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?!(?:\1\2))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:always,exit|exit,always)\h+-F\h*arch=b64\h*(?!(?:\2\3))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?!(?:\1\3))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?!(?:\1\2))((?:-C\h+(?:euid!=uid|uid!=euid)\h*)|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*)|-S\h+execve\h*)(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.3":
    title: '5.2.3.3 | Ensure events that modify the sudo log file are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor the                sudo
         log file. If the system has been properly configured to disable the use of the                su
         command and force all administrators to have to log in first and then use                sudo
         to execute privileged commands, then all administrator commands will be logged to                /var/log/sudo.log
         . Any time a command is executed, an audit event will be triggered as the                /var/log/sudo.log
         file will be opened for write and the executed administration command will be written to the log.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify the sudo log file.                 Example:
        # {
        SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? .*//' -e 's/"//g')
        [ -n "${SUDO_LOG_FILE}" ] && printf "
        -w ${SUDO_LOG_FILE} -p wa -k sudo_log_file
        " >> /etc/audit/rules.d/50-sudo.rules || printf "ERROR: Variable 'SUDO_LOG_FILE_ESCAPED' is unset.\n"
        }
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.3.4":
    title: '5.2.3.4 | Ensure events that modify date and time information are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Capture events where the system date and/or time has been modified. The parameters in this section are set to determine
        if the adjtimex
          tune kernel clock               settimeofday
          set time using                  timeval
         and                  timezone
         structures               stime
          using seconds since 1/1/1970               clocksettime
          allows for the setting of several internal clocks and timers               system calls have been executed. Further,
        ensure to write an audit record to the configured audit log file upon exit, tagging the records with a unique identifier
        such as timechange.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify date and time information.                 64 Bit
        systems Example:
        # printf "
        -a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -k time-change
        -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change
        " >> /etc/audit/rules.d/50-time-change.rules
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        . In addition, add                    stime
         to the system call audit. Example:                 -a always,exit -F arch=b32 -S
        adjtimex,settimeofday,clock_settime,stime -k time-change
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/localtime\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -F key=time-change'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -F key=time-change'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime,stime -k time-change'

  "5.2.3.5":
    title: '5.2.3.5 | Ensure events that modify the systems network environment are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Record changes to network environment files or system calls. The below parameters monitors the following system calls,
        and write an audit event on system call exit sethostname
          set the systems host name               setdomainname
          set the systems domain name               The files being monitored are /etc/issue
         and                  /etc/issue.net
          messages displayed prelogin               /etc/hosts
          file containing host names and associated IP addresses               /etc/sysconfig/network
          additional information that is valid to all network interfaces               /etc/sysconfig/networkscripts/
          directory containing network interface scripts and configurations files
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify the system's network environment.                 64
        Bit systems Example:
        # printf "
        -a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale
        -a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale
        -w /etc/issue -p wa -k system-locale
        -w /etc/issue.net -p wa -k system-locale
        -w /etc/hosts -p wa -k system-locale
        -w /etc/sysconfig/network -p wa -k system-locale
        -w /etc/sysconfig/network-scripts/ -p wa -k system-locale
        " >> /etc/audit/rules.d/50-system_local.rules
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.5', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/issue\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/issue\.net\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/hosts\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/sysconfig\/network\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/sysconfig\/network-scripts\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale'

  "5.2.3.6":
    title: '5.2.3.6 | Ensure use of privileged commands are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor privileged programs, those that have the                setuid
         and/or                setgid
         bit set on execution, to determine if unprivileged users are running these commands.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor the use of privileged commands.                 Example:
        # {
          UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
          AUDIT_RULE_FILE="/etc/audit/rules.d/50-privileged.rules"
          NEW_DATA=()
          for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv
        "noexec|nosuid" | awk '{print $1}'); do
            readarray -t DATA < <(find "${PARTITION}" -xdev -perm /6000 -type f | awk -v UID_MIN=${UID_MIN} '{print "-a
        always,exit -F path=" $1 " -F perm=x -F auid>="UID_MIN" -F auid!=unset -k privileged" }')
              for ENTRY in "${DATA[@]}"; do
                NEW_DATA+=("${ENTRY}")
              done
          done
          readarray &> /dev/null -t OLD_DATA < "${AUDIT_RULE_FILE}"
          COMBINED_DATA=( "${OLD_DATA[@]}" "${NEW_DATA[@]}" )
          printf '%s\n' "${COMBINED_DATA[@]}" | sort -u > "${AUDIT_RULE_FILE}"
        }
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         Special mount points
        If there are any special mount points that are not visible by default from just scanning                    /
        , change the                    PARTITION
         variable to the appropriate partition and re-run the remediation.                 Impact:
        Both the audit and remediation section of this recommendation will traverse all mounted file systems that is not mounted
        with either                      noexec
         or                      nosuid
         mount options. If there are large file systems without these mount options,                      such traversal will be
        significantly detrimental to the performance of the system.
                                    Before running either the audit or remediation section, inspect the output of the following
        command to determine exactly which file systems will be traversed: # findmnt -n -l -k -it $(awk '/nodev/ { print $2 }'
        /proc/filesystems | paste -sd,) | grep -Pv "noexec|nosuid"

        To exclude a particular file system due to adverse performance impacts, update the audit and remediation sections by
        adding a sufficiently unique string to the                      grep
         statement. The above command can be used to test the modified exclusions.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.6', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.3.7":
    title: '5.2.3.7 | Ensure unsuccessful file access attempts are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor for unsuccessful attempts to access files. The following parameters are associated with system calls that
        control files
        creation                   creat

        opening                   open
         ,                  openat

        truncation                   truncate
         ,                  ftruncate
                              An audit log record will only be written if all of the following criteria is met for the user when
        trying to access a file a nonprivileged user auidUIDMIN is not a Daemon event auid4294967295/unset/1 if the system call
        returned EACCES permission denied or EPERM some other permanent error associated with the specific system call
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor unsuccessful file access attempts.                 64 Bit systems
        Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=${UID_MIN} -F auid!=unset -k
        access
        -a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=${UID_MIN} -F auid!=unset -k
        access
        -a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=${UID_MIN} -F auid!=unset -k
        access
        -a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=${UID_MIN} -F auid!=unset -k
        access
        " >> /etc/audit/rules.d/50-access.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.7', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?open((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?truncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?ftruncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?creat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?openat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?open((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?truncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?ftruncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?creat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b32\h+-S\h+([^#\n\r]+,)?openat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?open((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?truncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?ftruncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?creat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?openat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EACCES|-EACCES=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?open((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?truncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?ftruncate((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?creat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+-F\h+arch=b64\h+-S\h+([^#\n\r]+,)?openat((,\H+)+|(\h+-S\h+\H+)+)?\h+-F\h+(exit=-EPERM|-EPERM=exit)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.8":
    title: '5.2.3.8 | Ensure events that modify usergroup information are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Record events affecting the modification of user or group information, including that of passwords and old passwords if
        in use. /etc/group
          system groups               /etc/passwd
          system users               /etc/gshadow
          encrypted password for each group               /etc/shadow
          system user passwords               /etc/security/opasswd
          storage of old passwords if the relevant PAM module is in use               The parameters in this section will watch
        the files to see if they have been opened for write or have had attribute changes e.g. permissions and tag them with the
        identifier identity in the audit log file.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify user/group information.                 Example:
        # printf "
        -w /etc/group -p wa -k identity
        -w /etc/passwd -p wa -k identity
        -w /etc/gshadow -p wa -k identity
        -w /etc/shadow -p wa -k identity
        -w /etc/security/opasswd -p wa -k identity
        " >> /etc/audit/rules.d/50-identity.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.8', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/group\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/passwd\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/gshadow\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/shadow\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/security\/opasswd\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.9":
    title: '5.2.3.9 | Ensure discretionary access control permission modification events are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for
        system calls that affect file permissions and attributes. The following commands and system calls effect the
        permissions, ownership and various attributes of files. chmod fchmod fchmodat chown fchown fchownat lchown setxattr
        lsetxattr fsetxattr removexattr lremovexattr fremovexattr In all cases, an audit record will only be written for
        nonsystem user ids and will ignore Daemon events. All audit records will be tagged with the identifier permmod.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor discretionary access control permission modification events.
        64 Bit systems Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod
        -a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod
        -a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod
        -a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod
        -a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F
        auid!=unset -F key=perm_mod
        -a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F
        auid!=unset -F key=perm_mod
        " >> /etc/audit/rules.d/50-perm_mod.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.9', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod'

  "5.2.3.10":
    title: '5.2.3.10 | Ensure successful file system mounts are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor the use of the                mount
         system call. The                mount
         and                umount
          system call controls the mounting and unmounting of file systems. The parameters below configure the system to create
        an audit record when the mount system call is used by a nonprivileged user
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful file system mounts.                 64 Bit systems Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts
        -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts
        " >> /etc/audit/rules.d/50-mounts.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.10', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts'

  "5.2.3.11":
    title: '5.2.3.11 | Ensure session initiation information is collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor session initiation events. The parameters in this section track changes to the files associated with session
        events. /var/run/utmp
          tracks all currently logged in users.               /var/log/wtmp
          file tracks logins, logouts, shutdown, and reboot events.               /var/log/btmp
          keeps track of failed login attempts and can be read by entering the command                  /usr/bin/last f
        /var/log/btmp
        .               All audit records will be tagged with the identifier session.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor session initiation information.                 Example:
        # printf "
        -w /var/run/utmp -p wa -k session
        -w /var/log/wtmp -p wa -k session
        -w /var/log/btmp -p wa -k session
        " >> /etc/audit/rules.d/50-session.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.11', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/run\/utmp\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/run\/utmp\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/log\/wtmp\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.12":
    title: '5.2.3.12 | Ensure login and logout events are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor login and logout events. The parameters below track changes to files associated with login/logout events.
        /var/log/lastlog
          maintain records of the last time a user successfully logged in.               /var/run/faillock
          directory maintains records of login failures via the                  pamfaillock
         module.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor login and logout events.                 Example:
        # printf "
        -w /var/log/lastlog -p wa -k logins
        -w /var/run/faillock -p wa -k logins
        " >> /etc/audit/rules.d/50-login.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.12', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/log\/lastlog\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/var\/run\/faillock\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.13":
    title: '5.2.3.13 | Ensure file deletion events by users are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This
        configuration statement sets up monitoring for unlink
          remove a file               unlinkat
          remove a file attribute               rename
          rename a file               renameat
         rename a file attribute
        system calls and tags them with the identifier delete.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor file deletion events by users.                 64 Bit systems Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete
        -a always,exit -F arch=b32 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete
        " >> /etc/audit/rules.d/50-delete.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.13', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S unlink,unlinkat,rename,renameat -F auid>=1000 -F auid!=unset -k delete'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S unlink,unlinkat,rename,renameat -F auid>=1000 -F auid!=unset -k delete'

  "5.2.3.14":
    title: '5.2.3.14 | Ensure events that modify the systems Mandatory Access Controls are collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor SELinux, an implementation of mandatory access controls. The parameters below monitor any write access potential
        additional, deletion or modification of files in the directory or attribute changes to the                /etc/selinux/
         and                /usr/share/selinux/
         directories.             Note
         If a different Mandatory Access Control method is used, changes to the corresponding directories should be audited.
    remediation: |
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor events that modify the system's Mandatory Access Controls.
        Example:
        # printf "
        -w /etc/selinux -p wa -k MAC-policy
        -w /usr/share/selinux -p wa -k MAC-policy
        " >> /etc/audit/rules.d/50-MAC-policy.rules
                         Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.14', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/etc\/selinux\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'
            - name: Undefined
              rule: 'should cmp == ^\h*-w\h+\/usr/share\/selinux\/?\h+-p\h+wa\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.15":
    title: '5.2.3.15 | Ensure successful and unsuccessful attempts to use the chcon command are recorded - manual'
    section: 'Configure auditd rules'
    description: |
        The operating system must generate audit records for successful/unsuccessful uses of the                chcon
         command.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful and unsuccessful attempts to use the                    chcon
         command.                 64 Bit systems Example:
        # {
         UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
         [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng
        " >> /etc/audit/rules.d/50-perm_chng.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.15', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:exit,always|always,exit)\h+(?:-S\h+all\h+)?(?:-F\h+path=\/usr\/bin\/chcon(?:\/)?)\h+(?!(?:\2\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\2))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.16":
    title: '5.2.3.16 | Ensure successful and unsuccessful attempts to use the setfacl command are recorded - manual'
    section: 'Configure auditd rules'
    description: |
        The operating system must generate audit records for successful/unsuccessful uses of the                setfacl
         command
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful and unsuccessful attempts to use the
        setfacl
         command.                 64 Bit systems Example:
        # {
         UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
         [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng
        " >> /etc/audit/rules.d/50-perm_chng.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.16', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:exit,always|always,exit)\h+(?:-S\h+all\h+)?(?:-F\h+path=\/usr\/bin\/setfacl(?:\/)?)\h+(?!(?:\2\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\2))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.17":
    title: '5.2.3.17 | Ensure successful and unsuccessful attempts to use the chacl command are recorded - manual'
    section: 'Configure auditd rules'
    description: |
        The operating system must generate audit records for successful/unsuccessful uses of the                chacl
         command
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful and unsuccessful attempts to use the                    chacl
         command.                 64 Bit systems Example:
        # {
         UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
         [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng
        " >> /etc/audit/rules.d/50-perm_chng.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.17', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:exit,always|always,exit)\h+(?:-S\h+all\h+)?(?:-F\h+path=\/usr\/bin\/chacl(?:\/)?)\h+(?!(?:\2\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\2))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.18":
    title: '5.2.3.18 | Ensure successful and unsuccessful attempts to use the usermod command are recorded - manual'
    section: 'Configure auditd rules'
    description: |
        The operating system must generate audit records for successful/unsuccessful uses of the                usermod
         command.
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor successful and unsuccessful attempts to use the
        usermod
         command.                 64 Bit systems Example:
        # {
         UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
         [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k usermod
        " >> /etc/audit/rules.d/50-usermod.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
         32 Bit systems
        Follow the same procedures as for 64 bit systems and ignore any entries with                    b64
        .
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.18', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(?:exit,always|always,exit)\h+(?:-S\h+all\h+)?(?:-F\h+path=\/usr\/sbin\/usermod(?:\/)?)\h+(?!(?:\2\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\3))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?!(?:\1\2))(-F\h+perm=x\h*|-F\h+auid>=1000\h*|(?:-F\h+(?:auid!=(?:unset|-1|4294967295)|(?:unset|-1|4294967295)!=auid)\h*))(?:-k\h+\H+\b|-F\h*key=\H+\b)\h*(#[^\n\r]+)?$'

  "5.2.3.19":
    title: '5.2.3.19 | Ensure kernel module loading unloading and modification is collected - manual'
    section: 'Configure auditd rules'
    description: |
        Monitor the loading and unloading of kernel modules. All the loading / listing / dependency checking of modules is done
        by                kmod
         via symbolic links.             The following system calls control loading and unloading of modules initmodule
          load a module               finitmodule
          load a module used when the overhead of using cryptographically signed modules to determine the authenticity of a
        module can be avoided               deletemodule
          delete a module               createmodule
          create a loadable module entry               querymodule
          query the kernel for various bits pertaining to modules
        Any execution of the loading and unloading module programs and system calls will trigger an audit record with an
        identifier of                modules
        .
    remediation: |
        Create audit rules
        Edit or create a file in the                    /etc/audit/rules.d/
         directory, ending in                    .rules
         extension, with the relevant rules to monitor kernel module modification.                 64 Bit systems Example:
        # {
        UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
        [ -n "${UID_MIN}" ] && printf "
        -a always,exit -F arch=b64 -S init_module,finit_module,delete_module,create_module,query_module -F auid>=${UID_MIN} -F
        auid!=unset -k kernel_modules
        -a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k kernel_modules
        " >> /etc/audit/rules.d/50-kernel_modules.rules || printf "ERROR: Variable 'UID_MIN' is unset.\n"
        }
                         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.19', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b64 -S create_module,init_module,delete_module,query_module,finit_module -F auid>=1000 -F auid!=-1 -F key=kernel_modules'
            - name: Undefined
              rule: 'should cmp == -a always,exit -F arch=b32 -S create_module,init_module,delete_module,query_module,finit_module -F auid>=1000 -F auid!=-1 -F key=kernel_modules'
            - name: Undefined
              rule: 'should cmp == ^\h*-a\h+(always,exit|exit,always)\h+(-S\h+all\h+)?-F\h+path=\/usr\/bin\/kmod\/?\h+-F\h+(perm=x|x=perm)\h+-F\h+auid>=1000\h+-F\h+(auid!=(unset|-1|4294967295)|(unset|-1|4294967295)!=auid)\h+(-k\h+\H+|-F\h*key=\H+)\h*(#.*)?$'

  "5.2.3.20":
    title: '5.2.3.20 | Ensure the audit configuration is immutable - manual'
    section: 'Configure auditd rules'
    description: |
        Set system audit so that audit rules cannot be modified with                auditctl
         . Setting the flag e 2 forces audit to be put in immutable mode. Audit changes can only be made on system reboot.
        Note
         This setting will require the system to be rebooted to update the active                auditd
         configuration settings.
    remediation: |
        Edit or create the file                    /etc/audit/rules.d/99-finalize.rules
         and add the line                    -e 2
         at the end of the file:                 Example: # printf -- "-e 2" >> /etc/audit/rules.d/99-finalize.rules
         Load audit rules Merge and load the rules into active configuration: # augenrules --load
         Check if reboot is required. # if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load
        rules\n"; fi
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.3.20', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == ^\s*-e\s+2\b'

  "5.2.3.21":
    title: '5.2.3.21 | Ensure the running and on disk configuration is the same - manual'
    section: 'Configure auditd rules'
    description: |
        The Audit system have both on disk and running configuration. It is possible for these configuration settings to differ.
        Note
         Due to the limitations of                augenrules
         and                auditctl
        , it is not absolutely guaranteed that loading the rule sets via                augenrules load
         will result in all rules being loaded or even that the user will be informed if there was a problem loading the rules.
    remediation: |
        If the rules are not aligned across all three () areas, run the following command to merge and load all rules: #
        augenrules --load
         Check if reboot is required. if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then echo "Reboot required to load
        rules"; fi
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_5.2.3.21', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.1":
    title: '5.2.4.1 | Ensure the audit log directory is 0750 or more restrictive - manual'
    section: 'Configure auditd file access'
    description: |
        The audit log directory contains audit log files.
    remediation: |
        Run the following command to configure the audit log directory to have a mode of "0750" or less permissive: # chmod
        g-w,o-rwx "$(dirname $( awk -F"=" '/^\s*log_file\s*=\s*/ {print $2}' /etc/audit/auditd.conf))"
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.1', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.2":
    title: '5.2.4.2 | Ensure audit log files are mode 0640 or less permissive - manual'
    section: 'Configure auditd file access'
    description: |
        Audit log files contain information about the system and system activity.
    remediation: |
        Run the following command to remove more permissive mode than                    0640
         from audit log files:                 # [ -f /etc/audit/auditd.conf ] && find "$(dirname $(awk -F "=" '/^\s*log_file/
        {print $2}' /etc/audit/auditd.conf | xargs))" -type f \( ! -perm 600 -a ! -perm 0400 -a ! -perm 0200 -a ! -perm 0000 -a
        ! -perm 0640 -a ! -perm 0440 -a ! -perm 0040 \) -exec chmod u-x,g-wx,o-rwx {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.2', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.3":
    title: '5.2.4.3 | Ensure only authorized users own audit log files - manual'
    section: 'Configure auditd file access'
    description: |
        Audit log files contain information about the system and system activity.
    remediation: |
        Run the following command to configure the audit log files to be owned by the                    root
         user:                 # [ -f /etc/audit/auditd.conf ] && find "$(dirname $(awk -F "=" '/^\s*log_file/ {print $2}'
        /etc/audit/auditd.conf | xargs))" -type f ! -user root -exec chown root {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.4":
    title: '5.2.4.4 | Ensure only authorized groups are assigned ownership of audit log files - manual'
    section: 'Configure auditd file access'
    description: |
        Audit log files contain information about the system and system activity.
    remediation: |
        Run the following command to configure the audit log files to be owned by                    adm
         group:                 # find $(dirname $(awk -F"=" '/^\s*log_file\s*=\s*/ {print $2}' /etc/audit/auditd.conf | xargs))
        -type f \( ! -group adm -a ! -group root \) -exec chgrp adm {} +

        Run the following command to configure the audit log files to be owned by the                    adm
         group:                 # chgrp adm /var/log/audit/

        Run the following command to set the                    log_group
         parameter in the audit configuration file to                    log_group = adm
        :                 # sed -ri 's/^\s*#?\s*log_group\s*=\s*\S+(\s*#.*)?.*$/log_group = adm\1/' /etc/audit/auditd.conf
         Run the following command to restart the audit daemon to reload the configuration file: # systemctl restart auditd
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "5.2.4.5":
    title: '5.2.4.5 | Ensure audit configuration files are 640 or more restrictive'
    section: 'Configure auditd file access'
    description: |
        Audit configuration files control auditd and what events are audited.
    remediation: |
        Run the following command to remove more permissive mode than 0640 from the audit configuration files: # find
        /etc/audit/ -type f \( -name '*.conf' -o -name '*.rules' \) -exec chmod u-x,g-wx,o-rwx {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.6":
    title: '5.2.4.6 | Ensure audit configuration files are owned by root'
    section: 'Configure auditd file access'
    description: |
        Audit configuration files control auditd and what events are audited.
    remediation: |
        Run the following command to change ownership to                    root
         user:                 # find /etc/audit/ -type f \( -name '*.conf' -o -name '*.rules' \) ! -user root -exec chown root
        {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.7":
    title: '5.2.4.7 | Ensure audit configuration files belong to group root'
    section: 'Configure auditd file access'
    description: |
        Audit configuration files control auditd and what events are audited.
    remediation: |
        Run the following command to change group to                    root
        :                 # find /etc/audit/ -type f \( -name '*.conf' -o -name '*.rules' \) ! -group root -exec chgrp root {} +
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.8":
    title: '5.2.4.8 | Ensure audit tools are 755 or more restrictive'
    section: 'Configure auditd file access'
    description: |
        Audit tools include, but are not limited to, vendorprovided and open source audit tools needed to successfully view and
        manipulate audit information system activity and records. Audit tools include custom queries and report generators.
    remediation: |
        Run the following command to remove more permissive mode from the audit tools: # chmod go-w /sbin/auditctl
        /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.8', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.9":
    title: '5.2.4.9 | Ensure audit tools are owned by root'
    section: 'Configure auditd file access'
    description: |
        Audit tools include, but are not limited to, vendorprovided and open source audit tools needed to successfully view and
        manipulate audit information system activity and records. Audit tools include custom queries and report generators.
    remediation: |
        Run the following command to change the owner of the audit tools to the                    root
         user:                 # chown root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd
        /sbin/augenrules
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.9', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.2.4.10":
    title: '5.2.4.10 | Ensure audit tools belong to group root'
    section: 'Configure auditd file access'
    description: |
        Audit tools include, but are not limited to, vendorprovided and open source audit tools needed to successfully view and
        manipulate audit information system activity and records. Audit tools include custom queries and report generators.
    remediation: |
        Run the following command to remove more permissive mode from the audit tools: # chmod go-w /sbin/auditctl
        /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules

        Run the following command to change owner and group of the audit tools to                    root
         user and group:                 # chown root:root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace
        /sbin/auditd /sbin/augenrules
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_5.2.4.10', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.3.1":
    title: '5.3.1 | Ensure AIDE is installed'
    section: 'Configure Integrity Checking'
    description: |
        Advanced Intrusion Detection Environment AIDE is an intrusion detection tool that uses predefined rules to check the
        integrity of files and directories in the Linux operating system. AIDE has its own database to check the integrity of
        files and directories. aide
         takes a snapshot of files and directories including modification times, permissions, and file hashes which can then be
        used to compare against the current state of the filesystem to detect modifications to the system.
    remediation: |
        Run the following command to install                  aide
        :               # dnf install aide

        Configure                  aide
         as appropriate for your environment. Consult the                  aide
         documentation for options.
        Initialize                  aide
        :               Run the following commands: # aide --init
         # mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.3.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "5.3.2":
    title: '5.3.2 | Ensure filesystem integrity is regularly checked'
    section: 'Configure Integrity Checking'
    description: |
        Periodic checking of the filesystem integrity is needed to detect changes to the filesystem.
    remediation: |
        - IF - cron
         will be used to schedule and run aide check               Run the following command: # crontab -u root -e
         Add the following line to the crontab: 0 5 * * * /usr/sbin/aide --check
         - OR - - IF - aidecheck.service
         and                  aidecheck.timer
         will be used to schedule and run aide check:
        Create or edit the file                  /etc/systemd/system/aidecheck.service
         and add the following lines:
        [Unit]
        Description=Aide Check

        [Service]
        Type=simple
        ExecStart=/usr/sbin/aide --check

        [Install]
        WantedBy=multi-user.target

        Create or edit the file                  /etc/systemd/system/aidecheck.timer
         and add the following lines:
        [Unit]
        Description=Aide check every day at 5AM

        [Timer]
        OnCalendar=*-*-* 05:00:00
        Unit=aidecheck.service

        [Install]
        WantedBy=multi-user.target
                       Run the following commands:
        # chown root:root /etc/systemd/system/aidecheck.*
        # chmod 0644 /etc/systemd/system/aidecheck.*

        # systemctl daemon-reload

        # systemctl enable aidecheck.service
        # systemctl --now enable aidecheck.timer
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.3.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == enabled'
            - name: Undefined
              rule: 'should cmp == aidecheck.service'

  "5.3.3":
    title: '5.3.3 | Ensure cryptographic mechanisms are used to protect the integrity of audit tools - manual'
    section: 'Configure Integrity Checking'
    description: |
        Audit tools include, but are not limited to, vendorprovided and open source audit tools needed to successfully view and
        manipulate audit information system activity and records. Audit tools include custom queries and report generators.
    remediation: |
        Add or update the following selection lines for to a file ending in                  .conf
         in the                  /etc/aide.conf.d/
         directory or to                  /etc/aide.conf
         to protect the integrity of the audit tools:
        # Audit Tools
        /sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.3.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1.1":
    title: '6.1.1 | Ensure permissions on etcpasswd are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/passwd
         file contains user account information that is used by many system utilities and therefore must be readable for these
        utilities to operate.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/passwd
        :
        # chmod u-x,go-wx /etc/passwd
        # chown root:root /etc/passwd
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.2":
    title: '6.1.2 | Ensure permissions on etcpasswd- are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/passwd
         file contains backup user account information.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/passwd-
        :
        # chmod u-x,go-wx /etc/passwd-
        # chown root:root /etc/passwd-
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.3":
    title: '6.1.3 | Ensure permissions on etcopasswd are configured - manual'
    section: 'System File Permissions'
    description: |
        /etc/security/opasswd
         and its backup              /etc/security/opasswd.old
         hold users previous passwords if              pamunix
         or              pampwhistory
         is in use on the system
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on
        /etc/security/opasswd
         and                  /etc/security/opasswd.old
         is they exist:
        # [ -e "/etc/security/opasswd" ] && chmod u-x,go-rwx /etc/security/opasswd
        # [ -e "/etc/security/opasswd" ] && chown root:root /etc/security/opasswd
        # [ -e "/etc/security/opasswd.old" ] && chmod u-x,go-rwx /etc/security/opasswd.old
        # [ -e "/etc/security/opasswd.old" ] && chown root:root /etc/security/opasswd.old
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == /etc/security/opasswd:0177'
            - name: Undefined
              rule: 'should cmp == /etc/security/opasswd:root'
            - name: Undefined
              rule: 'should cmp == /etc/security/opasswd:root'
            - name: Undefined
              rule: 'should cmp == /etc/security/opasswd.old:0177'
            - name: Undefined
              rule: 'should cmp == /etc/security/opasswd.old:root'
            - name: Undefined
              rule: 'should cmp == /etc/security/opasswd.old:root'

  "6.1.4":
    title: '6.1.4 | Ensure permissions on etcgroup are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/group
         file contains a list of all the valid groups defined in the system. The command below allows read/write access for root
        and read access for everyone else.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/group
        :
        # chmod u-x,go-wx /etc/group
        # chown root:root /etc/group
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.4', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.5":
    title: '6.1.5 | Ensure permissions on etcgroup- are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/group
         file contains a backup list of all the valid groups defined in the system.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/group-
        :
        # chmod u-x,go-wx /etc/group-
        # chown root:root /etc/group-
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.5', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.6":
    title: '6.1.6 | Ensure permissions on etcshadow are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/shadow
         file is used to store the information about user accounts that is critical to the security of those accounts, such as
        the hashed password and other security information.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/shadow
        :
        # chown root:root /etc/shadow
        # chmod 0000 /etc/shadow
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.6', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.7":
    title: '6.1.7 | Ensure permissions on etcshadow- are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/shadow
         file is used to store backup information about user accounts that is critical to the security of those accounts, such
        as the hashed password and other security information.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/shadow-
        :
        # chown root:root /etc/shadow-
        # chmod 0000 /etc/shadow-
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.7', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.8":
    title: '6.1.8 | Ensure permissions on etcgshadow are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/gshadow
         file is used to store the information about groups that is critical to the security of those accounts, such as the
        hashed password and other security information.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/gshadow
        :
        # chown root:root /etc/gshadow
        # chmod 0000 /etc/gshadow
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.8', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.9":
    title: '6.1.9 | Ensure permissions on etcgshadow- are configured'
    section: 'System File Permissions'
    description: |
        The              /etc/gshadow
         file is used to store backup information about groups that is critical to the security of those accounts, such as the
        hashed password and other security information.
    remediation: |
        Run the following commands to set mode, owner, and group on                  /etc/gshadow-
        :
        # chown root:root /etc/gshadow-
        # chmod 0000 /etc/gshadow-
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.9', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.10":
    title: '6.1.10 | Ensure permissions on etcshells are configured'
    section: 'System File Permissions'
    description: |
        /etc/shells
         is a text file which contains the full pathnames of valid login shells. This file is consulted by              chsh
         and available to be queried by other programs.
    remediation: |
        Run the following commands to remove excess permissions, set owner, and set group on                  /etc/shells
        :
        # chmod u-x,go-wx /etc/shells
        # chown root:root /etc/shells
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.10', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.1.11":
    title: '6.1.11 | Ensure world writable files and directories are secured - manual'
    section: 'System File Permissions'
    description: |
        World writable files are the least secure. Data in worldwritable files can be modified and compromised by any user on
        the system. World writable files may also indicate an incorrectly written script or program that could potentially be
        the cause of a larger compromise to the systems integrity. See the              chmod2
         man page for more information.           Setting the sticky bit on world writable directories prevents users from
        deleting or renaming files in that directory that are not owned by them.
    remediation: |
        World Writable Files:

        It is recommended that write access is removed from                        other
         with the command (                        chmod o-w <filename>
         ), but always consult relevant vendor documentation to avoid breaking any application dependencies on a given file.

        World Writable Directories:

        Set the sticky bit on all world writable directories with the command (                        chmod a+t
        <directory_name>
         )
                                 Run the following script to: Remove other write permission from any world writable files Add
        the sticky bit to all world writable directories
        #!/usr/bin/env bash

        {
           l_smask='01000'
           a_path=(); a_arr=() # Initialize array
           a_path=(! -path "/run/user/*" -a ! -path "/proc/*" -a ! -path "*/containerd/*" -a ! -path "*/kubelet/pods/*" -a !
        -path "/sys/kernel/security/apparmor/*" -a ! -path "/snap/*" -a ! -path "/sys/fs/cgroup/memory/*" -a ! -path
        "/sys/fs/selinux/*")
           while read -r l_bfs; do
              a_path+=( -a ! -path ""$l_bfs"/*")
           done < <(findmnt -Dkerno fstype,target | awk '$1 ~ /^\s*(nfs|proc|smb)/ {print $2}')
           # Populate array with files
           while IFS= read -r -d $'\0' l_file; do
              [ -e "$l_file" ] && a_arr+=("$(stat -Lc '%n^%#a' "$l_file")")
           done < <(find / \( "${a_path[@]}" \) \( -type f -o -type d \) -perm -0002 -print0 2>/dev/null)
           while IFS="^" read -r l_fname l_mode; do # Test files in the array
              if [ -f "$l_fname" ]; then # Remove excess permissions from WW files
                 echo -e " - File: \"$l_fname\" is mode: \"$l_mode\"\n  - removing write permission on \"$l_fname\" from
        \"other\""
                 chmod o-w "$l_fname"
              fi
              if [ -d "$l_fname" ]; then
                 if [ ! $(( $l_mode & $l_smask )) -gt 0 ]; then # Add sticky bit
                    echo -e " - Directory: \"$l_fname\" is mode: \"$l_mode\" and doesn't have the sticky bit set\n  - Adding the
        sticky bit"
                    chmod a+t "$l_fname"
                 fi
              fi
           done < <(printf '%s\n' "${a_arr[@]}")
           unset a_path; unset a_arr # Remove array
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.11', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1.12":
    title: '6.1.12 | Ensure no unowned or ungrouped files or directories exist - manual'
    section: 'System File Permissions'
    description: |
        Administrators may delete users or groups from the system and neglect to remove all files and/or directories owned by
        those users or groups.
    remediation: |
        Remove or set ownership and group ownership of these files and/or directories to an active user on the system as
        appropriate.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.1.12', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1.13":
    title: '6.1.13 | Ensure SUID and SGID files are reviewed - manual'
    section: 'System File Permissions'
    description: |
        The owner of a file can set the files permissions to run with the owners or groups permissions, even if the user running
        the program is not the owner or a member of the group. The most common reason for a SUID or SGID program is to enable
        users to perform functions such as changing their password that require root privileges.
    remediation: |
        Ensure that no rogue SUID or SGID programs have been introduced into the system. Review the files returned by the action
        in the Audit section and confirm the integrity of these binaries.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_6.1.13', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.1.14":
    title: '6.1.14 | Audit system file permissions - manual'
    section: 'System File Permissions'
    description: |
        The              RPM Package Manager
         has a number of useful options. One of these, the              V
          for RPM option, can be used to verify that system packages are correctly installed. The              V
          option can be used to verify a particular package or to verify all system packages. If no output is returned, the
        package is installed correctly. The following table describes the meaning of output from the verify option
        Code   Meaning
        S      File size differs.
        M      File mode differs includes permissions and file type.
        5      digest formerly MD5 sum differs.
        D      Device file major/minor number mismatch.
        L      readLink2 path mismatch.
        U      User ownership differs.
        G      Group ownership differs.
        T      The file time mtime differs.
        P      Capabilities differ.

        The              rpm qf
         command can be used to determine which package a particular file belongs to. For example, the following commands
        determines which package the              /bin/bash
         file belongs to
         rpm qf /bin/bash
        bash4.4.192.fc28.x8664

        To verify the settings for the package that controls the              /bin/bash
         file, run the following
         rpm V bash4.4.192.fc28.x8664
        .M.......    /bin/bash
         rpm verify bash
        5 c /etc/bash.bashrc

        Note that you can feed the output of the              rpm qf
          command to the              rpm V
          command
         rpm V rpm qf /etc/passwd
        .M...... c /etc/passwd
        S.5....T c /etc/printcap

        The              rpm qi
         command can be used to display package information, including name, version, and description. Following example
        displays information for              bash
         package
         rpm qi bash
        Name         bash
        Version      4.4.19
        Release      2.fc28
        Architecture x8664
        Install Date Tue 15 Aug 2023 102728 AM EDT
        Group        Unspecified
        Size         6910653
        License      GPLv3
        Signature    RSA/SHA256, Thu 15 Mar 2018 101010 AM EDT, Key ID e08e7e629db62fb1
        Source RPM   bash4.4.192.fc28.src.rpm
        Build Date   Thu 15 Mar 2018 100110 AM EDT
        Build Host   buildhw07.phx2.fedoraproject.org
        Relocations  not relocatable
        Packager     Fedora Project
        Vendor       Fedora Project
        URL          https//www.gnu.org/software/bash
        Bug URL      https//bugz.fedoraproject.org/bash
        Summary      The GNU Bourne Again shell
        Description
        The GNU Bourne Again shell Bash is a shell or command language
        interpreter that is compatible with the Bourne shell sh. Bash
        incorporates useful features from the Korn shell ksh and the C shell
        csh. Most sh scripts can be run by bash without modification.
    remediation: |
        Correct any discrepancies found and rerun the audit until output is clean or risk is mitigated or accepted.
    type: Undefined
    impact: '0.0'
    tags: ['level2', 'rule_6.1.14', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.1":
    title: '6.2.1 | Ensure accounts in etcpasswd use shadowed passwords'
    section: 'Local User and Group Settings'
    description: |
        Local accounts can use shadowed passwords.  With shadowed passwords, the passwords are saved in shadow password file,
        /etc/shadow
        , encrypted by a salted oneway hash. Accounts with a shadowed password have an              x
         in the second field in              /etc/passwd
        .
    remediation: |
        Run the following command to set accounts to use shadowed passwords: # sed -e 's/^\([a-zA-Z0-9_]*\):[^:]*:/\1:x:/' -i
        /etc/passwd
         Investigate to determine if the account is logged in and what it is being used for, to determine if it needs to be
        forced off.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.1', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.2.2":
    title: '6.2.2 | Ensure etcshadow password fields are not empty'
    section: 'Local User and Group Settings'
    description: |
        An account with an empty password field means that anybody may log in as that user without providing a password.
    remediation: |
        If any accounts in the                  /etc/shadow
         file do not have a password, run the following command to lock the account until it can be determined why it does not
        have a password:               # passwd -l <username>
         Also, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be
        forced off.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.2', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "6.2.3":
    title: '6.2.3 | Ensure all groups in etcpasswd exist in etcgroup - manual'
    section: 'Local User and Group Settings'
    description: |
        Over time, system administration errors and changes can lead to groups being defined in              /etc/passwd
         but not in              /etc/group
         .
    remediation: |
        Analyze the output of the Audit step above and perform the appropriate action to correct any discrepancies found.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.3', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.4":
    title: '6.2.4 | Ensure no duplicate UIDs exist - manual'
    section: 'Local User and Group Settings'
    description: |
        Although the              useradd
         program will not let you create a duplicate User ID UID, it is possible for an administrator to manually edit the
        /etc/passwd
         file and change the UID field.
    remediation: |
        Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to
        determine which UID they are supposed to belong to.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.4', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.5":
    title: '6.2.5 | Ensure no duplicate GIDs exist - manual'
    section: 'Local User and Group Settings'
    description: |
        Although the              groupadd
         program will not let you create a duplicate Group ID GID, it is possible for an administrator to manually edit the
        /etc/group
         file and change the GID field.
    remediation: |
        Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to
        determine which group they are supposed to belong to.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.5', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.6":
    title: '6.2.6 | Ensure no duplicate user names exist - manual'
    section: 'Local User and Group Settings'
    description: |
        Although the              useradd
         program will not let you create a duplicate user name, it is possible for an administrator to manually edit the
        /etc/passwd
         file and change the username.
    remediation: |
        Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically
        reflect the change as long as the users have unique UIDs.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.6', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.7":
    title: '6.2.7 | Ensure no duplicate group names exist - manual'
    section: 'Local User and Group Settings'
    description: |
        Although the              groupadd
         program will not let you create a duplicate group name, it is possible for an administrator to manually edit the
        /etc/group
         file and change the group name.
    remediation: |
        Based on the results of the audit script, establish unique names for the user groups. File group ownerships will
        automatically reflect the change as long as the groups have unique GIDs.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.7', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.8":
    title: '6.2.8 | Ensure root path integrity - manual'
    section: 'Local User and Group Settings'
    description: |
        The              root
         user can execute any command on the system and could be fooled into executing programs unintentionally if the
        PATH
         is not set correctly.
    remediation: |
        Correct or justify any: Locations that are not directories
        Empty directories (                   ::
        )
        Trailing (                   :
        )
        Current working directory (                   .
        )
        Non                    root
         owned directories
        Directories that less restrictive than mode                    0755
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.8', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.9":
    title: '6.2.9 | Ensure root is the only UID 0 account'
    section: 'Local User and Group Settings'
    description: |
        Any account with UID 0 has superuser privileges on the system.
    remediation: |
        Remove any users other than                  root
          with UID                  0
          or assign them a new UID if appropriate.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.9', 'cis_oracle_linux_8_benchmark']
    enabled: true
    properties:
      match: all
      rules:

  "6.2.10":
    title: '6.2.10 | Ensure local interactive user home directories are configured - manual'
    section: 'Local User and Group Settings'
    description: |
        The user home directory is space defined for the particular user to set local environment variables and to store
        personal files.  While the system administrator can establish secure permissions for users home directories, the users
        can easily override these. Users can be defined in              /etc/passwd
         without a home directory or with a home directory that does not actually exist.
    remediation: |
        If a local interactive users' home directory is undefined and/or doesn't exist, follow local site policy and perform one
        of the following: Lock the user account Remove the user from the system
        Create a directory for the user.  If undefined, edit                    /etc/passwd
         and add the absolute path to the directory to the last field of the user.                 Run the following script to:
        Remove excessive permissions from local interactive users home directories Update the home directory's owner
        #!/usr/bin/env bash

        {
           l_output2=""
           l_valid_shells="^($( awk -F\/ '$NF != "nologin" {print}' /etc/shells | sed -rn '/^\//{s,/,\\\\/,g;p}' | paste -s -d
        '|' - ))$"
           unset a_uarr && a_uarr=() # Clear and initialize array
           while read -r l_epu l_eph; do # Populate array with users and user home location
              a_uarr+=("$l_epu $l_eph")
           done <<< "$(awk -v pat="$l_valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd)"
           l_asize="${#a_uarr[@]}" # Here if we want to look at number of users before proceeding
           [ "$l_asize " -gt "10000" ] && echo -e "\n  ** INFO **\n  - \"$l_asize\" Local interactive users found on the
        system\n  - This may be a long running process\n"
           while read -r l_user l_home; do
              if [ -d "$l_home" ]; then
                 l_mask='0027'
                 l_max="$( printf '%o' $(( 0777 & ~$l_mask)) )"
                 while read -r l_own l_mode; do
                    if [ "$l_user" != "$l_own" ]; then
                       l_output2="$l_output2\n  - User: \"$l_user\" Home \"$l_home\" is owned by: \"$l_own\"\n  -  changing
        ownership to: \"$l_user\"\n"
                       chown "$l_user" "$l_home"
                    fi
                    if [ $(( $l_mode & $l_mask )) -gt 0 ]; then
                       l_output2="$l_output2\n  - User: \"$l_user\" Home \"$l_home\" is mode: \"$l_mode\" should be mode:
        \"$l_max\" or more restrictive\n  -  removing excess permissions\n"
                       chmod g-w,o-rwx "$l_home"
                    fi
                 done <<< "$(stat -Lc '%U %#a' "$l_home")"
              else
                 l_output2="$l_output2\n  - User: \"$l_user\" Home \"$l_home\" Doesn't exist\n  -  Please create a home in
        accordance with local site policy"
              fi
           done <<< "$(printf '%s\n' "${a_uarr[@]}")"
           if [ -z "$l_output2" ]; then # If l_output2 is empty, we pass
              echo -e " - No modification needed to local interactive users home directories"
           else
              echo -e "\n$l_output2"
           fi
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.10', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2.11":
    title: '6.2.11 | Ensure local interactive user dot files access is configured - manual'
    section: 'Local User and Group Settings'
    description: |
        While the system administrator can establish secure permissions for users dot files, the users can easily override
        these. .forward
         file specifies an email address to forward the users mail to.             .rhost
         file provides the remote authentication database for the rcp, rlogin, and rsh commands and the rcmd function. These
        files bypass the standard passwordbased user authentication mechanism. They specify remote hosts and users that are
        considered trusted i.e. are allowed to access the local system without supplying a password             .netrc
         file contains data for logging into a remote host or passing authentication to an API.             .bashhistory
         file keeps track of the users last 500 commands.
    remediation: |
        Making global modifications to users' files without alerting the user community can result in unexpected outages and
        unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions
        and determine the action to be taken in accordance with site policy. The following script will:
        remove excessive permissions on                    dot
         files within interactive users' home directories
        change ownership of                    dot
         files within interactive users' home directories to the user
        change group ownership of                    dot
         files within interactive users' home directories to the user's primary group
        list                    .forward
         and                    .rhost
         files to be investigated and manually deleted
        #!/usr/bin/env bash

        {
           l_valid_shells="^($( awk -F\/ '$NF != "nologin" {print}' /etc/shells | sed -rn '/^\//{s,/,\\\\/,g;p}' | paste -s -d
        '|' - ))$"
           unset a_uarr && a_uarr=() # Clear and initialize array
           while read -r l_epu l_eph; do # Populate array with users and user home location
              [[ -n "$l_epu" && -n "$l_eph" ]] && a_uarr+=("$l_epu $l_eph")
           done <<< "$(awk -v pat="$l_valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd)"
           l_asize="${#a_uarr[@]}" # Here if we want to look at number of users before proceeding
           l_maxsize="1000" # Maximum number of local interactive users before warning (Default 1,000)
           [ "$l_asize " -gt "$l_maxsize" ] && echo -e "\n  ** INFO **\n  - \"$l_asize\" Local interactive users found on the
        system\n  - This may be a long running check\n"
           file_access_fix()
           {
              l_facout2=""
              l_max="$( printf '%o' $(( 0777 & ~$l_mask)) )"
              if [ $(( $l_mode & $l_mask )) -gt 0 ]; then
                 echo -e "  - File: \"$l_hdfile\" is mode: \"$l_mode\" and should be mode: \"$l_max\" or more restrictive\n   -
        Changing to mode \"$l_max\""
                 chmod "$l_chp" "$l_hdfile"
              fi
              if [[ ! "$l_owner" =~ ($l_user) ]]; then
                 echo -e "  - File: \"$l_hdfile\" owned by: \"$l_owner\" and should be owned by \"${l_user//|/ or }\"\n   -
        Changing ownership to \"$l_user\""
                 chown "$l_user" "$l_hdfile"
              fi
              if [[ ! "$l_gowner" =~ ($l_group) ]]; then
                 echo -e "  - File: \"$l_hdfile\" group owned by: \"$l_gowner\" and should be group owned by \"${l_group//|/ or
        }\"\n   - Changing group ownership to \"$l_group\""
                 chgrp "$l_group" "$l_hdfile"
              fi
           }
           while read -r l_user l_home; do
              if [ -d "$l_home" ]; then
                 echo -e "\n - Checking user: \"$l_user\" home directory: \"$l_home\""
                 l_group="$(id -gn "$l_user" | xargs)"
                 l_group="${l_group// /|}"
                 while IFS= read -r -d $'\0' l_hdfile; do
                    while read -r l_mode l_owner l_gowner; do
                       case "$(basename "$l_hdfile")" in
                          .forward | .rhost )
                             echo -e "  - File: \"$l_hdfile\" exists\n   - Please investigate and manually delete \"$l_hdfile\""
                          ;;
                          .netrc )
                             l_mask='0177'
                             l_chp="u-x,go-rwx"
                             file_access_fix ;;
                          .bash_history )
                             l_mask='0177'
                             l_chp="u-x,go-rwx"
                             file_access_fix ;;
                          * )
                             l_mask='0133'
                             l_chp="u-x,go-wx"
                             file_access_fix ;;
                          esac
                    done <<< "$(stat -Lc '%#a %U %G' "$l_hdfile")"
                 done < <(find "$l_home" -xdev -type f -name '.*' -print0)
              fi
           done <<< "$(printf '%s\n' "${a_uarr[@]}")"
           unset a_uarr # Remove array
        }
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2.11', 'cis_oracle_linux_8_benchmark']
    enabled: false
    properties:
      match: all
      rules:
