---

inspec_rules:
  "1.1":
    title: '1.1 | Ensure Latest SQL Server Service Packs and Hotfixes are Installed - manual'
    section: 'Installation, Updates and Patches'
    description: |
        SQL Server patches contain program updates that fix security and product functionality issues found in the software.
        These patches can be installed with a hotfix which is a single patch, a cumulative update which is a small group of
        patches or a service pack which is a large collection of patches. The SQL Server version and patch levels should be the
        most recent compatible with the organizations operational needs.
    remediation: |
        Identify the current version and patch level of your SQL Server instances and ensure they contain the latest security
        fixes. Make sure to test these fixes in your test environments before updating production instances. The most recent SQL
        Server patches can be found here: https://learn.microsoft.com/en-us/troubleshoot/sql/releases/download-and-install-
        latest-updates
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.1', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "1.2":
    title: '1.2 | Ensure Single-Function Member Servers are Used - manual'
    section: 'Installation, Updates and Patches'
    description: |
        It is recommended that SQL Server software be installed on a dedicated server. This architectural consideration affords
        security flexibility in that the database server can be placed on a separate subnet allowing access only from particular
        hosts and over particular protocols. Degrees of availability are easier to achieve as well  over time, an enterprise can
        move from a single database server to a failover to a cluster using load balancing or to some combination thereof.
    remediation: |
        Uninstall excess tooling and/or remove unnecessary roles from the underlying operating system. Impact: It is difficult
        to see any reasonably adverse impact to making this architectural change, once the costs of making the change have been
        paid. Custom applications may need to be modified to accommodate database connections over the wire rather than on the
        host (i.e. using TCP/IP instead of Named Pipes). Additional hardware and operating system licenses may be required to
        make these architectural changes.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_1.2', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "2.1":
    title: '2.1 | Ensure Ad Hoc Distributed Queries Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        Enabling Ad Hoc Distributed Queries allows users to query data and execute statements on external data sources. This
        functionality should be disabled.
    remediation: |
        For AWS RDS Instances, please refer to the documentation for using Parameter Groups here:
                       Working with parameter groups
                           Run the following T-SQL command:
        EXECUTE sp_configure 'show advanced options', 1;
        RECONFIGURE;
        EXECUTE sp_configure 'Ad Hoc Distributed Queries', 0;
        RECONFIGURE;
        GO
        EXECUTE sp_configure 'show advanced options', 0;
        RECONFIGURE;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.1', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.2":
    title: '2.2 | Ensure CLR Enabled Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        The            clr enabled
         option specifies whether user assemblies can be run by SQL Server.
    remediation: |
        For AWS RDS Instances, please refer to the documentation for using Parameter Groups here:
                       Working with parameter groups
                           Run the following T-SQL command:
        EXECUTE sp_configure 'clr enabled', 0;
        RECONFIGURE;
                     Impact:
        If CLR assemblies are in use, applications may need to be rearchitected to eliminate their usage before disabling this
        setting. Alternatively, some organizations may allow this setting to be enabled                  1
         for assemblies created with the                  SAFE
         permission set, but disallow assemblies created with the riskier                  UNSAFE
         and                  EXTERNAL_ACCESS
         permission sets. To find user-created assemblies, run the following query in all databases, replacing
        <database_name>
         with each database name:
        USE [<database_name>]
        GO
        SELECT name AS Assembly_Name, permission_set_desc
        FROM sys.assemblies
        WHERE is_user_defined = 1;
        GO
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.2', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.3":
    title: '2.3 | Ensure Cross DB Ownership Chaining Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        The            cross db ownership chaining
         option controls crossdatabase ownership chaining across all databases at the instance or server level.
    remediation: |
        For AWS RDS Instances, please refer to the documentation for using Parameter Groups here:
                       Working with parameter groups
                           Run the following T-SQL command:
        EXECUTE sp_configure 'cross db ownership chaining', 0;
        RECONFIGURE;
        GO
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.3', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.4":
    title: '2.4 | Ensure Database Mail XPs Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        The            Database Mail XPs
         option controls the ability to generate and transmit email messages from SQL Server.
    remediation: |
        Run the following T-SQL command:
        EXECUTE sp_configure 'show advanced options', 1;
        RECONFIGURE;
        EXECUTE sp_configure 'Database Mail XPs', 0;
        RECONFIGURE;
        GO
        EXECUTE sp_configure 'show advanced options', 0;
        RECONFIGURE;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.4', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.5":
    title: '2.5 | Ensure Ole Automation Procedures Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        The            Ole Automation Procedures
         option controls whether OLE Automation objects can be instantiated within TransactSQL batches. These are extended
        stored procedures that allow SQL Server users to execute functions external to SQL Server.
    remediation: |
        Run the following T-SQL command:
        EXECUTE sp_configure 'show advanced options', 1;
        RECONFIGURE;
        EXECUTE sp_configure 'Ole Automation Procedures', 0;
        RECONFIGURE;
        GO
        EXECUTE sp_configure 'show advanced options', 0;
        RECONFIGURE;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.5', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.6":
    title: '2.6 | Ensure Remote Access Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        The            remote access
         option controls the execution of local stored procedures on remote servers or remote stored procedures on local server.
    remediation: |
        For AWS RDS Instances, please refer to the documentation for using Parameter Groups here:
                       Working with parameter groups
                           Run the following T-SQL command:
        EXECUTE sp_configure 'show advanced options', 1;
        RECONFIGURE;
        EXECUTE sp_configure 'remote access', 0;
        RECONFIGURE;
        GO
        EXECUTE sp_configure 'show advanced options', 0;
        RECONFIGURE;
                     Restart the Database Engine. Impact:
        Per Microsoft: This feature will be removed in the next version of Microsoft SQL Server. Do not use this feature in new
        development work, and modify applications that currently use this feature as soon as possible. Use
        sp_addlinkedserver
         instead.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.6', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.7":
    title: '2.7 | Ensure Remote Admin Connections Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        The            remote admin connections
         option controls whether a client application on a remote computer can use the Dedicated Administrator Connection DAC.
    remediation: |
        Run the following T-SQL command on non-clustered installations:
        EXECUTE sp_configure 'remote admin connections', 0;
        RECONFIGURE;
        GO
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.7', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.8":
    title: '2.8 | Ensure Scan For Startup Procs Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        The            scan for startup procs
         option, if enabled, causes SQL Server to scan for and automatically run all stored procedures that are set to execute
        upon service startup.
    remediation: |
        Run the following T-SQL command:
        EXECUTE sp_configure 'show advanced options', 1;
        RECONFIGURE;
        EXECUTE sp_configure 'scan for startup procs', 0;
        RECONFIGURE;
        GO
        EXECUTE sp_configure 'show advanced options', 0;
        RECONFIGURE;
                     Restart the Database Engine. Impact:
        Setting Scan for Startup Procedures to                  0
         will prevent certain audit traces and other commonly used monitoring stored procedures from re-starting on start up.
        Additionally, replication requires this setting to be enabled (                 1
        ) and will automatically change this setting if needed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.8', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.9":
    title: '2.9 | Ensure Trustworthy Database Property is set to Off'
    section: 'Surface Area Reduction'
    description: |
        The            TRUSTWORTHY
         database option allows database objects to access objects in other databases under certain circumstances.
    remediation: |
        Execute the following T-SQL statement against the databases (replace                <database_name>
         below) returned by the Audit Procedure:             ALTER DATABASE [<database_name>] SET TRUSTWORTHY OFF;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.9', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "2.10":
    title: '2.10 | Ensure Unnecessary SQL Server Protocols are set to Disabled - manual'
    section: 'Surface Area Reduction'
    description: |
        SQL Server supports Shared Memory, Named Pipes, and TCP/IP protocols. However, SQL Server should be configured to use
        the bare minimum required based on the organizations needs.
    remediation: |
        Open                SQL Server Configuration Manager
        ; go to the                SQL Server Network Configuration
        . Ensure that only required protocols are enabled. Disable protocols not necessary.             Impact: The Database
        Engine (MSSQL and SQLAgent) services must be stopped and restarted for the change to take effect.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_2.10', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "2.11":
    title: '2.11 | Ensure SQL Server is configured to use non-standard ports'
    section: 'Surface Area Reduction'
    description: |
        If installed, a default SQL Server instance will be assigned a default port of            TCP1433
         for TCP/IP communication. Administrators can also manually configure named instances to use            TCP1433
         for communication.            TCP1433
         is a widely known SQL Server port and this port assignment should be changed. In a multiinstance scenario, each
        instance must be assigned its own dedicated TCP/IP port.
    remediation: |
        In                  SQL Server Configuration Manager
        , in the console pane, expand                  SQL Server Network Configuration
        , expand Protocols for                  <InstanceName>
        , and then double-click the TCP/IP protocol
        In the                  TCP/IP Properties
         dialog box, on the                  IP Addresses
         tab, several IP addresses appear in the format                  IP1
        ,                  IP2
        , up to                  IPAll
        . One of these is for the IP address of the loopback adapter,                  127.0.0.1
        . Additional IP addresses appear for each IP Address on the computer.
        Under                  IPAll
        , change the                  TCP Port
         field from                  1433
         to a non-standard port or leave the                  TCP Port
         field empty and set the                  TCP Dynamic Ports
         value to                  0
         to enable dynamic port assignment and then click                  OK
        .
        In the console pane, click                  SQL Server Services
        .
        In the details pane, right-click
        SQL Server (                   <InstanceName>
        )
         and then click                  Restart
        , to stop and restart SQL Server.               Impact: Changing the default port will force the DAC (Dedicated
        Administrator Connection) to listen on a random port. Also, it might make benign applications, such as application
        firewalls, require special configuration. In general, you should set a static port for consistent usage by applications,
        including firewalls, instead of using dynamic ports which will be chosen randomly at each SQL Server start up.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.11', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.12":
    title: '2.12 | Ensure Hide Instance option is set to Yes for Production SQL Server instances'
    section: 'Surface Area Reduction'
    description: |
        Nonclustered SQL Server instances within production environments should be designated as hidden to prevent advertisement
        by the SQL Server Browser service.
    remediation: |
        Perform either the GUI or T-SQL method shown: GUI Method
        In                  SQL Server Configuration Manager
        , expand                  SQL Server Network Configuration
        , right-click
        Protocols for                    <InstanceName>

        , and then select                  Properties
        .
        On the                  Flags
         tab, in the                  Hide Instance
         box, select                  Yes
        , and then click                  OK
         to close the dialog box. The change takes effect immediately for new connections.               T-SQL Method Execute
        the following T-SQL to remediate:
        EXEC master.sys.xp_instance_regwrite
              @rootkey = N'HKEY_LOCAL_MACHINE',
              @key = N'SOFTWARE\Microsoft\Microsoft SQL Server\MSSQLServer\SuperSocketNetLib',
              @value_name = N'HideInstance',
              @type = N'REG_DWORD',
              @value = 1;
                     Impact: This method only prevents the instance from being listed on the network. If the instance is hidden
        (not exposed by SQL Browser), then connections will need to specify the server and port in order to connect. It does not
        prevent users from connecting to server if they know the instance name and port. If you hide a clustered named instance,
        the cluster service may not be able to connect to the SQL Server. Please refer to the Microsoft documentation reference.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.12', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 1'
            - name: Undefined
              rule: 'Undefined'

  "2.13":
    title: '2.13 | Ensure the sa Login Account is set to Disabled'
    section: 'Surface Area Reduction'
    description: |
        The            sa
         account is a widely known and often widely used SQL Server account with sysadmin privileges. This is the original login
        created during installation and always has the            principalid1
         and            sid0x01
        .
    remediation: |
        Execute the following T-SQL query:
        USE [master]
        GO
        DECLARE @tsql nvarchar(max)
        SET @tsql = 'ALTER LOGIN ' + SUSER_NAME(0x01) + ' DISABLE'
        EXEC (@tsql)
        GO
                     Impact:
        It is not a good security practice to code applications or scripts to use the                  sa
         account. However, if this has been done, disabling the                  sa
         account will prevent scripts and applications from authenticating to the database server and executing required tasks
        or functions.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.13', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 1'
            - name: Undefined
              rule: 'Undefined'

  "2.14":
    title: '2.14 | Ensure the sa Login Account has been renamed'
    section: 'Surface Area Reduction'
    description: |
        The            sa
         account is a widely known and often widely used SQL Server login with sysadmin privileges. The            sa
         login is the original login created during installation and always has            principalid1
         and            sid0x01
        .
    remediation: |
        Replace the                <different_user>
         value within the below syntax and execute to rename the                sa
         login.             ALTER LOGIN sa WITH NAME = <different_user>;
         Impact:
        It is not a good security practice to code applications or scripts to use the                  sa
         login. However, if this has been done, renaming the                  sa
         login will prevent scripts and applications from authenticating to the database server and executing required tasks or
        functions.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.14', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "2.15":
    title: '2.15 | Ensure xp cmdshell Server Configuration Option is set to 0'
    section: 'Surface Area Reduction'
    description: |
        The            xpcmdshell
         option controls whether the            xpcmdshell
         extended stored procedure can be used by an authenticated SQL Server user to execute operatingsystem command shell
        commands and return results as rows within the SQL client.
    remediation: |
        Run the following T-SQL command:
        EXECUTE sp_configure 'show advanced options', 1;
        RECONFIGURE;
        EXECUTE sp_configure 'xp_cmdshell', 0;
        RECONFIGURE;
        GO
        EXECUTE sp_configure 'show advanced options', 0;
        RECONFIGURE;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.15', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 0'
            - name: Undefined
              rule: 'Undefined'

  "2.16":
    title: '2.16 | Ensure AUTO CLOSE is set to OFF on contained databases'
    section: 'Surface Area Reduction'
    description: |
        AUTOCLOSE
         determines if a given database is closed or not after a connection terminates. If enabled, subsequent connections to
        the given database will require the database to be reopened and relevant procedure caches to be rebuilt.
    remediation: |
        Execute the following T-SQL, replacing                <database_name>
         with each database name found by the Audit Procedure:             ALTER DATABASE <database_name> SET AUTO_CLOSE OFF;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.16', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "2.17":
    title: '2.17 | Ensure no login exists with the name sa'
    section: 'Surface Area Reduction'
    description: |
        The            sa
         login e.g. principal is a widely known and often widely used SQL Server account. Therefore, there should not be a login
        called            sa
         even when the original            sa
         login            principalid  1
         has been renamed.
    remediation: |
        Execute the appropriate                ALTER
         statement below based on the                principal_id
         returned for the login named                sa
        . Replace the                <different_name>
         value within the below syntax and execute to rename the                sa
         login.
        USE [master]
        GO
        -- If principal_id = 1 or the login owns database objects, rename the sa login
        ALTER LOGIN [sa] WITH NAME = <different_name>;
        GO
                     Impact:
        It is not a good security practice to code applications or scripts to use the                  sa
         account. Given that it is a best practice to rename and disable the                  sa
         account, some 3rd party applications check for the existence of a login named                  sa
         and if it doesn't exist, creates one. Removing the                  sa
         login will prevent these scripts and applications from authenticating to the database server and executing required
        tasks or functions.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_2.17', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.1":
    title: '3.1 | Ensure Server Authentication Property is set to Windows Authentication Mode'
    section: 'Authentication and Authorization'
    description: |
        Uses            Windows Authentication
         to validate attempted connections.
    remediation: |
        Perform either the GUI or T-SQL method shown: GUI Method
        Open                  SQL Server Management Studio
        .
        Open the                  Object Explorer
         tab and connect to the target database instance.
        Right click the instance name and select                  Properties
        .
        Select the                  Security
         page from the left menu.
        Set the                  Server authentication
         setting to                  Windows Authentication Mode
        .               T-SQL Method Run the following T-SQL in a Query Window:
        USE [master]
        GO
        EXEC xp_instance_regwrite N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', N'LoginMode', REG_DWORD,
        1
        GO
                     Restart the SQL Server service for the change to take effect. Impact: Changing the login mode configuration
        requires a restart of the service.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.1', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 1'
            - name: Undefined
              rule: 'Undefined'

  "3.2":
    title: '3.2 | Ensure CONNECT permissions on the guest user is Revoked within all SQL Server databases'
    section: 'Authentication and Authorization'
    description: |
        Remove the right of the            guest
         user to connect to SQL Server databases, except for            master
        ,            msdb
        ,            tempdb
        , and, on AWS RDS instances,            rdsadmin
        .
    remediation: |
        The following code snippet revokes                CONNECT
         permissions from the                guest
         user in a database. Replace                <database_name>
         as appropriate:
        USE <database_name>;
        GO
        REVOKE CONNECT FROM guest;
                     Impact:
        When                  CONNECT
         permission to the                  guest
         user is revoked, a SQL Server instance login must be mapped to a database user explicitly in order to have access to
        the database.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.2', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.3":
    title: '3.3 | Ensure Orphaned Users are Dropped From SQL Server Databases'
    section: 'Authentication and Authorization'
    description: |
        A database user for which the corresponding SQL Server login is undefined or is incorrectly defined on a server instance
        cannot log in to the instance and is referred to as orphaned and should be removed.
    remediation: |
        If the orphaned user cannot or should not be matched to an existing or new login using the Microsoft documented process
        referenced below, run the following T-SQL query in the appropriate database to remove an orphan user:
        USE [<database_name>];
        GO
        DROP USER <username>;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.3', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.4":
    title: '3.4 | Ensure SQL Authentication is not used in contained databases'
    section: 'Authentication and Authorization'
    description: |
        Contained databases do not enforce password complexity rules for SQL Authenticated users.
    remediation: |
        Leverage Windows Authenticated users in contained databases. Impact: While contained databases provide flexibility in
        relocating databases to different instances and different environments, this must be balanced with the consideration
        that no password policy mechanism exists for SQL Authenticated users in contained databases.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.4', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.5":
    title: '3.5 | Ensure the SQL Servers MSSQL Service Account is Not an Administrator - manual'
    section: 'Authentication and Authorization'
    description: |
        The service account and/or service            SID
         used by the            MSSQLSERVER
         service for a default instance or            MSSQL
                        InstanceName
         service for a named instance should not be a member of the Windows Administrator group either directly or indirectly
        via a group. This also means that the account known as            LocalSystem
         aka            NT AUTHORITY\SYSTEM
         should not be used for the            MSSQL
         service as this account has higher privileges than the SQL Server service requires.
    remediation: |
        In the case where                LocalSystem
         is used, use                SQL Server Configuration Manager
         to change to a less privileged account. Otherwise, remove the account or service                SID
         from the Administrators group. You may need to run the                SQL Server Configuration Manager
         if underlying permissions had been changed or if                SQL Server Configuration Manager
         was not originally used to set the service account.             Impact:
        The                  SQL Server Configuration Manager
         tool should always be used to change the SQL Server’s service account. This will ensure that the account has the
        necessary privileges. If the service needs access to resources other than the standard Microsoft defined directories and
        registry, then additional permissions may need to be granted separately to those resources.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_3.5', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.6":
    title: '3.6 | Ensure the SQL Servers SQLAgent Service Account is Not an Administrator - manual'
    section: 'Authentication and Authorization'
    description: |
        The service account and/or service            SID
         used by the            SQLSERVERAGENT
         service for a default instance or            SQLAGENT
                        InstanceName
         service for a named instance should not be a member of the Windows Administrator group either directly or indirectly
        via a group. This also means that the account known as            LocalSystem
         AKA            NT AUTHORITY\SYSTEM
         should not be used for the            SQLAGENT
         service as this account has higher privileges than the SQL Server service requires.
    remediation: |
        In the case where                LocalSystem
         is used, use                SQL Server Configuration Manager
         to change to a less privileged account. Otherwise, remove the account or service                SID
         from the Administrators group. You may need to run the                SQL Server Configuration Manager
         if underlying permissions had been changed or if                SQL Server Configuration Manager
         was not originally used to set the service account.             Impact:
        The                  SQL Server Configuration Manager
         tool should always be used to change the SQL Server’s service account. This will ensure that the account has the
        necessary privileges. If the service needs access to resources other than the standard Microsoft-defined directories and
        registry, then additional permissions may need to be granted separately to those resources.
        If using the auto restart feature, then the                  SQLAGENT
         service must be an Administrator.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_3.6', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.7":
    title: '3.7 | Ensure the SQL Servers Full-Text Service Account is Not an Administrator - manual'
    section: 'Authentication and Authorization'
    description: |
        The service account and/or service            SID
         used by the            MSSQLFDLauncher
         service for a default instance or            MSSQLFDLauncher
                        InstanceName
         service for a named instance should not be a member of the Windows Administrator group either directly or indirectly
        via a group. This also means that the account known as            LocalSystem
         aka            NT AUTHORITY\SYSTEM
         should not be used for the FullText service as this account has higher privileges than the SQL Server service requires.
    remediation: |
        In the case where                LocalSystem
         is used, use                SQL Server Configuration Manager
         to change to a less privileged account. Otherwise, remove the account or service                SID
         from the Administrators group. You may need to run the                SQL Server Configuration Manager
         if underlying permissions had been changed or if                SQL Server Configuration Manager
         was not originally used to set the service account.             Impact:
        The                  SQL Server Configuration Manager
         tool should always be used to change the SQL Server’s service account. This will ensure that the account has the
        necessary privileges. If the service needs access to resources other than the standard Microsoft-defined directories and
        registry, then additional permissions may need to be granted separately to those resources.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_3.7', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "3.8":
    title: '3.8 | Ensure only the default permissions specified by Microsoft are granted to the public server role'
    section: 'Authentication and Authorization'
    description: |
        public
         is a special fixed server role containing all logins. Unlike other fixed server roles, permissions can be changed for
        the            public
         role. In keeping with the principle of least privileges, the            public
         server role should not be used to grant permissions at the server scope as these would be inherited by all users.
    remediation: |
        Add the extraneous permissions found in the Audit query results to the specific logins to user-defined server roles
        which require the access.
        Revoke the                  <permission_name>
         from the                  public
         role as shown below
                         USE [master]
        GO
        REVOKE <permission_name> FROM public;
        GO

                              Impact:
        When the extraneous permissions are revoked from the                  public
         server role, access may be lost unless the permissions are granted to the explicit logins or to user-defined server
        roles containing the logins which require the access.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.8', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.9":
    title: '3.9 | Ensure Windows BUILTIN groups are not SQL Logins'
    section: 'Authentication and Authorization'
    description: |
        Prior to SQL Server 2008, the            BUILTIN\Administrators
         group was added as a SQL Server login with sysadmin privileges during installation by default. Best practices promote
        creating an Active Directory level group containing approved DBA staff accounts and using this controlled AD group as
        the login with sysadmin privileges. The AD group should be specified during SQL Server installation and the
        BUILTIN\Administrators
         group would therefore have no need to be a login.
    remediation: |
        For each                  BUILTIN
         login, if needed create a more restrictive AD group containing only the required user accounts.               Add the
        AD group or individual Windows accounts as a SQL Server login and grant it the permissions required.
        Drop the                  BUILTIN
         login using the syntax below after replacing                  <name>
         in                  [BUILTIN\
                                 <name>
                                 ]
        .
                         USE [master]
        GO
        DROP LOGIN [BUILTIN\<name>]
        GO

                              Impact:
        Before dropping the                  BUILTIN
         group logins, ensure that alternative AD Groups or Windows logins have been added with equivalent permissions.
        Otherwise, the SQL Server instance may become totally inaccessible.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.9', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.10":
    title: '3.10 | Ensure Windows local groups are not SQL Logins'
    section: 'Authentication and Authorization'
    description: |
        Local Windows groups should not be used as logins for SQL Server instances.
    remediation: |
        For each                  LocalGroupName
         login, if needed create an equivalent AD group containing only the required user accounts.               Add the AD
        group or individual Windows accounts as a SQL Server login and grant it the permissions required.
        Drop the                  LocalGroupName
         login using the syntax below after replacing                  <name>
        .
                         USE [master]
        GO
        DROP LOGIN [<name>]
        GO

                              Impact: Before dropping the local group logins, ensure that alternative AD Groups or Windows
        logins have been added with equivalent permissions. Otherwise, the SQL Server instance may become totally inaccessible.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.10', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "3.11":
    title: '3.11 | Ensure the public role in the msdb database is not granted access to SQL Agent proxies'
    section: 'Authentication and Authorization'
    description: |
        The            public
         database role contains every user in the            msdb
         database. SQL Agent proxies define a security context in which a job step can run.
    remediation: |
        Ensure the required security principals are explicitly granted access to the proxy (use
        sp_grant_login_to_proxy
        ).
        Revoke access to the                  <proxyname>
         from the                  public
         role.
                         USE [msdb]
        GO
        EXEC dbo.sp_revoke_login_from_proxy @name = N'public', @proxy_name = N'<proxyname>';
        GO

                              Impact:
        Before revoking the                  public
         role from the proxy, ensure that alternative logins or appropriate user-defined database roles have been added with
        equivalent permissions. Otherwise, SQL Agent job steps dependent upon this access will fail.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_3.11', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "4.1":
    title: '4.1 | Ensure MUST CHANGE Option is set to ON for All SQL Authenticated Logins - manual'
    section: 'Password Policies'
    description: |
        Whenever this option is set to            ON
        , SQL Server will prompt for an updated password the first time the new or altered login is used.
    remediation: |
        Set the                MUST_CHANGE
         option for SQL Authenticated logins when creating a login initially:             CREATE LOGIN <login_name> WITH
        PASSWORD = '<password_value>' MUST_CHANGE, CHECK_EXPIRATION = ON, CHECK_POLICY = ON;

        Set the                MUST_CHANGE
         option for SQL Authenticated logins when resetting a password:             ALTER LOGIN <login_name> WITH PASSWORD =
        '<new_password_value>' MUST_CHANGE;
         Impact: CHECK_EXPIRATION
         and                  CHECK_POLICY
         options must both be                  ON
        . End users must have the means (application) to change the password when forced.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_4.1', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "4.2":
    title: '4.2 | Ensure CHECK EXPIRATION Option is set to ON for All SQL Authenticated Logins Within the Sysadmin Role'
    section: 'Password Policies'
    description: |
        Applies the same password expiration policy used in Windows to passwords used inside SQL Server.
    remediation: |
        For each                <login_name>
         found by the Audit Procedure, execute the following T-SQL statement:             ALTER LOGIN [<login_name>] WITH
        CHECK_EXPIRATION = ON;
         Impact: This is a mitigating recommendation for systems which cannot follow the recommendation to use only Windows
        Authenticated logins.
        Regarding limiting this rule to only logins with                  sysadmin
         and                  CONTROL SERVER
         privileges, there are too many cases of applications that run with less than sysadmin level privileges that have hard-
        coded passwords or effectively hard-coded passwords (whatever is set the first time is nearly impossible to change).
        There are several line-of-business applications that are considered best of breed which have this failing.
        Also, keep in mind that the password policy is taken from the computer's local policy, which is taken from the Default
        Domain Policy setting. Many organizations have a different password policy regarding the service accounts. These are
        handled in AD by setting the account's password to not expire and having some other process track when the password
        needs to be changed. With this second control in place, this is perfectly acceptable from an audit perspective. If you
        treat a SQL Server login as a service account, then you have to do the same. This ensures that the password change
        happens during a communicated downtime window and not arbitrarily.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.2', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "4.3":
    title: '4.3 | Ensure CHECK POLICY Option is set to ON for All SQL Authenticated Logins'
    section: 'Password Policies'
    description: |
        Applies the same password complexity policy used in Windows to passwords used inside SQL Server.
    remediation: |
        For each                <login_name>
         found by the Audit Procedure, execute the following T-SQL statement:             ALTER LOGIN [<login_name>] WITH
        CHECK_POLICY = ON;
         Note:
         In the case of AWS RDS do not perform this remediation for the Master account.             Impact: This is a mitigating
        recommendation for systems which cannot follow the recommendation to use only Windows Authenticated logins. Weak
        passwords can lead to compromised systems. SQL Server authenticated logins will utilize the password policy set in the
        computer's local policy, which is typically set by the Default Domain Policy setting. The setting is only enforced when
        the password is changed. This setting does not force existing weak passwords to be changed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_4.3', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "5.1":
    title: '5.1 | Ensure Maximum number of error log files is set to greater than or equal to 12'
    section: 'Auditing and Logging'
    description: |
        SQL Server error log files must be protected from loss. The log files must be backed up before they are overwritten.
        Retaining more error logs helps prevent loss from frequent recycling before backups can occur.
    remediation: |
        Adjust the number of logs to prevent data loss. The default value of                6
         may be insufficient for a production environment.  Perform either the GUI or T-SQL method shown:             GUI Method
        Open                  SQL Server Management Studio
        .
        Open                  Object Explorer
         and connect to the target instance.
        Navigate to the                  Management
         tab in                  Object Explorer
         and expand. Right click on the                  SQL Server Logs
         file and select                  Configure

        Check the                  Limit the number of error log files before they are recycled

        Set the                  Maximum number of error log files
         to greater than or equal to                  12
                              T-SQL Method
        Run the following T-SQL to change the number of error log files, replace                <NumberAbove12>
         with your desired number of error log files:
        EXEC master.sys.xp_instance_regwrite
        N'HKEY_LOCAL_MACHINE',
        N'Software\Microsoft\MSSQLServer\MSSQLServer',
        N'NumErrorLogs',
        REG_DWORD,
        <NumberAbove12>;
                     Impact:
        Once the max number of error logs is reached, the oldest error log file is deleted each time SQL Server restarts or
        sp_cycle_errorlog
         is executed.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.1', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should be >= 12'
            - name: Undefined
              rule: 'Undefined'

  "5.2":
    title: '5.2 | Ensure Default Trace Enabled Server Configuration Option is set to 1'
    section: 'Auditing and Logging'
    description: |
        The default trace provides audit logging of database activity including account creations, privilege elevation and
        execution of DBCC commands.
    remediation: |
        Run the following T-SQL command:
        EXECUTE sp_configure 'show advanced options', 1;
        RECONFIGURE;
        EXECUTE sp_configure 'default trace enabled', 1;
        RECONFIGURE;
        GO
        EXECUTE sp_configure 'show advanced options', 0;
        RECONFIGURE;
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.2', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should eq 1'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'should eq 1'
            - name: Undefined
              rule: 'Undefined'

  "5.3":
    title: '5.3 | Ensure Login Auditing is set to failed logins'
    section: 'Auditing and Logging'
    description: |
        This setting will record failed authentication attempts for SQL Server logins to the            SQL Server Errorlog
        . This is the default setting for SQL Server.
        Historically, this setting has been available in all versions and editions of SQL Server. Prior to the availability of
        SQL Server Audit
        , this was the only provided mechanism for capturing logins successful or failed.
    remediation: |
        Perform either the GUI or T-SQL method shown: GUI Method
        Open                  SQL Server Management Studio
        .
        Right click the target instance and select                  Properties
         and navigate to the                  Security
         tab.
        Select the option                  Failed logins only
         under the                  Login Auditing
         section and click                  OK
        .               Restart the SQL Server instance. T-SQL Method
        Run:
                         EXEC xp_instance_regwrite N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer',
        N'AuditLevel', REG_DWORD, 2

                              Restart the SQL Server instance. Impact: At a minimum, we want to ensure failed logins are
        captured in order to detect if an adversary is attempting to brute force passwords or otherwise attempting to access a
        SQL Server improperly. Changing the setting requires a restart of the SQL Server service.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.3', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp failed logins'
            - name: Undefined
              rule: 'Undefined'

  "5.4":
    title: '5.4 | Ensure SQL Server Audit is set to capture both failed and successful logins'
    section: 'Auditing and Logging'
    description: |
        SQL Server Audit is capable of capturing both failed and successful logins and writing them to one of three places the
        application event log, the security event log, or the file system. We will use it to capture any login attempt to SQL
        Server, as well as any attempts to change audit policy. This will also serve to be a second source to record failed
        login attempts.
    remediation: |
        For AWS RDS Instances, please refer to the documentation for configuring SQL Server Audit here:                SQL
        Server Audit
                           Perform either the GUI or T-SQL method shown: GUI Method
        Expand the                  SQL Server
         in                  Object Explorer
        .
        Expand the                  Security Folder

        Right-click on the                  Audits
         folder and choose                  New Audit...

        Specify a name for the                  Server Audit
        .
        Specify the audit destination details and then click                  OK
         to save the                  Server Audit
        .
        Right-click on                  Server Audit Specifications
         and choose                  New Server Audit Specification...

        Name the                  Server Audit Specification

        Select the just created                  Server Audit
         in the                  Audit
         drop-down selection.
        Click the drop-down under                  Audit Action Type
         and select                  AUDIT_CHANGE_GROUP
        .
        Click the new drop-down                  Audit Action Type
         and select                  FAILED_LOGIN_GROUP
        .
        Click the new drop-down under                  Audit Action Type
         and select                  SUCCESSFUL_LOGIN_GROUP
        .
        Click the new drop-down under                  Audit Action Type
         and select                  SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        .
        Click the new drop-down under                  Audit Action Type
         and select                  FAILED_DATABASE_AUTHENTICATION_GROUP
        .
        Click OK to save the                  Server Audit Specification
        .
        Right-click on the new                  Server Audit Specification
         and select                  Enable Server Audit Specification
        .
        Right-click on the new                  Server Audit
         and select                  Enable Server Audit
        .               T-SQL Method Execute code similar to:
        CREATE SERVER AUDIT TrackLogins
        TO APPLICATION_LOG;
        GO
        CREATE SERVER AUDIT SPECIFICATION TrackAllLogins
        FOR SERVER AUDIT TrackLogins
          ADD (FAILED_LOGIN_GROUP),
          ADD (SUCCESSFUL_LOGIN_GROUP),
          ADD (AUDIT_CHANGE_GROUP),
          ADD (SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP),
          ADD (FAILED_DATABASE_AUTHENTICATION_GROUP)
        WITH (STATE = ON);
        GO
        ALTER SERVER AUDIT TrackLogins
        WITH (STATE = ON);
        GO
                     Note:
         If the write destination for the Audit object is to be the security event log, see the Books Online topic
        Write SQL Server Audit Events to the Security Log
         and follow the appropriate steps.             Impact: With the previous recommendation, only failed logins are
        captured. If the Audit object is not implemented with the appropriate setting, SQL Server will not capture successful
        logins, which might prove of use for forensics.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_5.4', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "6.1":
    title: '6.1 | Ensure Database and Application User Input is Sanitized - manual'
    section: 'Application Development'
    description: |
        Always validate user input received from a database client or application by testing type, length, format, and range
        prior to transmitting it to the database server.
    remediation: |
        The following steps can be taken to remediate SQL injection vulnerabilities: Review TSQL and application code for SQL
        Injection Only permit minimally privileged accounts to send user input to the server Minimize the risk of SQL injection
        attack by using parameterized commands and stored procedures Reject user input containing binary data, escape sequences,
        and comment characters Always validate user input and do not use it directly to build SQL statements Impact: Sanitize
        user input may require changes to application code or database object syntax. These changes can require applications or
        databases to be taken temporarily off-line. Any change to TSQL or application code should be thoroughly tested in
        testing environment before production implementation.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_6.1', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:

  "6.2":
    title: '6.2 | Ensure CLR Assembly Permission Set is set to SAFE ACCESS for All CLR Assemblies'
    section: 'Application Development'
    description: |
        Setting CLR Assembly Permission Sets to            SAFEACCESS
         will hinder assemblies from accessing external system resources such as files, the network, environment variables, or
        the registry.
    remediation: |
        USE <database_name>;
        GO
        ALTER ASSEMBLY <assembly_name> WITH PERMISSION_SET = SAFE;
                     Impact:
        The remediation measure should first be tested within a test environment prior to production to ensure the assembly
        still functions as designed with                  SAFE
         permission setting.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_6.2', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "7.1":
    title: '7.1 | Ensure Symmetric Key encryption algorithm is set to AES 128 or higher in non-system databases'
    section: 'Encryption'
    description: |
        Per the Microsoft Best Practices, only the SQL Server AES algorithm options,            AES128
        ,            AES192
        , and            AES256
        , should be used for a symmetric key encryption algorithm.
    remediation: |
        Refer to Microsoft SQL Server Books Online ALTER SYMMETRIC KEY entry:                https://docs.microsoft.com/en-
        us/sql/t-sql/statements/alter-symmetric-key-transact-sql
                           Impact: Eliminates use of weak and deprecated algorithms which may put a system at higher risk of an
        attacker breaking the key. Encrypted data cannot be compressed, but compressed data can be encrypted. If you use
        compression, you should compress data before encrypting it.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.1', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "7.2":
    title: '7.2 | Ensure Asymmetric Key Size is set to greater than or equal to 2048 in non-system databases'
    section: 'Encryption'
    description: |
        Microsoft Best Practices recommend to use at least a 2048bit encryption algorithm for asymmetric keys.
    remediation: |
        Refer to Microsoft SQL Server Books Online ALTER ASYMMETRIC KEY entry:                https://docs.microsoft.com/en-
        us/sql/t-sql/statements/alter-asymmetric-key-transact-sql
                           Impact: The higher-bit level may result in slower performance, but reduces the likelihood of an
        attacker breaking the key. Encrypted data cannot be compressed, but compressed data can be encrypted. If you use
        compression, you should compress data before encrypting it.
    type: Undefined
    impact: '1.0'
    tags: ['level1', 'rule_7.2', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "7.3":
    title: '7.3 | Ensure Database Backups are Encrypted'
    section: 'Encryption'
    description: |
        Ensure Database Backups are Encrypted
    remediation: |
        SQL Server backups need to 'Back up to a new media set', not 'Back up to the existing media set' in order to allow for
        encryption.  The backup option to                Encrypt Backup
         can be implemented after a Certificate or Asymmetric key has been applied to the SQL Server for this purpose.
        Alternatively, encrypt the database with TDE. This automatically encrypts the backups as well. See 7.5 Impact: A
        database backup accidentally exposed to the Internet or transmitted outside a secure environment can be easily restored
        to a SQL Server anywhere and its contents discovered.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_7.3', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'
            - name: Undefined
              rule: 'Undefined'

  "7.4":
    title: '7.4 | Ensure Network Encryption is Configured and Enabled'
    section: 'Encryption'
    description: |
        Configuring and enabling network encryption ensures traffic between the application and the database system is
        encrypted. This will ensure compliance to security standards such as PCI DSS, which is required if connections are
        through a public network. Network encryption can be configured in SQL Server either with selfsigned certificates or TLS
        certificates.
    remediation: |
        Refer to Microsoft SQL Server Encryption Documentation: https://learn.microsoft.com/en-us/sql/relational-
        databases/security/encryption/sql-server-encryption
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_7.4', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'should cmp == TRUE'
            - name: Undefined
              rule: 'Undefined'

  "7.5":
    title: '7.5 | Ensure Databases are Encrypted with TDE'
    section: 'Encryption'
    description: |
        Ensure user databases are encrypted using Transparent Data Encryption TDE. Backups of databases encrypted with TDE are
        automatically encrypted as well.
    remediation: |
        Implement TDE encryption on each user database with sensitive data.
        More info on how to do this is available here:                https://learn.microsoft.com/en-us/sql/relational-
        databases/security/encryption/transparent-data-encryption?view=sql-server-ver15
                           Impact: A database datafile, logfile or backup accidentally exposed to the Internet or transmitted
        outside a secure environment can be easily copied/restored to a SQL Server anywhere and its contents discovered.
    type: Undefined
    impact: '1.0'
    tags: ['level2', 'rule_7.5', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: true
    properties:
      match: all
      rules:
        - checks:
            - name: Undefined
              rule: 'Undefined'

  "8.1":
    title: '8.1 | Ensure SQL Server Browser Service is configured correctly - manual'
    section: 'Appendix: Additional Considerations'
    description: |
        No recommendation is being given on disabling the SQL Server Browser service.
    remediation: |
        Enable or disable the service as needed for your environment.
    type: Undefined
    impact: '0.0'
    tags: ['level1', 'rule_8.1', 'cis_microsoft_sql_server_2016_benchmark']
    enabled: false
    properties:
      match: all
      rules:
