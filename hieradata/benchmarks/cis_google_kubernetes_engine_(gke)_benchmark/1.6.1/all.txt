2.1.1 - Client certificate authentication should not be used for users
3.1.1 - Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive
3.1.2 - Ensure that the proxy kubeconfig file ownership is set to rootroot
3.1.3 - Ensure that the kubelet configuration file has permissions set to 600
3.1.4 - Ensure that the kubelet configuration file ownership is set to rootroot
3.2.1 - Ensure that the Anonymous Auth is Not Enabled Draft
3.2.2 - Ensure that the --authorization-mode argument is not set to AlwaysAllow
3.2.3 - Ensure that a Client CA File is Configured
3.2.4 - Ensure that the --read-only-port is disabled
3.2.5 - Ensure that the --streaming-connection-idle-timeout argument is not set to 0
3.2.6 - Ensure that the --make-iptables-util-chains argument is set to true
3.2.7 - Ensure that the --eventRecordQPS argument is set to 0 or a level which ensures appropriate event capture
3.2.8 - Ensure that the --rotate-certificates argument is not present or is set to true
3.2.9 - Ensure that the RotateKubeletServerCertificate argument is set to true
4.1.1 - Ensure that the cluster-admin role is only used where required
4.1.2 - Minimize access to secrets
4.1.3 - Minimize wildcard use in Roles and ClusterRoles
4.1.4 - Ensure that default service accounts are not actively used
4.1.5 - Ensure that Service Account Tokens are only mounted where necessary
4.1.6 - Avoid use of systemmasters group
4.1.7 - Limit use of the Bind Impersonate and Escalate permissions in the Kubernetes cluster
4.1.8 - Avoid bindings to systemanonymous
4.1.9 - Avoid non-default bindings to systemunauthenticated
4.1.10 - Avoid non-default bindings to systemauthenticated
4.2.1 - Ensure that the cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces.
4.3.1 - Ensure that the CNI in use supports Network Policies
4.3.2 - Ensure that all Namespaces have Network Policies defined
4.4.1 - Prefer using secrets as files over secrets as environment variables
4.4.2 - Consider external secret storage
4.5.1 - Configure Image Provenance using ImagePolicyWebhook admission controller
4.6.1 - Create administrative boundaries between resources using namespaces
4.6.2 - Ensure that the seccomp profile is set to RuntimeDefault in the pod definitions
4.6.3 - Apply Security Context to Pods and Containers
4.6.4 - The default namespace should not be used
5.1.1 - Ensure Image Vulnerability Scanning is enabled
5.1.2 - Minimize user access to Container Image repositories
5.1.3 - Minimize cluster access to read-only for Container Image repositories
5.1.4 - Ensure only trusted container images are used
5.2.1 - Ensure GKE clusters are not running using the Compute Engine default service account
5.2.2 - Prefer using dedicated GCP Service Accounts and Workload Identity
5.3.1 - Ensure Kubernetes Secrets are encrypted using keys managed in Cloud KMS
5.4.1 - Ensure the GKE Metadata Server is Enabled
5.5.1 - Ensure Container-Optimized OS cos containerd is used for GKE node images
5.5.2 - Ensure Node Auto-Repair is enabled for GKE nodes
5.5.3 - Ensure Node Auto-Upgrade is enabled for GKE nodes
5.5.4 - When creating New Clusters - Automate GKE version management using Release Channels
5.5.5 - Ensure Shielded GKE Nodes are Enabled
5.5.6 - Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled
5.5.7 - Ensure Secure Boot for Shielded GKE Nodes is Enabled
5.6.1 - Enable VPC Flow Logs and Intranode Visibility
5.6.2 - Ensure use of VPC-native clusters
5.6.3 - Ensure Control Plane Authorized Networks is Enabled
5.6.4 - Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled
5.6.5 - Ensure clusters are created with Private Nodes
5.6.6 - Consider firewalling GKE worker nodes
5.6.7 - Ensure use of Google-managed SSL Certificates
5.7.1 - Ensure Logging and Cloud Monitoring is Enabled
5.7.2 - Enable Linux auditd logging
5.8.1 - Ensure authentication using Client Certificates is Disabled
5.8.2 - Manage Kubernetes RBAC users with Google Groups for GKE
5.8.3 - Ensure Legacy Authorization ABAC is Disabled
5.9.1 - Enable Customer-Managed Encryption Keys CMEK for GKE Persistent Disks PD
5.9.2 - Enable Customer-Managed Encryption Keys CMEK for Boot Disks
5.10.1 - Ensure Kubernetes Web UI is Disabled
5.10.2 - Ensure that Alpha clusters are not used for production workloads
5.10.3 - Consider GKE Sandbox for running untrusted workloads
5.10.4 - Ensure use of Binary Authorization
5.10.5 - Enable Security Posture